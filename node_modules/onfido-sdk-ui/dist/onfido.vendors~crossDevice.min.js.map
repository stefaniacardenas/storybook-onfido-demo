{"version":3,"sources":["webpack://Onfido/../node_modules/libphonenumber-js/build/metadata.js","webpack://Onfido/../node_modules/libphonenumber-js/build/constants.js","webpack://Onfido/../node_modules/libphonenumber-js/build/parse_.js","webpack://Onfido/../node_modules/input-format/modules/input control.js","webpack://Onfido/../node_modules/libphonenumber-js/build/parsePhoneNumber.js","webpack://Onfido/../node_modules/libphonenumber-js/build/getNumberType_.js","webpack://Onfido/../node_modules/libphonenumber-js/build/util.js","webpack://Onfido/../node_modules/input-format/modules/parse.js","webpack://Onfido/../node_modules/libphonenumber-js/custom.js","webpack://Onfido/../node_modules/libphonenumber-js/build/isViablePhoneNumber.js","webpack://Onfido/../node_modules/libphonenumber-js/build/extension.js","webpack://Onfido/../node_modules/libphonenumber-js/build/parseIncompletePhoneNumber.js","webpack://Onfido/../node_modules/libphonenumber-js/build/parseDigits.js","webpack://Onfido/../node_modules/libphonenumber-js/build/RFC3966.js","webpack://Onfido/../node_modules/libphonenumber-js/build/PhoneNumber.js","webpack://Onfido/../node_modules/libphonenumber-js/build/validate_.js","webpack://Onfido/../node_modules/libphonenumber-js/build/findNumbers/util.js","webpack://Onfido/../node_modules/input-format/modules/helpers.js","webpack://Onfido/../node_modules/input-format/modules/template formatter.js","webpack://Onfido/../node_modules/input-format/modules/format.js","webpack://Onfido/../node_modules/libphonenumber-js/build/ParseError.js","webpack://Onfido/../node_modules/libphonenumber-js/build/isPossibleNumber_.js","webpack://Onfido/../node_modules/libphonenumber-js/build/format_.js","webpack://Onfido/../node_modules/libphonenumber-js/build/getNumberType.js","webpack://Onfido/../node_modules/libphonenumber-js/build/PhoneNumberMatcher.js","webpack://Onfido/../node_modules/libphonenumber-js/build/AsYouType.js","webpack://Onfido/../node_modules/react-lifecycles-compat/react-lifecycles-compat.es.js","webpack://Onfido/../node_modules/input-format/modules/template parser.js","webpack://Onfido/../node_modules/input-format/modules/ReactInput.js","webpack://Onfido/../node_modules/input-format/modules/parse digit.js","webpack://Onfido/../node_modules/libphonenumber-js/build/parsePhoneNumber_.js","webpack://Onfido/../node_modules/libphonenumber-js/build/getCountryCallingCode.js","webpack://Onfido/../node_modules/libphonenumber-js/build/IDD.js","webpack://Onfido/../node_modules/libphonenumber-js/build/isValidNumberForRegion_.js","webpack://Onfido/../node_modules/libphonenumber-js/build/parse.js","webpack://Onfido/../node_modules/libphonenumber-js/build/format.js","webpack://Onfido/../node_modules/libphonenumber-js/build/findNumbers/utf-8.js","webpack://Onfido/../node_modules/libphonenumber-js/build/findNumbers/parsePreCandidate.js","webpack://Onfido/../node_modules/libphonenumber-js/build/findNumbers/isValidPreCandidate.js","webpack://Onfido/../node_modules/libphonenumber-js/build/findNumbers/isValidCandidate.js","webpack://Onfido/../node_modules/libphonenumber-js/build/findPhoneNumbers.js","webpack://Onfido/../node_modules/libphonenumber-js/build/findPhoneNumbers_.js","webpack://Onfido/../node_modules/react-phone-number-input/native.js","webpack://Onfido/../node_modules/react-phone-number-input/commonjs/PhoneInputNativeDefaultMetadata.js","webpack://Onfido/../node_modules/react-phone-number-input/commonjs/PhoneInputNative.js","webpack://Onfido/../node_modules/react-phone-number-input/commonjs/PhoneInput.js","webpack://Onfido/../node_modules/react-phone-number-input/commonjs/InputSmart.js","webpack://Onfido/../node_modules/input-format/index.js","webpack://Onfido/../node_modules/input-format/modules/close braces.js","webpack://Onfido/../node_modules/input-format/modules/edit.js","webpack://Onfido/../node_modules/input-format/modules/dom.js","webpack://Onfido/../node_modules/libphonenumber-js/build/tools/semver-compare.js","webpack://Onfido/../node_modules/libphonenumber-js/build/parsePhoneNumberFromString.js","webpack://Onfido/../node_modules/libphonenumber-js/build/parsePhoneNumberFromString_.js","webpack://Onfido/../node_modules/libphonenumber-js/build/getExampleNumber.js","webpack://Onfido/../node_modules/libphonenumber-js/build/isPossibleNumber.js","webpack://Onfido/../node_modules/libphonenumber-js/build/validate.js","webpack://Onfido/../node_modules/libphonenumber-js/build/isValidNumberForRegion.js","webpack://Onfido/../node_modules/libphonenumber-js/build/findNumbers.js","webpack://Onfido/../node_modules/libphonenumber-js/build/findNumbers_.js","webpack://Onfido/../node_modules/libphonenumber-js/build/findNumbers/RegExpCache.js","webpack://Onfido/../node_modules/libphonenumber-js/build/findNumbers/LRUCache.js","webpack://Onfido/../node_modules/libphonenumber-js/build/findNumbers/Leniency.js","webpack://Onfido/../node_modules/libphonenumber-js/build/searchNumbers.js","webpack://Onfido/../node_modules/libphonenumber-js/build/formatIncompletePhoneNumber.js","webpack://Onfido/../node_modules/react-phone-number-input/commonjs/formatPhoneNumber.js","webpack://Onfido/../node_modules/react-phone-number-input/commonjs/InputBasic.js","webpack://Onfido/../node_modules/react-phone-number-input/commonjs/InternationalIcon.js","webpack://Onfido/../node_modules/react-phone-number-input/commonjs/Flag.js","webpack://Onfido/../node_modules/react-phone-number-input/commonjs/input-control.js","webpack://Onfido/../node_modules/react-phone-number-input/commonjs/countries.js","webpack://Onfido/../node_modules/react-phone-number-input/commonjs/CountrySelectNative.js"],"names":["Object","defineProperty","exports","value","_typeof","Symbol","iterator","obj","constructor","prototype","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","key","Constructor","protoProps","staticProps","validateMetadata","getExtPrefix","country","metadata","Metadata","hasCountry","ext","DEFAULT_EXT_PREFIX","getCountryCallingCode","countryCallingCode","Error","isSupportedCountry","undefined","countries","_semverCompare","_semverCompare2","__esModule","default","_classCallCheck","instance","TypeError","V3","this","v1","version","v2","v3","_country","country_metadata","countryCallingCodes","_this","formats","_getFormats","getDefaultCountryMetadataForRegion","map","_","Format","_getNationalPrefixFormattingRule","nationalPrefix","_getNationalPrefixIsOptionalWhenFormatting","types","_type","hasTypes","getType","Type","country_phone_code_to_countries","country_calling_codes","country_calling_code","format","_format","nationalPrefixFormattingRule","nationalPrefixIsOptionalWhenFormatting","usesNationalPrefix","test","replace","type","possibleLengths","is_object","keys","join","type_of","MIN_LENGTH_FOR_NSN","MAX_LENGTH_FOR_NSN","MAX_LENGTH_COUNTRY_CODE","VALID_DIGITS","WHITESPACE","VALID_PUNCTUATION","PLUS_CHARS","text","options","arguments","_metadata2","defaultCountry","_ParseError2","_parse_input","indexOf","_RFC","parseRFC3966","number","extract_formatted_phone_number","_isViablePhoneNumber2","with_extension_stripped","_extension","extractExtension","parse_input","formatted_phone_number","_parse_phone_number","default_country","_extractCountryCallin","extractCountryCallingCode","chooseCountryByCountryCallingCode","_getCountryCallingCode2","_parse_national_numbe","national_number","_parseIncompletePhoneNumber2","carrier_code","_strip_national_prefi","strip_national_prefix_and_carrier_code","potential_national_number","carrierCode","_getNumberType_","checkNumberLengthForType","_util","matchesEntirely","nationalNumberPattern","parse_national_number","exactCountry","find_country_code","parse_phone_number","nationalNumber","selectedCountry","_constants","phoneNumber","_PhoneNumber2","valid","extended","result","phone","possible","_isPossibleNumber_","is_possible_number","_interopRequireDefault","_getNumberType_2","_IDD","MAX_INPUT_STRING_LENGTH","PHONE_NUMBER_START_PATTERN","RegExp","AFTER_PHONE_NUMBER_END_PATTERN","starts_at","search","slice","nationalPrefixForParsing","national_prefix_pattern","national_prefix_matcher","exec","national_significant_number","captured_groups_count","nationalPrefixTransformRule","national_prefix","national_phone_number","possible_countries","_iterator","_isArray","Array","isArray","_i","_ref","next","done","leadingDigits","_find_country_code","numberWithoutIDD","stripIDDPrefix","onCut","event","input","_parse","on_change","setTimeout","format_input_text","onPaste","selection","_dom","getSelection","erase_selection","onChange","onKeyDown","operation","getOperation","preventDefault","_edit2","_parse4","_format3","start","end","setCaretPosition","_parse2","getCaretPosition","caret","operation_applied","formatted","_extends","assign","source","hasOwnProperty","call","_slicedToArray","arr","_arr","_n","_d","_e","_s","push","err","sliceIterator","_normalizeArguments","normalizeArguments","_parsePhoneNumber_2","_parsePhoneNumber_","args","_Array$prototype$slic","_Array$prototype$slic2","arg_1","arg_2","arg_3","arg_4","isObject","is_of_type","pattern","NON_FIXED_LINE_PHONE_TYPES","type_info","possible_lengths","mobile_type","mergeArrays","actual_length","minimum_length","_metadata","regular_expression","a","b","merged","element","sort","caret_position","parse_character","focused_input_character_index","index","character","module","ParseError","parsePhoneNumber","parsePhoneNumberFromString","parse","parseNumber","formatNumber","getNumberType","getExampleNumber","isPossibleNumber","isValidNumber","isValidNumberForRegion","findNumbers","searchNumbers","PhoneNumberMatcher","findPhoneNumbers","searchPhoneNumbers","PhoneNumberSearch","AsYouType","formatIncompletePhoneNumber","parseIncompletePhoneNumber","parsePhoneNumberCharacter","parseDigits","DIGITS","DIGIT_PLACEHOLDER","getPhoneCode","formatRFC3966","VALID_PHONE_NUMBER_PATTERN","MIN_LENGTH_PHONE_NUMBER_PATTERN","VALID_PHONE_NUMBER","EXTN_PATTERNS_FOR_PARSING","EXTN_PATTERNS_FOR_MATCHING","EXTN_PATTERN","number_without_extension","matches","match","RFC3966_EXTN_PREFIX","CAPTURING_EXTN_DIGITS","create_extension_pattern","purpose","single_extension_characters","string","split","_parseDigits","parseDigit","digit","_part$split","_part$split2","name","_ref2","_isViablePhoneNumber","_metadata3","_isPossibleNumber_2","_validate_2","_format_2","PhoneNumber","isCountryCode","limit","lower","upper","trimAfterFirstMatch","regexp","startsWith","substring","endsWith","count_occurences","symbol","count","template","placeholder","should_close_braces","characters_in_template","_helpers","value_character_index","filled_in_template","_closeBraces2","_closeBraces","formatter","_templateFormatter2","found","possibly_last_input_character_index","_templateFormatter","code","message","stack","create","is_international","FIRST_GROUP_PATTERN","defaultOptions","addExtension","format_national_number","formatExtension","fromCountry","IDDPrefix","getIDDPrefix","humanReadable","formattedForSameCountryCallingCode","formatIDDSameCountryCallingCodeNumber","format_national_number_using_format","choose_format_for_number","changeInternationalFormatStyle","formattedNumber","extension","useInternationalFormat","includeNationalPrefixForNationalFormat","internationalFormat","format_as","available_formats","leadingDigitsPatterns","last_leading_digits_pattern","local","trim","toCountryCallingCode","toCountryMetadata","fromCountryMetadata","_parse_2","_RegExpCache2","_utf","_Leniency2","_parsePreCandidate2","_isValidPreCandidate2","_isValidCandidate","_isValidCandidate2","INNER_MATCHES","pZ","PZ","leadLimit","punctuationLimit","digitBlockLimit","blockLimit","punctuation","digitSequence","pNd","PATTERN","LEAD_CLASS","UNWANTED_END_CHAR_PATTERN","_pN","_pL","MAX_SAFE_INTEGER","Number","Math","pow","state","searchIndex","regExpCache","leniency","maxTries","candidate","offset","parseAndVerify","extractInnerMatch","startsAt","endsAt","isFirstMatch","possibleInnerMatch","_group","_match","group","lastMatch","find","hasNext","strip_dangling_braces","cut_stripping_dangling_braces","close_dangling_braces","cut_before","retained_template","opening_braces","closing_braces","dangling_braces","repeat","_parse_","_format_","LONGEST_DUMMY_PHONE_NUMBER","DIGIT_PLACEHOLDER_MATCHER","CREATE_CHARACTER_CLASS_PATTERN","CREATE_STANDALONE_DIGIT_PATTERN","ELIGIBLE_FORMAT_PATTERN","VALID_INCOMPLETE_PHONE_NUMBER","VALID_INCOMPLETE_PHONE_NUMBER_PATTERN","reset","extracted_number","processInput","currentOutput","parsedInput","resetCountriness","isInternational","determineTheCountry","initialize_phone_number_formats_for_this_country_calling_code","resetFormat","previous_national_prefix","extractNationalPrefix","matching_formats","format_as_non_formatted_number","match_formats_by_leading_digits","formatted_national_phone_number","formatNationalNumber","formatFullNumber","next_digits","national_number_formatted_with_previous_format","chosenFormat","formatNextNationalNumberDigits","formatted_number","attempt_to_format_complete_phone_number","chooseAnotherFormat","reformatNationalNumber","resetCountry","partially_populated_template","last_match_position","filter","leading_digits","index_of_leading_digits_pattern","had_enough_leading_digits","shouldFormat","leading_digits_patterns_count","leading_digits_pattern_index","min","leading_digits_pattern","isFormatApplicable","createFormattingTemplate","full_number","formattedNationalNumber","_iterator2","_isArray2","_i2","nationalPrefixIsMandatoryWhenFormatting","getTemplateForNumberFormatPattern","number_pattern","dummy_phone_number_matching_format_pattern","number_format","getFormatFormat","strict_pattern","national_number_dummy_digits","digits","_iterator3","_isArray3","_i3","_ref3","pop","cleared_string","_iterator4","_isArray4","_i4","_ref4","cut_before_index","_iterator5","_isArray5","_i5","_ref5","times","componentWillMount","getDerivedStateFromProps","setState","componentWillReceiveProps","nextProps","prevState","bind","componentWillUpdate","nextState","prevProps","__reactInternalSnapshotFlag","__reactInternalSnapshot","getSnapshotBeforeUpdate","polyfill","Component","isReactComponent","foundWillMountName","foundWillReceivePropsName","foundWillUpdateName","UNSAFE_componentWillMount","UNSAFE_componentWillReceiveProps","UNSAFE_componentWillUpdate","componentName","displayName","newApiName","componentDidUpdate","maybeSnapshot","snapshot","__suppressDeprecationWarning","max_characters","_class","_temp2","_react2","_propTypes2","_parse3","_inputControl","_possibleConstructorReturn","self","ReferenceError","ReactInput","_React$Component","_temp","_len","_key","__proto__","getPrototypeOf","apply","concat","storeInstance","getInputElement","_this$props","_this$props2","_this$props3","onBlur","_this$props4","_event","stopPropagation","_this$props5","subClass","superClass","setPrototypeOf","_inherits","_props","inputComponent","rest","_objectWithoutProperties","createElement","ref","isEmpty","focus","propTypes","func","isRequired","defaultProps","get","countryMetadata","SINGLE_IDD_PREFIX","defaultIDDPrefix","IDDPrefixPattern","matchedGroups","CAPTURING_DIGIT_PATTERN","_validate_","_parsePhoneNumber","arg_5","isLatinLetter","letter","pL_regexp","pMn_regexp","latinLetterRegexp","isInvalidPunctuationSymbol","pSc_regexp","_pZ","SECOND_NUMBER_START_PATTERN","SLASH_SEPARATED_DATES","TIME_STAMPS","followingText","TIME_STAMPS_SUFFIX_LEADING","MATCHING_BRACKETS_ENTIRE","PUB_PAGES","LEAD_CLASS_LEADING","previousChar","lastCharIndex","nextChar","BRACKET_PAIR_LIMIT","_findPhoneNumbers_2","_normalizeArguments2","_findPhoneNumbers_","phones","_defineProperty","WHITESPACE_IN_THE_BEGINNING_PATTERN","PUNCTUATION_IN_THE_END_PATTERN","parseCandidate","last_match","PhoneInput","_react","_PhoneInputNative2","PhoneInputNativeDefaultMetadata","_Component","storeInputRef","_classnames2","_PhoneInput2","_CountrySelectNative2","PhoneInputNative","getInputClassName","disabled","invalid","countrySelectComponent","countrySelectProperties","countrySelectArrowComponent","_class2","_initialiseProps","_reactLifecyclesCompat","_InputSmart2","_InputBasic2","_InternationalIcon2","_Flag2","_default2","_countries","PhoneNumberInput","_PureComponent","labels","international","internationalIcon","parsed_number","pre_selected_country","getPreSelectedCountry","getCountryCodes","country_select_options","generate_country_select_options","parsed_input","generateParsedInput","PureComponent","new_country","onCountryChange","autoComplete","countrySelectTabIndex","showCountrySelect","style","className","inputClassName","error","indicateInvalid","CountrySelectComponent","smartCaret","flags","flagComponent","flagsPath","displayInitialValueAsLocalNumber","countrySelectHidesPhoneInputField","locale","phoneNumberInputProps","_state","hidePhoneInputField","InputComponent","_countrySelectProps","storeCountrySelectInstance","onCountrySelected","tabIndex","focusPhoneInputField","storePhoneNumberInputInstance","onPhoneNumberKeyDown","cloneElement","hasChangedCountry","_state$props","old_default_country","old_value","new_default_country","new_value","new_state","bool","arrayOf","objectOf","object","node","shape","_this2","_props2","_state2","old_parsed_input","old_country","new_parsed_input","migrateParsedInputForNewCountry","e164","_props3","getCountryForParsedInput","hide","number_input","country_select","getCountrySelectOptions","label","icon","createCountrySelectOptionIconComponent","FlagComponent","InternationalIcon","generateNationalNumberDigits","_inputFormat","_custom","_formatPhoneNumber2","InputSmart","storeInput","empty_placeholder","selectionStart","selectionEnd","keyCode","Keys","Backspace","Delete","setSelectionRange","pa","pb","na","nb","isNaN","_parsePhoneNumberFromString_2","_parsePhoneNumberFromString_","examples","_PhoneNumber","_getNumberType","_isValidNumberForRegion_2","_findNumbers_2","_findNumbers_","matcher","_PhoneNumberMatcher2","results","_PhoneNumberMatcher","_LRUCache","_LRUCache2","RegExpCache","size","cache","regExp","put","Node","prev","LRUCache","head","tail","ensureLimit","remove","console","log","containsMoreThanOneSlashInNationalNumber","_parseDigits2","containsOnlyValidXChars","charAtIndex","charAt","charAtNextIndex","util","isNumberMatch","MatchType","NSN_MATCH","isNationalPrefixPresentIfRequired","getCountryCodeSource","phoneNumberRegion","getRegionCodeForCountryCode","getCountryCode","getMetadataForRegion","getNationalSignificantNumber","formatRule","chooseFormattingPatternForNumber","numberFormats","getNationalPrefixFormattingRule","getNationalPrefixOptionalWhenFormatting","PhoneNumberUtil","formattingRuleHasFirstGroupOnly","rawInputCopy","normalizeDigitsOnly","getRawInput","maybeStripNationalPrefixAndCarrierCode","firstSlashInBodyIndex","secondSlashInBodyIndex","CountryCodeSource","FROM_NUMBER_WITH_PLUS_SIGN","FROM_NUMBER_WITHOUT_PLUS_SIGN","String","checkNumberGroupingIsValid","checkGroups","normalizedCandidate","normalizeDigits","formattedNumberGroups","getNationalNumberGroups","alternateFormats","MetadataManager","getAlternateFormatsForCountry","nationalSignificantNumber","alternateFormat","getPatternForRegExp","formattingPattern","formatNsnUsingPattern","rfc3966Format","endIndex","startIndex","allNumberGroupsAreExactlyPresent","candidateGroups","NON_DIGITS_PATTERN","candidateNumberGroupIndex","hasExtension","contains","formattedNumberGroupIndex","allNumberGroupsRemainGrouped","fromIndex","FROM_DEFAULT_COUNTRY","countryCode","region","getNddPrefixForRegion","Character","isDigit","getExtension","POSSIBLE","VALID","toString","STRICT_GROUPING","candidateString","EXACT_GROUPING","_AsYouType2","_AsYouType","InputBasic","newValue","xmlns","xmlnsXlink","viewBox","d","points","alt","src","toLowerCase","includeInternationalOption","has_international_option","country_names","default_country_names","compare_strings","unshift","ZZ","parsed_phone","previous_country","strip_country_calling_code","partial_national_significant_number","get_national_significant_number_part","derived_country","get_country_from_possibly_incomplete_international_phone_number","could_number_belong_to_country","localeCompare","country_calling_prefix","getNationalNumber","toUpperCase","CountrySelectNative","SelectArrow","selectArrowComponent","SelectedCountryFlag","option"],"mappings":";sGAEAA,OAAOC,eAAeC,EAAS,aAAc,CAC5CC,OAAO,IAGR,IAAIC,EAA4B,mBAAXC,QAAoD,iBAApBA,OAAOC,SAAwB,SAAUC,GAAO,cAAcA,GAAS,SAAUA,GAAO,OAAOA,GAAyB,mBAAXF,QAAyBE,EAAIC,cAAgBH,QAAUE,IAAQF,OAAOI,UAAY,gBAAkBF,GAElQG,EAAe,WAAc,SAASC,EAAiBC,EAAQC,GAAS,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAME,OAAQD,IAAK,CAAE,IAAIE,EAAaH,EAAMC,GAAIE,EAAWC,WAAaD,EAAWC,aAAc,EAAOD,EAAWE,cAAe,EAAU,UAAWF,IAAYA,EAAWG,UAAW,GAAMnB,OAAOC,eAAeW,EAAQI,EAAWI,IAAKJ,IAAiB,OAAO,SAAUK,EAAaC,EAAYC,GAAiJ,OAA9HD,GAAYX,EAAiBU,EAAYZ,UAAWa,GAAiBC,GAAaZ,EAAiBU,EAAaE,GAAqBF,GAA7gB,GAEnBnB,EAAQsB,iBAAmBA,EAC3BtB,EAAQuB,aAiYR,SAAsBC,EAASC,GAE9B,IADAA,EAAW,IAAIC,EAASD,IACXE,WAAWH,GACvB,OAAOC,EAASD,QAAQA,GAASI,MAElC,OAAOC,GArYR7B,EAAQ8B,sBAkZR,SAA+BN,EAASC,GAEvC,IADAA,EAAW,IAAIC,EAASD,IACXE,WAAWH,GACvB,OAAOC,EAASD,QAAQA,GAASO,qBAElC,MAAM,IAAIC,MAAM,oBAAsBR,IAtZvCxB,EAAQiC,mBAyZR,SAA4BT,EAASC,GAGpC,YAAuCS,IAAhCT,EAASU,UAAUX,IA1Z3B,IAIgCnB,EAJ5B+B,EAAiB,EAAQ,KAEzBC,GAE4BhC,EAFa+B,IAEQ/B,EAAIiC,WAAajC,EAAM,CAAEkC,QAASlC,GAEvF,SAASmC,EAAgBC,EAAUtB,GAAe,KAAMsB,aAAoBtB,GAAgB,MAAM,IAAIuB,UAAU,qCAIhH,IAGIC,EAAK,QAELd,EAAqB,SAErBH,EAAW,WACd,SAASA,EAASD,GACjBe,EAAgBI,KAAMlB,GAEtBJ,EAAiBG,GAEjBmB,KAAKnB,SAAWA,EAEhBmB,KAAKC,IAAMpB,EAASqB,QACpBF,KAAKG,QAA0Bb,IAArBT,EAASqB,UAAiF,KAAxD,EAAIT,EAAgBE,SAASd,EAASqB,QAASH,GAC3FC,KAAKI,QAA0Bd,IAArBT,EAASqB,QAuMpB,OApMAtC,EAAakB,EAAU,CAAC,CACvBR,IAAK,aACLjB,MAAO,SAAoBuB,GAC1B,YAA4CU,IAArCU,KAAKnB,SAASU,UAAUX,KAE9B,CACFN,IAAK,UACLjB,MAAO,SAAiBgD,GACvB,IAAKA,EAGJ,OAFAL,KAAKK,cAAWf,EAChBU,KAAKM,sBAAmBhB,EACjBU,KAGR,IAAKA,KAAKjB,WAAWsB,GACpB,MAAM,IAAIjB,MAAM,oBAAsBiB,GAKvC,OAFAL,KAAKK,SAAWA,EAChBL,KAAKM,iBAAmBN,KAAKnB,SAASU,UAAUc,GACzCL,OAEN,CACF1B,IAAK,qCACLjB,MAAO,WACN,OAAO2C,KAAKnB,SAASU,UAAUS,KAAKO,sBAAsBP,KAAKb,sBAAsB,MAEpF,CACFb,IAAK,qBACLjB,MAAO,WACN,OAAO2C,KAAKM,iBAAiB,KAE5B,CACFhC,IAAK,YACLjB,MAAO,WACN,IAAI2C,KAAKC,KAAMD,KAAKG,GACpB,OAAOH,KAAKM,iBAAiB,KAE5B,CACFhC,IAAK,mBACLjB,MAAO,WACN,IAAI2C,KAAKC,KAAMD,KAAKG,GACpB,OAAOH,KAAKM,iBAAiB,MAE5B,CACFhC,IAAK,wBACLjB,MAAO,WACN,OAAI2C,KAAKC,IAAMD,KAAKG,GAAWH,KAAKM,iBAAiB,GAC9CN,KAAKM,iBAAiB,KAE5B,CACFhC,IAAK,kBACLjB,MAAO,WACN,IAAI2C,KAAKC,GACT,OAAOD,KAAKM,iBAAiBN,KAAKG,GAAK,EAAI,KAE1C,CACF7B,IAAK,cACLjB,MAAO,SAAqBiD,GAC3B,OAAOA,EAAiBN,KAAKC,GAAK,EAAID,KAAKG,GAAK,EAAI,KAOnD,CACF7B,IAAK,UACLjB,MAAO,WACN,IAAImD,EAAQR,KAERS,EAAUT,KAAKU,YAAYV,KAAKM,mBAAqBN,KAAKU,YAAYV,KAAKW,uCAAyC,GACxH,OAAOF,EAAQG,IAAI,SAAUC,GAC5B,OAAO,IAAIC,EAAOD,EAAGL,OAGrB,CACFlC,IAAK,iBACLjB,MAAO,WACN,OAAO2C,KAAKM,iBAAiBN,KAAKC,GAAK,EAAID,KAAKG,GAAK,EAAI,KAExD,CACF7B,IAAK,mCACLjB,MAAO,SAA0CiD,GAChD,OAAOA,EAAiBN,KAAKC,GAAK,EAAID,KAAKG,GAAK,EAAI,KAOnD,CACF7B,IAAK,+BACLjB,MAAO,WACN,OAAO2C,KAAKe,iCAAiCf,KAAKM,mBAAqBN,KAAKe,iCAAiCf,KAAKW,wCAEjH,CACFrC,IAAK,2BACLjB,MAAO,WAGN,OAAO2C,KAAKM,iBAAiBN,KAAKC,GAAK,EAAID,KAAKG,GAAK,EAAI,IAAMH,KAAKgB,mBAEnE,CACF1C,IAAK,8BACLjB,MAAO,WACN,OAAO2C,KAAKM,iBAAiBN,KAAKC,GAAK,EAAID,KAAKG,GAAK,EAAI,KAExD,CACF7B,IAAK,6CACLjB,MAAO,WACN,QAAS2C,KAAKM,iBAAiBN,KAAKC,GAAK,EAAID,KAAKG,GAAK,EAAI,KAQ1D,CACF7B,IAAK,yCACLjB,MAAO,WACN,OAAO2C,KAAKiB,2CAA2CjB,KAAKM,mBAAqBN,KAAKiB,2CAA2CjB,KAAKW,wCAErI,CACFrC,IAAK,gBACLjB,MAAO,WACN,OAAO2C,KAAKM,iBAAiBN,KAAKC,GAAK,EAAID,KAAKG,GAAK,EAAI,MAExD,CACF7B,IAAK,QACLjB,MAAO,WACN,OAAO2C,KAAKM,iBAAiBN,KAAKC,GAAK,EAAID,KAAKG,GAAK,GAAK,MAEzD,CACF7B,IAAK,WACLjB,MAAO,WAGN,QAAI2C,KAAKkB,SAAmC,IAAxBlB,KAAKkB,QAAQjD,WAKxB+B,KAAKkB,UAEb,CACF5C,IAAK,OACLjB,MAAO,SAAc8D,GACpB,GAAInB,KAAKoB,YAAcC,EAAQrB,KAAKkB,QAASC,GAC5C,OAAO,IAAIG,EAAKD,EAAQrB,KAAKkB,QAASC,GAAQnB,QAG9C,CACF1B,IAAK,MACLjB,MAAO,WACN,OAAI2C,KAAKC,IAAMD,KAAKG,GAAWlB,EACxBe,KAAKM,iBAAiB,KAAOrB,IAEnC,CACFX,IAAK,sBACLjB,MAAO,WACN,OAAI2C,KAAKC,GAAWD,KAAKnB,SAAS0C,gCAC3BvB,KAAKnB,SAAS2C,wBAcpB,CACFlD,IAAK,oCACLjB,MAAO,SAA2CoE,GACjD,IAAI7C,EAAUoB,KAAKO,sBAAsBkB,GAAsB,GAK3DzB,KAAKjB,WAAWH,IACnBoB,KAAKpB,QAAQA,KAGb,CACFN,IAAK,kBACLjB,MAAO,WACN,OAAO2C,KAAKK,aAIPvB,EAjNO,GAoNf1B,EAAQuC,QAAUb,EAElB,IAAIgC,EAAS,WACZ,SAASA,EAAOY,EAAQ7C,GACvBe,EAAgBI,KAAMc,GAEtBd,KAAK2B,QAAUD,EACf1B,KAAKnB,SAAWA,EAyDjB,OAtDAjB,EAAakD,EAAQ,CAAC,CACrBxC,IAAK,UACLjB,MAAO,WACN,OAAO2C,KAAK2B,QAAQ,KAEnB,CACFrD,IAAK,SACLjB,MAAO,WACN,OAAO2C,KAAK2B,QAAQ,KAEnB,CACFrD,IAAK,wBACLjB,MAAO,WACN,OAAO2C,KAAK2B,QAAQ,IAAM,KAEzB,CACFrD,IAAK,+BACLjB,MAAO,WACN,OAAO2C,KAAK2B,QAAQ,IAAM3B,KAAKnB,SAAS+C,iCAEvC,CACFtD,IAAK,yCACLjB,MAAO,WACN,QAAS2C,KAAK2B,QAAQ,IAAM3B,KAAKnB,SAASgD,2CAEzC,CACFvD,IAAK,0CACLjB,MAAO,WAMN,OAAO2C,KAAK8B,uBAAyB9B,KAAK6B,2CAKzC,CACFvD,IAAK,qBACLjB,MAAO,WACN,OAAO2C,KAAK4B,gCAE4B,OAAxC5B,KAAK4B,gCAEL,KAAKG,KAAK/B,KAAK4B,+BAA+BI,QAAQ,KAAM,OAE3D,CACF1D,IAAK,sBACLjB,MAAO,WACN,OAAO2C,KAAK2B,QAAQ,IAAM3B,KAAK0B,aAI1BZ,EA9DK,GAiETQ,EAAO,WACV,SAASA,EAAKW,EAAMpD,GACnBe,EAAgBI,KAAMsB,GAEtBtB,KAAKiC,KAAOA,EACZjC,KAAKnB,SAAWA,EAiBjB,OAdAjB,EAAa0D,EAAM,CAAC,CACnBhD,IAAK,UACLjB,MAAO,WACN,OAAI2C,KAAKnB,SAASoB,GAAWD,KAAKiC,KAC3BjC,KAAKiC,KAAK,KAEhB,CACF3D,IAAK,kBACLjB,MAAO,WACN,IAAI2C,KAAKnB,SAASoB,GAClB,OAAOD,KAAKiC,KAAK,IAAMjC,KAAKnB,SAASqD,sBAIhCZ,EAtBG,GAyBX,SAASD,EAAQH,EAAOe,GACvB,OAAQA,GACP,IAAK,aACJ,OAAOf,EAAM,GACd,IAAK,SACJ,OAAOA,EAAM,GACd,IAAK,YACJ,OAAOA,EAAM,GACd,IAAK,eACJ,OAAOA,EAAM,GACd,IAAK,kBACJ,OAAOA,EAAM,GACd,IAAK,YACJ,OAAOA,EAAM,GACd,IAAK,MACJ,OAAOA,EAAM,GACd,IAAK,QACJ,OAAOA,EAAM,GACd,IAAK,OACJ,OAAOA,EAAM,GACd,IAAK,cACJ,OAAOA,EAAM,IAIhB,SAASxC,EAAiBG,GACzB,IAAKA,EACJ,MAAM,IAAIO,MAAM,6EAKjB,IAAK+C,EAAUtD,KAAcsD,EAAUtD,EAASU,aAAe4C,EAAUtD,EAAS2C,yBAA2BW,EAAUtD,EAAS0C,iCAC/H,MAAM,IAAInC,MAAM,sLAAyL+C,EAAUtD,GAAY,yBAA2B3B,OAAOkF,KAAKvD,GAAUwD,KAAK,MAAQ,KAAO,KAAOC,EAAQzD,GAAY,KAAOA,GAAY,KAOpV,IAAIsD,EAAY,SAAmBtB,GAClC,MAAiE,iBAA5C,IAANA,EAAoB,YAAcvD,EAAQuD,KAMtDyB,EAAU,SAAiBzB,GAC9B,YAAoB,IAANA,EAAoB,YAAcvD,EAAQuD,K,iCC9XzD3D,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAGgBD,EAAQmF,mBAAqB,EAI7BnF,EAAQoF,mBAAqB,GAGxBpF,EAAQqF,wBAA0B,EAI7CrF,EAAQsF,aAAe,eAX1C,IAiBIC,EAAavF,EAAQuF,WAAa,SASdvF,EAAQwF,kBAAoB,cAA+BD,EARpE,mBAUEvF,EAAQyF,WAAa,M,iCChCtC3F,OAAOC,eAAeC,EAAS,aAAc,CAC5CC,OAAO,IAERD,EAAQuC,QAyFR,SAAemD,GACd,IAAIC,EAAUC,UAAU/E,OAAS,QAAsBqB,IAAjB0D,UAAU,GAAmBA,UAAU,GAAK,GAC9EnE,EAAWmE,UAAU,GAKzB,GAHAnE,EAAW,IAAIoE,EAAWtD,QAAQd,GAG9BkE,EAAQG,iBAAmBrE,EAASE,WAAWgE,EAAQG,gBAAiB,CAC3E,GAAIH,EAAQ5C,GACX,MAAM,IAAIgD,EAAaxD,QAAQ,mBAEhC,MAAM,IAAIP,MAAM,oBAAsB2D,EAAQG,gBAK/C,IAAIE,EAqSL,SAAqBN,EAAM3C,GAE1B,GAAI2C,GAAiC,IAAzBA,EAAKO,QAAQ,QACxB,OAAO,EAAIC,EAAKC,cAAcT,GAG/B,IAAIU,EAASC,EAA+BX,EAAM3C,GAGlD,IAAKqD,KAAW,EAAIE,EAAsB/D,SAAS6D,GAClD,MAAO,GAKR,IAAIG,GAA0B,EAAIC,EAAWC,kBAAkBL,GAC/D,GAAIG,EAAwB3E,IAC3B,OAAO2E,EAGR,MAAO,CAAEH,OAAQA,GAzTEM,CAAYhB,EAAMC,EAAQ5C,IACzC4D,EAAyBX,EAAaI,OACtCxE,EAAMoE,EAAapE,IAKvB,IAAK+E,EAAwB,CAC5B,GAAIhB,EAAQ5C,GACX,MAAM,IAAIgD,EAAaxD,QAAQ,gBAEhC,MAAO,GAGR,IAAIqE,EAkUL,SAA4BD,EAAwBE,EAAiBpF,GACpE,IAAIqF,EAAwBC,EAA0BJ,EAAwBE,EAAiBpF,EAASA,UACpGM,EAAqB+E,EAAsB/E,mBAC3CqE,EAASU,EAAsBV,OAEnC,IAAKA,EACJ,MAAO,CAAErE,mBAAoBA,GAG9B,IAAIP,OAAU,EAEd,GAAIO,EACHN,EAASuF,kCAAkCjF,OACrC,KAAI8E,EAIJ,MAAO,GAHbpF,EAASD,QAAQqF,GACjBrF,EAAUqF,EACV9E,GAAqB,EAAIkF,EAAwB1E,SAASsE,EAAiBpF,EAASA,UAGrF,IAAIyF,EA8BL,SAA+Bd,EAAQ3E,GACtC,IAAI0F,GAAkB,EAAIC,EAA6B7E,SAAS6D,GAC5DiB,OAAe,EAYfC,EAAwBC,EAAuCJ,EAAiB1F,GAChF+F,EAA4BF,EAAsBlB,OAClDqB,EAAcH,EAAsBG,YAKxC,GAAIhG,EAASqD,kBAKZ,QAAQ,EAAI4C,EAAgBC,0BAA0BH,OAA2BtF,EAAWT,IAC3F,IAAK,YAEL,IAAK,iBACJ,MACD,QACC0F,EAAkBK,EAClBH,EAAeI,OASb,EAAIG,EAAMC,iBAAiBV,EAAiB1F,EAASqG,4BAA6B,EAAIF,EAAMC,iBAAiBL,EAA2B/F,EAASqG,2BAGpJX,EAAkBK,EAClBH,EAAeI,GAIjB,MAAO,CACNN,gBAAiBA,EACjBE,aAAcA,GAlFaU,CAAsB3B,EAAQ3E,GACtD0F,EAAkBD,EAAsBC,gBACxCE,EAAeH,EAAsBG,aAcrCW,EAAeC,EAAkBlG,EAAoBoF,EAAiB1F,GACtEuG,IACHxG,EAAUwG,EACVvG,EAASD,QAAQA,IAGlB,MAAO,CACNA,QAASA,EACTO,mBAAoBA,EACpBoF,gBAAiBA,EACjBM,YAAaJ,GA/WYa,CAAmBvB,EAAwBhB,EAAQG,eAAgBrE,GACzFD,EAAUoF,EAAoBpF,QAC9B2G,EAAiBvB,EAAoBO,gBACrCpF,EAAqB6E,EAAoB7E,mBACzC0F,EAAcb,EAAoBa,YAEtC,IAAKhG,EAAS2G,kBAAmB,CAChC,GAAIzC,EAAQ5C,GACX,MAAM,IAAIgD,EAAaxD,QAAQ,mBAEhC,MAAO,GAIR,GAAI4F,EAAetH,OAASwH,EAAWlD,mBAAoB,CAG1D,GAAIQ,EAAQ5C,GACX,MAAM,IAAIgD,EAAaxD,QAAQ,aAGhC,MAAO,GAYR,GAAI4F,EAAetH,OAASwH,EAAWjD,mBAAoB,CAC1D,GAAIO,EAAQ5C,GACX,MAAM,IAAIgD,EAAaxD,QAAQ,YAGhC,MAAO,GAGR,GAAIoD,EAAQ5C,GAAI,CACf,IAAIuF,EAAc,IAAIC,EAAchG,QAAQR,EAAoBoG,EAAgB1G,EAASA,UAYzF,OAVID,IACH8G,EAAY9G,QAAUA,GAEnBiG,IACHa,EAAYb,YAAcA,GAEvB7F,IACH0G,EAAY1G,IAAMA,GAGZ0G,EAMR,IAAIE,KAAQhH,KAAW,EAAIoG,EAAMC,iBAAiBM,EAAgB1G,EAASqG,0BAE3E,IAAKnC,EAAQ8C,SACZ,OAAOD,EAkPT,SAAgBhH,EAAS2F,EAAiBvF,GACzC,IAAI8G,EAAS,CACZlH,QAASA,EACTmH,MAAOxB,GAGJvF,IACH8G,EAAO9G,IAAMA,GAGd,OAAO8G,EA5PSA,CAAOlH,EAAS2G,EAAgBvG,GAAO,GAGvD,MAAO,CACNJ,QAASA,EACTO,mBAAoBA,EACpB0F,YAAaA,EACbe,MAAOA,EACPI,WAAUJ,IAAoC,IAArB7C,EAAQ8C,UAAqBhH,EAASqD,oBAAqB,EAAI+D,EAAmBC,oBAAoBX,OAAuCjG,IAAvBH,EAAkCN,GACjLkH,MAAOR,EACPvG,IAAKA,IA/LP5B,EAAQqG,+BAAiCA,EACzCrG,EAAQuH,uCAAyCA,EACjDvH,EAAQiI,kBAAoBA,EAC5BjI,EAAQ+G,0BAA4BA,EAEpC,IAAIsB,EAAa,EAAQ,KAErBT,EAAQ,EAAQ,KAIhB7B,EAAegD,EAFD,EAAQ,MAMtBlD,EAAakD,EAFD,EAAQ,MAMpBzC,EAAwByC,EAFD,EAAQ,MAI/BvC,EAAa,EAAQ,KAIrBY,EAA+B2B,EAFD,EAAQ,MAMtC9B,EAA0B8B,EAFD,EAAQ,MAIjCrB,EAAkB,EAAQ,KAE1BsB,EAAmBD,EAAuBrB,GAE1CmB,EAAqB,EAAQ,KAE7BI,EAAO,EAAQ,KAEf/C,EAAO,EAAQ,KAIfqC,EAAgBQ,EAFD,EAAQ,MAI3B,SAASA,EAAuB1I,GAAO,OAAOA,GAAOA,EAAIiC,WAAajC,EAAM,CAAEkC,QAASlC,GAIvF,IAAI6I,EAA0B,IAQ1BC,EAA6B,IAAIC,OAAO,IAAMf,EAAW5C,WAAa4C,EAAW/C,aAAe,KAGhG+D,EAAiC,IAAID,OAAO,KAAOf,EAAW/C,aAAe,OA4IjF,SAASe,EAA+BX,EAAM3C,GAC7C,GAAK2C,EAIL,GAAIA,EAAK7E,OAASqI,GACjB,GAAInG,EACH,MAAM,IAAIgD,EAAaxD,QAAQ,gBAFjC,CASA,IAAI+G,EAAY5D,EAAK6D,OAAOJ,GAE5B,KAAIG,EAAY,GAIhB,OAAO5D,EAEN8D,MAAMF,GAEN1E,QAAQyE,EAAgC,KAM1C,SAAS9B,EAAuCnB,EAAQ3E,GACvD,IAAK2E,IAAW3E,EAASgI,2BACxB,MAAO,CAAErD,OAAQA,GAiBlB,IAAIsD,EAA0B,IAAIN,OAAO,OAAS3H,EAASgI,2BAA6B,KACpFE,EAA0BD,EAAwBE,KAAKxD,GAgB3D,IAAKuD,EACJ,MAAO,CAAEvD,OAAQA,GAGlB,IAAIyD,OAA8B,EAmC9BC,EAAwBH,EAAwB9I,OAAS,EAC7D,GAAIY,EAASsI,+BAAiCJ,EAAwBG,GACrED,EAA8BzD,EAAOxB,QAAQ8E,EAAyBjI,EAASsI,mCAG3E,CAGH,IAAIC,EAAkBL,EAAwB,GAC9CE,EAA8BzD,EAAOoD,MAAMQ,EAAgBnJ,QAG7D,IAAI4G,OAAc,EAuBlB,OAtBIqC,EAAwB,IAC3BrC,EAAckC,EAAwB,IAqBhC,CACNvD,OAAQyD,EACRpC,YAAaA,GAIf,SAASQ,EAAkB5D,EAAsB4F,EAAuBxI,GAEvE,IAAIyI,EAAqBzI,EAAS0B,sBAAsBkB,GAIxD,OAAkC,IAA9B6F,EAAmBrJ,OACfqJ,EAAmB,GAO5B,SAA4BA,EAAoBD,EAAuBxI,GACtEA,EAAW,IAAIoE,EAAWtD,QAAQd,GAE7B,IAAI0I,EAAYD,EAAoBE,EAAWC,MAAMC,QAAQH,GAAYI,EAAK,EAAnF,IAAsFJ,EAAYC,EAAWD,EAAYA,EAAUhK,OAAOC,cAAe,CACxJ,IAAIoK,EAEJ,GAAIJ,EAAU,CACb,GAAIG,GAAMJ,EAAUtJ,OAAQ,MAC5B2J,EAAOL,EAAUI,SACX,CAEN,IADAA,EAAKJ,EAAUM,QACRC,KAAM,MACbF,EAAOD,EAAGtK,MAGX,IAAIuB,EAAUgJ,EAKd,GAHA/I,EAASD,QAAQA,GAGbC,EAASkJ,iBACZ,GAAIV,GAAoF,IAA3DA,EAAsBV,OAAO9H,EAASkJ,iBAClE,OAAOnJ,OAKJ,IAAI,EAAIwH,EAAiBzG,SAAS,CAAEoG,MAAOsB,EAAuBzI,QAASA,QAAWU,EAAWT,EAASA,UAC7G,OAAOD,GAhCHoJ,CAAmBV,EAAoBD,EAAuBxI,EAASA,UA0M/E,SAASsF,EAA0BX,EAAQ5E,EAASC,GAGnD,KAFA2E,GAAS,EAAIgB,EAA6B7E,SAAS6D,IAGlD,MAAO,GAKR,GAAkB,MAAdA,EAAO,GAAY,CAGtB,IAAIyE,GAAmB,EAAI5B,EAAK6B,gBAAgB1E,EAAQ5E,EAASC,GAKjE,IAAIoJ,GAAoBA,IAAqBzE,EAG5C,MAAO,CAAEA,OAAQA,GAFjBA,EAAS,IAAMyE,EAOjB,GAAkB,MAAdzE,EAAO,GACV,MAAO,GAGR3E,EAAW,IAAIoE,EAAWtD,QAAQd,GAYlC,IADA,IAAIb,EAAI,EACDA,EAAI,GAAKyH,EAAWhD,yBAA2BzE,GAAKwF,EAAOvF,QAAQ,CACzE,IAAIkB,EAAqBqE,EAAOoD,MAAM,EAAG5I,GAEzC,GAAIa,EAAS0B,sBAAsBpB,GAClC,MAAO,CACNA,mBAAoBA,EACpBqE,OAAQA,EAAOoD,MAAM5I,IAIvBA,IAGD,MAAO,K,iCCxmBRd,OAAOC,eAAeC,EAAS,aAAc,CAC5CC,OAAO,IAERD,EAAQ+K,MAqBR,SAAeC,EAAOC,EAAOC,EAAQ3G,EAAS4G,GAE7CC,WAAW,WACV,OAAOC,EAAkBJ,EAAOC,EAAQ3G,OAASrC,EAAWiJ,IAC1D,IAxBJnL,EAAQsL,QA2BR,SAAiBN,EAAOC,EAAOC,EAAQ3G,EAAS4G,GAC/C,IAAII,GAAY,EAAIC,EAAKC,cAAcR,GAKnCM,GACHG,EAAgBT,EAAOM,GAGxBF,EAAkBJ,EAAOC,EAAQ3G,OAASrC,EAAWiJ,IApCtDnL,EAAQ2L,SAuCR,SAAkBX,EAAOC,EAAOC,EAAQ3G,EAAS4G,GAChDE,EAAkBJ,EAAOC,EAAQ3G,OAASrC,EAAWiJ,IAvCtDnL,EAAQ4L,UA6CR,SAAmBZ,EAAOC,EAAOC,EAAQ3G,EAAS4G,GACjD,IAAIU,GAAY,EAAIL,EAAKM,cAAcd,GAEvC,OAAQa,GACP,IAAK,SACL,IAAK,YAEJb,EAAMe,iBAEN,IAAIR,GAAY,EAAIC,EAAKC,cAAcR,GAKvC,OAAIM,GACHG,EAAgBT,EAAOM,GAChBF,EAAkBJ,EAAOC,EAAQ3G,OAASrC,EAAWiJ,IAItDE,EAAkBJ,EAAOC,EAAQ3G,EAASsH,EAAWV,KA/D/D,IAEIa,EAASjD,EAFD,EAAQ,MAMhBkD,EAAUlD,EAFA,EAAQ,MAMlBmD,EAAWnD,EAFA,EAAQ,MAInByC,EAAO,EAAQ,KAEnB,SAASzC,EAAuB1I,GAAO,OAAOA,GAAOA,EAAIiC,WAAajC,EAAM,CAAEkC,QAASlC,GA6DvF,SAASqL,EAAgBT,EAAOM,GAC/B,IAAI7F,EAAOuF,EAAMhL,MACjByF,EAAOA,EAAK8D,MAAM,EAAG+B,EAAUY,OAASzG,EAAK8D,MAAM+B,EAAUa,KAE7DnB,EAAMhL,MAAQyF,GACd,EAAI8F,EAAKa,kBAAkBpB,EAAOM,EAAUY,OAe7C,SAASd,EAAkBJ,EAAOC,EAAQ3G,EAASsH,EAAWV,GAG7D,IAAImB,GAAU,EAAIL,EAAQ1J,SAAS0I,EAAMhL,OAAO,EAAIuL,EAAKe,kBAAkBtB,GAAQC,GAC/EjL,EAAQqM,EAAQrM,MAChBuM,EAAQF,EAAQE,MAMpB,GAAIX,EAAW,CACd,IAAIY,GAAoB,EAAIT,EAAOzJ,SAAStC,EAAOuM,EAAOX,GAE1D5L,EAAQwM,EAAkBxM,MAC1BuM,EAAQC,EAAkBD,MAK3B,IAAIE,GAAY,EAAIR,EAAS3J,SAAStC,EAAOuM,EAAOjI,GAEhDmB,EAAOgH,EAAUhH,KACrB8G,EAAQE,EAAUF,MAMlBvB,EAAMhL,MAAQyF,GAEd,EAAI8F,EAAKa,kBAAkBpB,EAAOuB,GAMlCrB,EAAUlL,K,iCC5IXH,OAAOC,eAAeC,EAAS,aAAc,CAC5CC,OAAO,IAGR,IAAIC,EAA4B,mBAAXC,QAAoD,iBAApBA,OAAOC,SAAwB,SAAUC,GAAO,cAAcA,GAAS,SAAUA,GAAO,OAAOA,GAAyB,mBAAXF,QAAyBE,EAAIC,cAAgBH,QAAUE,IAAQF,OAAOI,UAAY,gBAAkBF,GAElQsM,EAAW7M,OAAO8M,QAAU,SAAUlM,GAAU,IAAK,IAAIE,EAAI,EAAGA,EAAIgF,UAAU/E,OAAQD,IAAK,CAAE,IAAIiM,EAASjH,UAAUhF,GAAI,IAAK,IAAIM,KAAO2L,EAAc/M,OAAOS,UAAUuM,eAAeC,KAAKF,EAAQ3L,KAAQR,EAAOQ,GAAO2L,EAAO3L,IAAY,OAAOR,GAEnPsM,EAAgb,SAAUC,EAAKrM,GAAK,GAAIyJ,MAAMC,QAAQ2C,GAAQ,OAAOA,EAAY,GAAI9M,OAAOC,YAAYN,OAAOmN,GAAQ,OAAxf,SAAuBA,EAAKrM,GAAK,IAAIsM,EAAO,GAAQC,GAAK,EAAUC,GAAK,EAAWC,OAAKnL,EAAW,IAAM,IAAK,IAAiCoL,EAA7B/C,EAAK0C,EAAI9M,OAAOC,cAAmB+M,GAAMG,EAAK/C,EAAGE,QAAQC,QAAoBwC,EAAKK,KAAKD,EAAGrN,QAAYW,GAAKsM,EAAKrM,SAAWD,GAA3DuM,GAAK,IAAoE,MAAOK,GAAOJ,GAAK,EAAMC,EAAKG,EAAO,QAAU,KAAWL,GAAM5C,EAAW,QAAGA,EAAW,SAAO,QAAU,GAAI6C,EAAI,MAAMC,GAAQ,OAAOH,EAA6HO,CAAcR,EAAKrM,GAAa,MAAM,IAAI8B,UAAU,yDAEtlB1C,EAAQuC,QASR,WACC,IAAImL,EAAsBC,EAAmB/H,WACzCF,EAAOgI,EAAoBhI,KAC3BC,EAAU+H,EAAoB/H,QAC9BlE,EAAWiM,EAAoBjM,SAEnC,OAAO,EAAImM,EAAoBrL,SAASmD,EAAMC,EAASlE,IAdxDzB,EAAQ2N,mBAAqBA,EAE7B,IAIgCtN,EAJ5BwN,EAAqB,EAAQ,KAE7BD,GAE4BvN,EAFiBwN,IAEIxN,EAAIiC,WAAajC,EAAM,CAAEkC,QAASlC,GAWvF,SAASsN,EAAmBG,GAC3B,IAAIC,EAAwB1D,MAAM9J,UAAUiJ,MAAMuD,KAAKe,GACnDE,EAAyBhB,EAAee,EAAuB,GAC/DE,EAAQD,EAAuB,GAC/BE,EAAQF,EAAuB,GAC/BG,EAAQH,EAAuB,GAC/BI,EAAQJ,EAAuB,GAE/BtI,OAAO,EACPC,OAAU,EACVlE,OAAW,EAIf,GAAqB,iBAAVwM,EAEJ,MAAM,IAAIvL,UAAU,wCAI3B,GALCgD,EAAOuI,EAKHC,GAA0B,iBAAVA,EAehB,KAAIG,EAASH,GAOV,MAAM,IAAIlM,MAAM,4BAA8BkM,GANhDC,GACHxI,EAAUuI,EACVzM,EAAW0M,GAEX1M,EAAWyM,OAnBTE,GACHzI,EAAUwI,EACV1M,EAAW2M,IAEXzI,OAAUzD,EACVT,EAAW0M,GAGRD,IACHvI,EAAUgH,EAAS,CAAE7G,eAAgBoI,GAASvI,IAchD,MAAO,CACND,KAAMA,EACNC,QAASA,EACTlE,SAAUA,GAMZ,IAAI4M,EAAW,SAAkB5K,GAChC,MAAiE,iBAA5C,IAANA,EAAoB,YAAcvD,EAAQuD,M,iCClF1D3D,OAAOC,eAAeC,EAAS,aAAc,CAC5CC,OAAO,IAERD,EAAQuC,QAeR,SAAuB0I,GACtB,IAAItF,EAAUC,UAAU/E,OAAS,QAAsBqB,IAAjB0D,UAAU,GAAmBA,UAAU,GAAK,GAC9EnE,EAAWmE,UAAU,GAIzB,IAAKqF,EAAMzJ,QACV,OAKD,KAFAC,EAAW,IAAIoE,EAAWtD,QAAQd,IAEpBE,WAAWsJ,EAAMzJ,SAC9B,MAAM,IAAIQ,MAAM,oBAAsBiJ,EAAMzJ,SAG7C,IAAI2G,EAAiBxC,EAAQ5C,GAAKkI,EAAM9C,eAAiB8C,EAAMtC,MAO/D,GANAlH,EAASD,QAAQyJ,EAAMzJ,WAMlB,EAAIoG,EAAMC,iBAAiBM,EAAgB1G,EAASqG,yBACxD,OAID,GAAIwG,EAAWnG,EAAgB,aAAc1G,GAK5C,OAAIA,EAASoD,KAAK,WAAmD,KAAtCpD,EAASoD,KAAK,UAAU0J,UAC/C,uBAMH9M,EAASoD,KAAK,UAOfyJ,EAAWnG,EAAgB,SAAU1G,GACjC,uBAGD,aAVC,uBAaJ,IAAI0I,EAAYqE,EAA4BpE,EAAWC,MAAMC,QAAQH,GAAYI,EAAK,EAA3F,IAA8FJ,EAAYC,EAAWD,EAAYA,EAAUhK,OAAOC,cAAe,CAChK,IAAIoK,EAEJ,GAAIJ,EAAU,CACb,GAAIG,GAAMJ,EAAUtJ,OAAQ,MAC5B2J,EAAOL,EAAUI,SACX,CAEN,IADAA,EAAKJ,EAAUM,QACRC,KAAM,MACbF,EAAOD,EAAGtK,MAGX,IAAI8D,EAAQyG,EAEZ,GAAI8D,EAAWnG,EAAgBpE,EAAOtC,GACrC,OAAOsC,IAnFV/D,EAAQsO,WAAaA,EACrBtO,EAAQ2H,yBA4GR,SAASA,EAAyBQ,EAAgBtD,EAAMpD,GACvD,IAAIgN,EAAYhN,EAASoD,KAAKA,GAS9B,IAAI6J,EAAmBD,GAAaA,EAAU3J,mBAAqBrD,EAASqD,kBAG5E,GAAa,yBAATD,EAAiC,CAGpC,IAAKpD,EAASoD,KAAK,cAGlB,OAAO8C,EAAyBQ,EAAgB,SAAU1G,GAG3D,IAAIkN,EAAclN,EAASoD,KAAK,UAE5B8J,IAMHD,GAAmB,EAAI9G,EAAMgH,aAAaF,EAAkBC,EAAY7J,yBAgBrE,GAAID,IAAS4J,EAChB,MAAO,iBAGT,IAAII,EAAgB1G,EAAetH,OAUnC,IAAIiO,EAAiBJ,EAAiB,GAEtC,GAAII,IAAmBD,EACtB,MAAO,cAGR,GAAIC,EAAiBD,EACpB,MAAO,YAGR,GAAIH,EAAiBA,EAAiB7N,OAAS,GAAKgO,EACnD,MAAO,WAIR,OAAOH,EAAiBzI,QAAQ4I,EAAe,IAAM,EAAI,cAAgB,kBArL1E,IAMgCxO,EAN5B0O,EAAY,EAAQ,KAEpBlJ,GAI4BxF,EAJQ0O,IAIa1O,EAAIiC,WAAajC,EAAM,CAAEkC,QAASlC,GAFnFuH,EAAQ,EAAQ,KAIpB,IAAI4G,EAA6B,CAAC,SAAU,eAAgB,YAAa,cAAe,OAAQ,kBAAmB,QAAS,MAAO,aA6EnI,SAASF,EAAWnG,EAAgBtD,EAAMpD,GAGzC,UAFAoD,EAAOpD,EAASoD,KAAKA,MAEPA,EAAK0J,eAUf1J,EAAKC,mBAAqBD,EAAKC,kBAAkBmB,QAAQkC,EAAetH,QAAU,KAI/E,EAAI+G,EAAMC,iBAAiBM,EAAgBtD,EAAK0J,c,iCC7GxDzO,OAAOC,eAAeC,EAAS,aAAc,CAC5CC,OAAO,IAERD,EAAQ6H,gBAIR,WACC,IAAInC,EAAOE,UAAU/E,OAAS,QAAsBqB,IAAjB0D,UAAU,GAAmBA,UAAU,GAAK,GAC3EoJ,EAAqBpJ,UAAU,GAEnC,OAAO,IAAIwD,OAAO,OAAS4F,EAAqB,MAAMrK,KAAKe,IAP5D1F,EAAQ4O,YAgBR,SAAqBK,EAAGC,GACvB,IAAIC,EAASF,EAAEzF,QAENW,EAAY+E,EAAG9E,EAAWC,MAAMC,QAAQH,GAAYI,EAAK,EAAlE,IAAqEJ,EAAYC,EAAWD,EAAYA,EAAUhK,OAAOC,cAAe,CACvI,IAAIoK,EAEJ,GAAIJ,EAAU,CACb,GAAIG,GAAMJ,EAAUtJ,OAAQ,MAC5B2J,EAAOL,EAAUI,SACX,CAEN,IADAA,EAAKJ,EAAUM,QACRC,KAAM,MACbF,EAAOD,EAAGtK,MAGX,IAAImP,EAAU5E,EAEVyE,EAAEhJ,QAAQmJ,GAAW,GACxBD,EAAO5B,KAAK6B,GAId,OAAOD,EAAOE,KAAK,SAAUJ,EAAGC,GAC/B,OAAOD,EAAIC,M,iCC3CbpP,OAAOC,eAAeC,EAAS,aAAc,CAC5CC,OAAO,IAERD,EAAQuC,QAoBR,SAAemD,EAAM4J,EAAgBC,GACpC,IAAItP,EAAQ,GAERuP,EAAgC,EAEhCC,EAAQ,EACZ,KAAOA,EAAQ/J,EAAK7E,QAAQ,CAC3B,IAAI6O,EAAYH,EAAgB7J,EAAK+J,GAAQxP,QAE3BiC,IAAdwN,IACHzP,GAASyP,OAEcxN,IAAnBoN,IACCA,IAAmBG,EACtBD,EAAgCvP,EAAMY,OAAS,EACrCyO,EAAiBG,IAC3BD,EAAgCvP,EAAMY,UAKzC4O,SAIsBvN,IAAnBoN,IAEHE,EAAgCvP,EAAMY,QAQvC,MALa,CACZZ,MAAOA,EACPuM,MAAOgD,K,kCCpDTxP,EAAU2P,EAAO3P,QAAU,IAEnB4P,WAAa,EAAQ,KAAsBrN,QACnDvC,EAAQ6P,iBAAmB,EAAQ,KAA4BtN,QAC/DvC,EAAQ8P,2BAA6B,EAAQ,KAAsCvN,QAInFvC,EAAQ+P,MAAqB,EAAQ,KAAiBxN,QACtDvC,EAAQgQ,YAAqB,EAAQ,KAAiBzN,QAGtDvC,EAAQsE,OAAqB,EAAQ,KAAkB/B,QACvDvC,EAAQiQ,aAAqB,EAAQ,KAAkB1N,QACvDvC,EAAQkQ,cAAqB,EAAQ,KAAyB3N,QAC9DvC,EAAQmQ,iBAAqB,EAAQ,KAA4B5N,QACjEvC,EAAQoQ,iBAAqB,EAAQ,KAA4B7N,QACjEvC,EAAQqQ,cAAqB,EAAQ,KAAoB9N,QACzDvC,EAAQsQ,uBAAyB,EAAQ,KAAkC/N,QAE3EvC,EAAQuQ,YAAqB,EAAQ,KAAuBhO,QAC5DvC,EAAQwQ,cAAqB,EAAQ,KAAyBjO,QAC9DvC,EAAQyQ,mBAAqB,EAAQ,KAA8BlO,QAGnEvC,EAAQ0Q,iBAAqB,EAAQ,KAA4BnO,QACjEvC,EAAQ2Q,mBAAqB,EAAQ,KAA4BA,mBACjE3Q,EAAQ4Q,kBAAqB,EAAQ,KAA6BA,kBAElE5Q,EAAQ6Q,UAAY,EAAQ,KAAqBtO,QAEjDvC,EAAQ8Q,4BAA8B,EAAQ,KAAuCvO,QACrFvC,EAAQ+Q,2BAA8B,EAAQ,KAAsCxO,QACpFvC,EAAQgR,0BAA8B,EAAQ,KAAsCA,0BACpFhR,EAAQiR,YAAgB,EAAQ,KAAuB1O,QAQvDvC,EAAQkR,OAAoB,EAAQ,KAAuBA,OAC3DlR,EAAQmR,kBAAoB,EAAQ,KAAqBA,kBAEzDnR,EAAQ8B,sBAAwB,EAAQ,KAAiCS,QAEzEvC,EAAQoR,aAAepR,EAAQ8B,sBAE/B9B,EAAQ0B,SAAW,EAAQ,KAAoBa,QAC/CvC,EAAQiC,mBAAqB,EAAQ,KAAoBA,mBACzDjC,EAAQuB,aAAe,EAAQ,KAAoBA,aAEnDvB,EAAQmG,aAAe,EAAQ,KAAmBA,aAClDnG,EAAQqR,cAAgB,EAAQ,KAAmBA,e,iCCzDnDvR,OAAOC,eAAeC,EAAS,aAAc,CAC5CC,OAAO,IAERD,EAAQuC,QAsDR,SAA6B6D,GAC5B,OAAOA,EAAOvF,QAAUwH,EAAWlD,oBAAsBmM,EAA2B3M,KAAKyB,IArD1F,IAAIiC,EAAa,EAAQ,KAErB7B,EAAa,EAAQ,KA0BrB+K,EAAkC,IAAMlJ,EAAW/C,aAAe,KAAO+C,EAAWlD,mBAAqB,IAKzGqM,EAAqB,IAAMnJ,EAAW5C,WAAa,aAAyB4C,EAAW7C,kBAAoB,MAAa6C,EAAW/C,aAAe,UAAsB+C,EAAW7C,kBAAoB6C,EAAW/C,aAAe,KAIjOgM,EAA6B,IAAIlI,OAErC,IAAMmI,EAAkC,MAElCC,EAEN,MAAQhL,EAAWiL,0BAA4B,MAAY,M,iCChD3D3R,OAAOC,eAAeC,EAAS,aAAc,CAC5CC,OAAO,IAERD,EAAQ0R,2BAA6B1R,EAAQyR,+BAA4BvP,EACzElC,EAAQyG,iBAoER,SAA0BL,GACzB,IAAI+F,EAAQ/F,EAAOmD,OAAOoI,GAC1B,GAAIxF,EAAQ,EACX,MAAO,GAKR,IAAIyF,EAA2BxL,EAAOoD,MAAM,EAAG2C,GAE3C0F,EAAUzL,EAAO0L,MAAMH,GACvB/Q,EAAI,EACR,KAAOA,EAAIiR,EAAQhR,QAAQ,CAC1B,GAAkB,MAAdgR,EAAQjR,IAAciR,EAAQjR,GAAGC,OAAS,EAC7C,MAAO,CACNuF,OAAQwL,EACRhQ,IAAKiQ,EAAQjR,IAGfA,MArFF,IAAIyH,EAAa,EAAQ,KAGrB0J,EAAsB,QAItBC,EAAwB,KAAO3J,EAAW/C,aAAe,UAiB7D,SAAS2M,EAAyBC,GAEjC,IAAIC,EAA8B,SAElC,OAAQD,GAGP,IAAK,UACJC,EAA8B,KAAOA,EAGvC,OAAOJ,EAAsBC,EAAwB,qDAEvBG,EAA8B,qCAAmEH,EAAwB,aAAoB3J,EAAW/C,aAAe,WAkBtM,IAAImM,EAA4BzR,EAAQyR,0BAA4BQ,EAAyB,WAMzFN,GAJ6B3R,EAAQ0R,2BAA6BO,EAAyB,YAI5E,IAAI7I,OAAO,MAAQqI,EAA4B,KAAM,O,iCCnExE3R,OAAOC,eAAeC,EAAS,aAAc,CAC5CC,OAAO,IAERD,EAAQuC,QAoBR,SAAoC6P,GACnC,IAAI1J,EAAS,GAQJyB,EAAYiI,EAAOC,MAAM,IAAKjI,EAAWC,MAAMC,QAAQH,GAAYI,EAAK,EAAjF,IAAoFJ,EAAYC,EAAWD,EAAYA,EAAUhK,OAAOC,cAAe,CACtJ,IAAIoK,EAEJ,GAAIJ,EAAU,CACb,GAAIG,GAAMJ,EAAUtJ,OAAQ,MAC5B2J,EAAOL,EAAUI,SACX,CAEN,IADAA,EAAKJ,EAAUM,QACRC,KAAM,MACbF,EAAOD,EAAGtK,MAKXyI,GAAUsI,EAFMxG,EAE+B9B,IAAW,GAG3D,OAAOA,GA7CR1I,EAAQgR,0BAA4BA,EAEpC,IAAIsB,EAAe,EAAQ,KAsD3B,SAAStB,EAA0BtB,EAAWzP,GAE7C,GAAkB,MAAdyP,EAAmB,CAGtB,GAAIzP,EACH,OAGD,MAAO,IAIR,OAAO,EAAIqS,EAAaC,YAAY7C,K,iCCzErC5P,OAAOC,eAAeC,EAAS,aAAc,CAC5CC,OAAO,IAERD,EAAQuS,WAAaA,EACrBvS,EAAQuC,QAmER,SAAqB6P,GACpB,IAAI1J,EAAS,GAQJyB,EAAYiI,EAAOC,MAAM,IAAKjI,EAAWC,MAAMC,QAAQH,GAAYI,EAAK,EAAjF,IAAoFJ,EAAYC,EAAWD,EAAYA,EAAUhK,OAAOC,cAAe,CACtJ,IAAIoK,EAEJ,GAAIJ,EAAU,CACb,GAAIG,GAAMJ,EAAUtJ,OAAQ,MAC5B2J,EAAOL,EAAUI,SACX,CAEN,IADAA,EAAKJ,EAAUM,QACRC,KAAM,MACbF,EAAOD,EAAGtK,MAGX,IAEIuS,EAAQD,EAFI/H,GAGZgI,IACH9J,GAAU8J,GAIZ,OAAO9J,GAzFR,IAAIwI,EAASlR,EAAQkR,OAAS,CAC7B,EAAK,IACL,EAAK,IACL,EAAK,IACL,EAAK,IACL,EAAK,IACL,EAAK,IACL,EAAK,IACL,EAAK,IACL,EAAK,IACL,EAAK,IACL,IAAU,IACV,IAAU,IACV,IAAU,IACV,IAAU,IACV,IAAU,IACV,IAAU,IACV,IAAU,IACV,IAAU,IACV,IAAU,IACV,IAAU,IACV,IAAU,IACV,IAAU,IACV,IAAU,IACV,IAAU,IACV,IAAU,IACV,IAAU,IACV,IAAU,IACV,IAAU,IACV,IAAU,IACV,IAAU,IACV,IAAU,IACV,IAAU,IACV,IAAU,IACV,IAAU,IACV,IAAU,IACV,IAAU,IACV,IAAU,IACV,IAAU,IACV,IAAU,IACV,IAAU,KAGX,SAASqB,EAAW7C,GACnB,OAAOwB,EAAOxB,K,iCCvDf5P,OAAOC,eAAeC,EAAS,aAAc,CAC5CC,OAAO,IAGR,IAAI+M,EAAgb,SAAUC,EAAKrM,GAAK,GAAIyJ,MAAMC,QAAQ2C,GAAQ,OAAOA,EAAY,GAAI9M,OAAOC,YAAYN,OAAOmN,GAAQ,OAAxf,SAAuBA,EAAKrM,GAAK,IAAIsM,EAAO,GAAQC,GAAK,EAAUC,GAAK,EAAWC,OAAKnL,EAAW,IAAM,IAAK,IAAiCoL,EAA7B/C,EAAK0C,EAAI9M,OAAOC,cAAmB+M,GAAMG,EAAK/C,EAAGE,QAAQC,QAAoBwC,EAAKK,KAAKD,EAAGrN,QAAYW,GAAKsM,EAAKrM,SAAWD,GAA3DuM,GAAK,IAAoE,MAAOK,GAAOJ,GAAK,EAAMC,EAAKG,EAAO,QAAU,KAAWL,GAAM5C,EAAW,QAAGA,EAAW,SAAO,QAAU,GAAI6C,EAAI,MAAMC,GAAQ,OAAOH,EAA6HO,CAAcR,EAAKrM,GAAa,MAAM,IAAI8B,UAAU,yDAEtlB1C,EAAQmG,aAeR,SAAsBT,GACrB,IAAIU,OAAS,EACTxE,OAAM,EAKDuI,GAFTzE,EAAOA,EAAKd,QAAQ,QAAS,SAEHyN,MAAM,KAAMjI,EAAWC,MAAMC,QAAQH,GAAYI,EAAK,EAAhF,IAAmFJ,EAAYC,EAAWD,EAAYA,EAAUhK,OAAOC,cAAe,CACrJ,IAAIoK,EAEJ,GAAIJ,EAAU,CACb,GAAIG,GAAMJ,EAAUtJ,OAAQ,MAC5B2J,EAAOL,EAAUI,SACX,CAEN,IADAA,EAAKJ,EAAUM,QACRC,KAAM,MACbF,EAAOD,EAAGtK,MAGX,IAEIwS,EAFOjI,EAEY6H,MAAM,KACzBK,EAAe1F,EAAeyF,EAAa,GAC3CE,EAAOD,EAAa,GACpBzS,EAAQyS,EAAa,GAEzB,OAAQC,GACP,IAAK,MACJvM,EAASnG,EACT,MACD,IAAK,MACJ2B,EAAM3B,EACN,MACD,IAAK,gBAGa,MAAbA,EAAM,KACTmG,EAASnG,EAAQmG,IAOrB,KAAK,EAAIE,EAAsB/D,SAAS6D,GACvC,MAAO,GAGR,IAAIsC,EAAS,CAAEtC,OAAQA,GACnBxE,IACH8G,EAAO9G,IAAMA,GAEd,OAAO8G,GAlER1I,EAAQqR,cAyER,SAAuBuB,GACtB,IAAIxM,EAASwM,EAAMxM,OACfxE,EAAMgR,EAAMhR,IAEhB,IAAKwE,EACJ,MAAO,GAGR,GAAkB,MAAdA,EAAO,GACV,MAAM,IAAIpE,MAAM,6DAGjB,MAAO,OAASoE,GAAUxE,EAAM,QAAUA,EAAM,KAnFjD,IAIgCvB,EAJ5BwS,EAAuB,EAAQ,KAE/BvM,GAE4BjG,EAFmBwS,IAEExS,EAAIiC,WAAajC,EAAM,CAAEkC,QAASlC,I,iCCbvFP,OAAOC,eAAeC,EAAS,aAAc,CAC5CC,OAAO,IAGR,IAAI0M,EAAW7M,OAAO8M,QAAU,SAAUlM,GAAU,IAAK,IAAIE,EAAI,EAAGA,EAAIgF,UAAU/E,OAAQD,IAAK,CAAE,IAAIiM,EAASjH,UAAUhF,GAAI,IAAK,IAAIM,KAAO2L,EAAc/M,OAAOS,UAAUuM,eAAeC,KAAKF,EAAQ3L,KAAQR,EAAOQ,GAAO2L,EAAO3L,IAAY,OAAOR,GAEnPF,EAAe,WAAc,SAASC,EAAiBC,EAAQC,GAAS,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAME,OAAQD,IAAK,CAAE,IAAIE,EAAaH,EAAMC,GAAIE,EAAWC,WAAaD,EAAWC,aAAc,EAAOD,EAAWE,cAAe,EAAU,UAAWF,IAAYA,EAAWG,UAAW,GAAMnB,OAAOC,eAAeW,EAAQI,EAAWI,IAAKJ,IAAiB,OAAO,SAAUK,EAAaC,EAAYC,GAAiJ,OAA9HD,GAAYX,EAAiBU,EAAYZ,UAAWa,GAAiBC,GAAaZ,EAAiBU,EAAaE,GAAqBF,GAA7gB,GAIf2R,EAAa/J,EAFA,EAAQ,MAMrBgK,EAAsBhK,EAFD,EAAQ,MAM7BiK,EAAcjK,EAFD,EAAQ,MAUrBC,GAJ4BD,EAFD,EAAQ,MAMhBA,EAFD,EAAQ,OAM1BkK,EAAYlK,EAFD,EAAQ,MAIvB,SAASA,EAAuB1I,GAAO,OAAOA,GAAOA,EAAIiC,WAAajC,EAAM,CAAEkC,QAASlC,GAIvF,IAAI6S,EAAc,WACjB,SAASA,EAAYnR,EAAoBoG,EAAgB1G,GAGxD,GANF,SAAyBgB,EAAUtB,GAAe,KAAMsB,aAAoBtB,GAAgB,MAAM,IAAIuB,UAAU,qCAI9GF,CAAgBI,KAAMsQ,IAEjBnR,EACJ,MAAM,IAAIW,UAAU,mCAErB,IAAKyF,EACJ,MAAM,IAAIzF,UAAU,+BAIrB,GAAIyQ,EAAcpR,GAAqB,CACtCa,KAAKpB,QAAUO,EACf,IAAIgN,EAAY,IAAI+D,EAAWvQ,QAAQd,GACvCsN,EAAUvN,QAAQO,GAClBA,EAAqBgN,EAAUhN,qBAEhCa,KAAKb,mBAAqBA,EAC1Ba,KAAKuF,eAAiBA,EACtBvF,KAAKwD,OAAS,IAAMxD,KAAKb,mBAAqBa,KAAKuF,eACnDvF,KAAKnB,SAAWA,EA+CjB,OA5CAjB,EAAa0S,EAAa,CAAC,CAC1BhS,IAAK,aACLjB,MAAO,WACN,OAAO,EAAI8S,EAAoBxQ,SAASK,KAAM,CAAEG,IAAI,GAAQH,KAAKnB,YAEhE,CACFP,IAAK,UACLjB,MAAO,WACN,OAAO,EAAI+S,EAAYzQ,SAASK,KAAM,CAAEG,IAAI,GAAQH,KAAKnB,YASxD,CACFP,IAAK,UACLjB,MAAO,WACN,OAAO,EAAI+I,EAAiBzG,SAASK,KAAM,CAAEG,IAAI,GAAQH,KAAKnB,YAE7D,CACFP,IAAK,SACLjB,MAAO,SAAgBsE,EAASoB,GAC/B,OAAO,EAAIsN,EAAU1Q,SAASK,KAAM2B,EAASoB,EAAUgH,EAAS,GAAIhH,EAAS,CAAE5C,IAAI,IAAU,CAAEA,IAAI,GAAQH,KAAKnB,YAE/G,CACFP,IAAK,iBACLjB,MAAO,SAAwB0F,GAC9B,OAAO/C,KAAK0B,OAAO,WAAYqB,KAE9B,CACFzE,IAAK,sBACLjB,MAAO,SAA6B0F,GACnC,OAAO/C,KAAK0B,OAAO,gBAAiBqB,KAEnC,CACFzE,IAAK,SACLjB,MAAO,SAAgB0F,GACtB,OAAO/C,KAAK0B,OAAO,UAAWqB,OAIzBuN,EApEU,GAuElBlT,EAAQuC,QAAU2Q,EAGlB,IAAIC,EAAgB,SAAuBlT,GAC1C,MAAQ,aAAa0E,KAAK1E,K,iCC/G3BH,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQuC,QA2CR,SAAuB0I,GACrB,IAAItF,EAAUC,UAAU/E,OAAS,QAAsBqB,IAAjB0D,UAAU,GAAmBA,UAAU,GAAK,GAC9EnE,EAAWmE,UAAU,GAMzB,GAJAnE,EAAW,IAAIoE,EAAWtD,QAAQd,IAI7BwJ,EAAMzJ,QACT,OAAO,EAGT,IAAKC,EAASE,WAAWsJ,EAAMzJ,SAC7B,MAAM,IAAIQ,MAAM,oBAAsBiJ,EAAMzJ,SAO9C,GAJAC,EAASD,QAAQyJ,EAAMzJ,SAInBC,EAASuC,WACX,YAA4E9B,KAArE,EAAI8G,EAAiBzG,SAAS0I,EAAOtF,EAASlE,EAASA,UAKhE,IAAI0F,EAAkBxB,EAAQ5C,GAAKkI,EAAM9C,eAAiB8C,EAAMtC,MAChE,OAAO,EAAIf,EAAMC,iBAAiBV,EAAiB1F,EAASqG,0BApE9D,IAEIjC,EAAakD,EAFD,EAAQ,MAIpBnB,EAAQ,EAAQ,KAIhBoB,EAAmBD,EAFD,EAAQ,MAI9B,SAASA,EAAuB1I,GAAO,OAAOA,GAAOA,EAAIiC,WAAajC,EAAM,CAAEkC,QAASlC,K,iCCfvFP,OAAOC,eAAeC,EAAS,aAAc,CAC5CC,OAAO,IAERD,EAAQoT,MAKR,SAAeC,EAAOC,GACrB,GAAID,EAAQ,GAAKC,GAAS,GAAKA,EAAQD,EACtC,MAAM,IAAI3Q,UAEX,MAAO,IAAM2Q,EAAQ,IAAMC,EAAQ,KARpCtT,EAAQuT,oBAeR,SAA6BC,EAAQpB,GACpC,IAAI3C,EAAQ2C,EAAO7I,OAAOiK,GAE1B,GAAI/D,GAAS,EACZ,OAAO2C,EAAO5I,MAAM,EAAGiG,GAGxB,OAAO2C,GArBRpS,EAAQyT,WAwBR,SAAoBrB,EAAQsB,GAC3B,OAAqC,IAA9BtB,EAAOnM,QAAQyN,IAxBvB1T,EAAQ2T,SA2BR,SAAkBvB,EAAQsB,GACzB,OAAOtB,EAAOnM,QAAQyN,EAAWtB,EAAOvR,OAAS6S,EAAU7S,UAAYuR,EAAOvR,OAAS6S,EAAU7S,S,iCClClGf,OAAOC,eAAeC,EAAS,aAAc,CAC5CC,OAAO,IAERD,EAAQ4T,iBAER,SAA0BC,EAAQzB,GACjC,IAAI0B,EAAQ,EASH3J,EAAYiI,EAAOC,MAAM,IAAKjI,EAAWC,MAAMC,QAAQH,GAAYI,EAAK,EAAjF,IAAoFJ,EAAYC,EAAWD,EAAYA,EAAUhK,OAAOC,cAAe,CACtJ,IAAIoK,EAEJ,GAAIJ,EAAU,CACb,GAAIG,GAAMJ,EAAUtJ,OAAQ,MAC5B2J,EAAOL,EAAUI,SACX,CAEN,IADAA,EAAKJ,EAAUM,QACRC,KAAM,MACbF,EAAOD,EAAGtK,MAGKuK,IAEEqJ,GACjBC,IAIF,OAAOA,I,iCClCRhU,OAAOC,eAAeC,EAAS,aAAc,CAC5CC,OAAO,IAGRD,EAAQuC,QAAU,SAAUwR,GAC3B,IAAIC,EAAcpO,UAAU/E,OAAS,QAAsBqB,IAAjB0D,UAAU,GAAmBA,UAAU,GAAK,IAClFqO,EAAsBrO,UAAU,GAEpC,IAAKmO,EACJ,OAAO,SAAU9T,GAChB,MAAO,CAAEyF,KAAMzF,IAIjB,IAAIiU,GAAyB,EAAIC,EAASP,kBAAkBI,EAAaD,GAEzE,OAAO,SAAU9T,GAChB,IAAKA,EACJ,MAAO,CAAEyF,KAAM,GAAIqO,SAAUA,GAG9B,IAAIK,EAAwB,EACxBC,EAAqB,GAQhBlK,EAAY4J,EAAS1B,MAAM,IAAKjI,EAAWC,MAAMC,QAAQH,GAAYI,EAAK,EAAnF,IAAsFJ,EAAYC,EAAWD,EAAYA,EAAUhK,OAAOC,cAAe,CACxJ,IAAIoK,EAEJ,GAAIJ,EAAU,CACb,GAAIG,GAAMJ,EAAUtJ,OAAQ,MAC5B2J,EAAOL,EAAUI,SACX,CAEN,IADAA,EAAKJ,EAAUM,QACRC,KAAM,MACbF,EAAOD,EAAGtK,MAGX,IAAIyP,EAAYlF,EAEhB,GAAIkF,IAAcsE,GAYlB,GAPAK,GAAsBpU,EAAMmU,KAC5BA,IAM8BnU,EAAMY,QAI/BZ,EAAMY,OAASqT,EAClB,WAhBDG,GAAsB3E,EAyBxB,OAJIuE,IACHI,GAAqB,EAAIC,EAAc/R,SAAS8R,EAAoBN,IAG9D,CAAErO,KAAM2O,EAAoBN,SAAUA,KAI/C,IAMgC1T,EAN5B8T,EAAW,EAAQ,KAEnBI,EAAe,EAAQ,KAEvBD,GAE4BjU,EAFWkU,IAEUlU,EAAIiC,WAAajC,EAAM,CAAEkC,QAASlC,I,iCChFvFP,OAAOC,eAAeC,EAAS,aAAc,CAC5CC,OAAO,IAERD,EAAQuC,QAwCR,SAAgBtC,EAAOuM,EAAOgI,GACJ,iBAAdA,IACVA,GAAY,EAAIC,EAAoBlS,SAASiS,IAG9C,IAAIhK,EAAOgK,EAAUvU,IAAU,GAC3ByF,EAAO8E,EAAK9E,KACZqO,EAAWvJ,EAAKuJ,cAEP7R,IAATwD,IACHA,EAAOzF,GAGR,GAAI8T,EACH,QAAc7R,IAAVsK,EACHA,EAAQ9G,EAAK7E,WACP,CAMN,IALA,IAAI4O,EAAQ,EACRiF,GAAQ,EAERC,GAAuC,EAEpClF,EAAQ/J,EAAK7E,QAAU4O,EAAQsE,EAASlT,QAAQ,CAEtD,GAAI6E,EAAK+J,KAAWsE,EAAStE,GAAQ,CACpC,GAAc,IAAVjD,EAAa,CAChBkI,GAAQ,EACRlI,EAAQiD,EACR,MAGDkF,EAAsClF,EAEtCjD,IAGDiD,IAKIiF,IACJlI,EAAQmI,EAAsC,GAKjD,MAAO,CAAEjP,KAAMA,EAAM8G,MAAOA,IArF7B,IAIgCnM,EAJ5BuU,EAAqB,EAAQ,KAE7BH,GAE4BpU,EAFiBuU,IAEIvU,EAAIiC,WAAajC,EAAM,CAAEkC,QAASlC,I,iCCTvFP,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAMT,IAAI2P,EAAa,SAASA,EAAWiF,IAHrC,SAAyBpS,EAAUtB,GAAe,KAAMsB,aAAoBtB,GAAgB,MAAM,IAAIuB,UAAU,qCAI9GF,CAAgBI,KAAMgN,GAEtBhN,KAAK+P,KAAO/P,KAAKtC,YAAYqS,KAC7B/P,KAAKkS,QAAUD,EACfjS,KAAKmS,MAAQ,IAAI/S,MAAM6S,GAAME,OAG/B/U,EAAQuC,QAAUqN,GAGlBA,EAAWrP,UAAYT,OAAOkV,OAAOhT,MAAMzB,YACtBD,YAAcsP,G,iCCnBnC9P,OAAOC,eAAeC,EAAS,aAAc,CAC5CC,OAAO,IAERD,EAAQuC,QAWR,SAA0B0I,EAAOtF,EAASlE,QAEzBS,IAAZyD,IACHA,EAAU,IAKX,GAFAlE,EAAW,IAAIoE,EAAWtD,QAAQd,GAE9BkE,EAAQ5C,GAAI,CACf,IAAKkI,EAAMlJ,mBACV,MAAM,IAAIC,MAAM,sCAEjBP,EAASuF,kCAAkCiE,EAAMlJ,wBAC3C,CACN,IAAKkJ,EAAMtC,MACV,OAAO,EAER,GAAIsC,EAAMzJ,QAAS,CAClB,IAAKC,EAASE,WAAWsJ,EAAMzJ,SAC9B,MAAM,IAAIQ,MAAM,oBAAsBiJ,EAAMzJ,SAE7CC,EAASD,QAAQyJ,EAAMzJ,aACjB,CACN,IAAKyJ,EAAMlJ,mBACV,MAAM,IAAIC,MAAM,sCAEjBP,EAASuF,kCAAkCiE,EAAMlJ,qBAInD,IAAKN,EAASqD,kBACb,MAAM,IAAI9C,MAAM,oBAGjB,OAAO8G,EAAmBmC,EAAMtC,OAASsC,EAAM9C,oBAAgBjG,EAAWT,IA5C3EzB,EAAQ8I,mBAAqBA,EAE7B,IAMgCzI,EAN5B0O,EAAY,EAAQ,KAEpBlJ,GAI4BxF,EAJQ0O,IAIa1O,EAAIiC,WAAajC,EAAM,CAAEkC,QAASlC,GAFnFqH,EAAkB,EAAQ,KAyC9B,SAASoB,EAAmB3B,EAAiB8N,EAAkBxT,GAC9D,QAAQ,EAAIiG,EAAgBC,0BAA0BR,OAAiBjF,EAAWT,IACjF,IAAK,cACJ,OAAO,EAGR,QACC,OAAO,K,iCC1DV3B,OAAOC,eAAeC,EAAS,aAAc,CAC5CC,OAAO,IAERD,EAAQkV,yBAAsBhT,EAE9B,IAAIyK,EAAW7M,OAAO8M,QAAU,SAAUlM,GAAU,IAAK,IAAIE,EAAI,EAAGA,EAAIgF,UAAU/E,OAAQD,IAAK,CAAE,IAAIiM,EAASjH,UAAUhF,GAAI,IAAK,IAAIM,KAAO2L,EAAc/M,OAAOS,UAAUuM,eAAeC,KAAKF,EAAQ3L,KAAQR,EAAOQ,GAAO2L,EAAO3L,IAAY,OAAOR,GAKvPV,EAAQuC,QAsCN,SAAsB0I,EAAO3G,EAAQqB,EAASlE,GAG9CkE,EADGA,EACOgH,EAAS,GAAIwI,EAAgBxP,GAE7BwP,EAKX,GAFA1T,EAAW,IAAIoE,EAAWtD,QAAQd,GAE9BwJ,EAAMzJ,QAAS,CAElB,IAAKC,EAASE,WAAWsJ,EAAMzJ,SAC9B,MAAM,IAAIQ,MAAM,oBAAsBiJ,EAAMzJ,SAE7CC,EAASD,QAAQyJ,EAAMzJ,aACjB,KAAIyJ,EAAMlJ,mBAEV,OAAOkJ,EAAMtC,OAAS,GAD5BlH,EAASuF,kCAAkCiE,EAAMlJ,oBAGlD,IAAIA,EAAqBN,EAASM,qBAE9BoG,EAAiBxC,EAAQ5C,GAAKkI,EAAM9C,eAAiB8C,EAAMtC,MAI3DvC,OAAS,EAEb,OAAQ9B,GACP,IAAK,WAGJ,OAAK6D,EAIEiN,EADPhP,EAASiP,EAAuBlN,EAAgB,WAAY1G,GAChCwJ,EAAMrJ,IAAKH,EAAUkE,EAAQ2P,iBAHjD,GAKT,IAAK,gBAGJ,OAAKnN,GAGL/B,EAASiP,EAAuBlN,EAAgB,gBAAiB1G,GAE1D2T,EADPhP,EAAS,IAAMrE,EAAqB,IAAMqE,EACd6E,EAAMrJ,IAAKH,EAAUkE,EAAQ2P,kBAJjD,IAAMvT,EAMf,IAAK,QAEJ,MAAO,IAAMA,EAAqBoG,EAEnC,IAAK,UACJ,OAAO,EAAIjC,EAAKmL,eAAe,CAC9BjL,OAAQ,IAAMrE,EAAqBoG,EACnCvG,IAAKqJ,EAAMrJ,MAGb,IAAK,MACJ,IAAK+D,EAAQ4P,YACZ,OAGD,IAAIC,GAAY,EAAIvM,EAAKwM,cAAc9P,EAAQ4P,YAAa9T,EAASA,UACrE,IAAK+T,EACJ,OAED,GAAI7P,EAAQ+P,cAAe,CAC1B,IAAIC,EAAqC5T,GAAsB6T,EAAsCzN,EAAgB1G,EAASM,qBAAsB4D,EAAQ4P,YAAa9T,GAMzK,OAAO2T,EAJNhP,EADGuP,GAGMH,EAAY,IAAMzT,EAAqB,IAAMsT,EAAuBlN,EAAgB,gBAAiB1G,GAEnFwJ,EAAMrJ,IAAKH,EAAUkE,EAAQ2P,iBAE1D,MAAO,GAAKE,EAAYzT,EAAqBoG,EAE9C,QACC,MAAM,IAAInG,MAAM,0DAA4DsC,EAAS,OApHxFtE,EAAQ6V,oCAAsCA,EAC9C7V,EAAQ8V,yBAA2BA,EACnC9V,EAAQ+V,+BAAiCA,EACzC/V,EAAQ4V,sCAAwCA,EAEhD,IAYgCvV,EAZ5BgI,EAAa,EAAQ,KAErBT,EAAQ,EAAQ,KAEhBmH,EAAY,EAAQ,KAEpBlJ,GAM4BxF,EANQ0O,IAMa1O,EAAIiC,WAAajC,EAAM,CAAEkC,QAASlC,GAJnF4I,EAAO,EAAQ,KAEf/C,EAAO,EAAQ,KAInB,IAAIiP,EAAiB,CACpBG,gBAAiB,SAAyBU,EAAiBC,EAAWxU,GACrE,MAAO,GAAKuU,EAAkBvU,EAASG,MAAQqU,IAuGjD,IAAIf,EAAsBlV,EAAQkV,oBAAsB,SAExD,SAASW,EAAoCzP,EAAQ9B,EAAQ4R,EAAwBC,EAAwC1U,GAC5H,IAAIuU,EAAkB5P,EAAOxB,QAAQ,IAAIwE,OAAO9E,EAAOiK,WAAY2H,EAAyB5R,EAAO8R,uBAAwB9R,EAAOE,gCAAoCF,EAAOG,2CAA4C0R,EAAgI7R,EAAOA,SAA7FA,EAAOA,SAASM,QAAQsQ,EAAqB5Q,EAAOE,iCAEvT,OAAI0R,EACIH,EAA+BC,GAGhCA,EAGR,SAASX,EAAuBjP,EAAQiQ,EAAW5U,GAClD,IAAI6C,EAASwR,EAAyBrU,EAAS4B,UAAW+C,GAC1D,OAAK9B,EAGEuR,EAAoCzP,EAAQ9B,EAAsB,kBAAd+R,GAA+B,GAFlFjQ,EAKT,SAAS0P,EAAyBQ,EAAmBnP,GAC/C,IAAIgD,EAAYmM,EAAmBlM,EAAWC,MAAMC,QAAQH,GAAYI,EAAK,EAAlF,IAAqFJ,EAAYC,EAAWD,EAAYA,EAAUhK,OAAOC,cAAe,CACvJ,IAAIoK,EAEJ,GAAIJ,EAAU,CACb,GAAIG,GAAMJ,EAAUtJ,OAAQ,MAC5B2J,EAAOL,EAAUI,SACX,CAEN,IADAA,EAAKJ,EAAUM,QACRC,KAAM,MACbF,EAAOD,EAAGtK,MAGX,IAAIqE,EAASkG,EAGb,GAAIlG,EAAOiS,wBAAwB1V,OAAS,EAAG,CAE9C,IAAI2V,EAA8BlS,EAAOiS,wBAAwBjS,EAAOiS,wBAAwB1V,OAAS,GAGzG,GAA4D,IAAxDsG,EAAgBoC,OAAOiN,GAC1B,SAKF,IAAI,EAAI5O,EAAMC,iBAAiBV,EAAiB7C,EAAOiK,WACtD,OAAOjK,GAmCV,SAASyR,EAA+BU,GACvC,OAAOA,EAAM7R,QAAQ,IAAIwE,OAAO,IAAMf,EAAW7C,kBAAoB,KAAM,KAAM,KAAKkR,OAGvF,SAAStB,EAAaY,EAAiBpU,EAAKH,EAAU6T,GACrD,OAAO1T,EAAM0T,EAAgBU,EAAiBpU,EAAKH,GAAYuU,EAGhE,SAASJ,EAAsCxP,EAAQuQ,EAAsBpB,EAAaqB,GACzF,IAAIC,EAAsB,IAAIhR,EAAWtD,QAAQqU,EAAkBnV,UAInE,GAHAoV,EAAoBrV,QAAQ+T,GAGxBoB,IAAyBE,EAAoB9U,qBAGhD,MAA6B,MAAzB4U,EACIA,EAAuB,IAAMtB,EAAuBjP,EAAQ,WAAYwQ,GAYzEvB,EAAuBjP,EAAQ,WAAYwQ,K,iCCvPpD9W,OAAOC,eAAeC,EAAS,aAAc,CAC5CC,OAAO,IAGR,IAAIC,EAA4B,mBAAXC,QAAoD,iBAApBA,OAAOC,SAAwB,SAAUC,GAAO,cAAcA,GAAS,SAAUA,GAAO,OAAOA,GAAyB,mBAAXF,QAAyBE,EAAIC,cAAgBH,QAAUE,IAAQF,OAAOI,UAAY,gBAAkBF,GAElQ2M,EAAgb,SAAUC,EAAKrM,GAAK,GAAIyJ,MAAMC,QAAQ2C,GAAQ,OAAOA,EAAY,GAAI9M,OAAOC,YAAYN,OAAOmN,GAAQ,OAAxf,SAAuBA,EAAKrM,GAAK,IAAIsM,EAAO,GAAQC,GAAK,EAAUC,GAAK,EAAWC,OAAKnL,EAAW,IAAM,IAAK,IAAiCoL,EAA7B/C,EAAK0C,EAAI9M,OAAOC,cAAmB+M,GAAMG,EAAK/C,EAAGE,QAAQC,QAAoBwC,EAAKK,KAAKD,EAAGrN,QAAYW,GAAKsM,EAAKrM,SAAWD,GAA3DuM,GAAK,IAAoE,MAAOK,GAAOJ,GAAK,EAAMC,EAAKG,EAAO,QAAU,KAAWL,GAAM5C,EAAW,QAAGA,EAAW,SAAO,QAAU,GAAI6C,EAAI,MAAMC,GAAQ,OAAOH,EAA6HO,CAAcR,EAAKrM,GAAa,MAAM,IAAI8B,UAAU,yDAEtlB1C,EAAQuC,QAkBR,WACC,IAAImL,EAAsBC,EAAmB/H,WACzCqF,EAAQyC,EAAoBzC,MAC5BtF,EAAU+H,EAAoB/H,QAC9BlE,EAAWiM,EAAoBjM,SAEnC,OAAO,EAAIuH,EAAiBzG,SAAS0I,EAAOtF,EAASlE,IAvBtDzB,EAAQ2N,mBAAqBA,EAE7B,IAEIrH,EAAwByC,EAFD,EAAQ,MAM/BC,EAAmBD,EAFD,EAAQ,MAM1B+N,EAAW/N,EAFD,EAAQ,MAItB,SAASA,EAAuB1I,GAAO,OAAOA,GAAOA,EAAIiC,WAAajC,EAAM,CAAEkC,QAASlC,GAavF,SAASsN,EAAmBG,GAC3B,IAAIC,EAAwB1D,MAAM9J,UAAUiJ,MAAMuD,KAAKe,GACnDE,EAAyBhB,EAAee,EAAuB,GAC/DE,EAAQD,EAAuB,GAC/BE,EAAQF,EAAuB,GAC/BG,EAAQH,EAAuB,GAC/BI,EAAQJ,EAAuB,GAE/B/C,OAAQ,EACRtF,EAAU,GACVlE,OAAW,EAIf,GAAqB,iBAAVwM,EAI4D,iBAAhD,IAAVC,EAAwB,YAAchO,EAAQgO,KACrDE,GACHzI,EAAUwI,EACV1M,EAAW2M,GAEX3M,EAAW0M,EASXlD,GADG,EAAI3E,EAAsB/D,SAAS0L,IAC9B,EAAI6I,EAASvU,SAAS0L,EAAO,CAAEnI,eAAgBoI,GAASzM,GAExD,KAOJ0M,GACHxI,EAAUuI,EACVzM,EAAW0M,GAEX1M,EAAWyM,EASXjD,GADG,EAAI3E,EAAsB/D,SAAS0L,IAC9B,EAAI6I,EAASvU,SAAS0L,OAAO/L,EAAWT,GAExC,QAMP,KAAIsD,EAAUkJ,GASX,MAAM,IAAIvL,UAAU,sFAR1BuI,EAAQgD,EAEJE,GACHxI,EAAUuI,EACVzM,EAAW0M,GAEX1M,EAAWyM,EAId,MAAO,CACNjD,MAAOA,EACPtF,QAASA,EACTlE,SAAUA,GAOZ,IAAIsD,EAAY,SAAmBtB,GAClC,MAAiE,iBAA5C,IAANA,EAAoB,YAAcvD,EAAQuD,M,iCCxH1D3D,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAGT,IAAI0M,EAAW7M,OAAO8M,QAAU,SAAUlM,GAAU,IAAK,IAAIE,EAAI,EAAGA,EAAIgF,UAAU/E,OAAQD,IAAK,CAAE,IAAIiM,EAASjH,UAAUhF,GAAI,IAAK,IAAIM,KAAO2L,EAAc/M,OAAOS,UAAUuM,eAAeC,KAAKF,EAAQ3L,KAAQR,EAAOQ,GAAO2L,EAAO3L,IAAY,OAAOR,GAEnPF,EAAe,WAAc,SAASC,EAAiBC,EAAQC,GAAS,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAME,OAAQD,IAAK,CAAE,IAAIE,EAAaH,EAAMC,GAAIE,EAAWC,WAAaD,EAAWC,aAAc,EAAOD,EAAWE,cAAe,EAAU,UAAWF,IAAYA,EAAWG,UAAW,GAAMnB,OAAOC,eAAeW,EAAQI,EAAWI,IAAKJ,IAAiB,OAAO,SAAUK,EAAaC,EAAYC,GAAiJ,OAA9HD,GAAYX,EAAiBU,EAAYZ,UAAWa,GAAiBC,GAAaZ,EAAiBU,EAAaE,GAAqBF,GAA7gB,GAQfoH,EAAgBQ,EAFD,EAAQ,MAIvBV,EAAa,EAAQ,KAErB7B,EAAa,EAAQ,KAIrBuQ,EAAgBhO,EAFD,EAAQ,MAIvBnB,EAAQ,EAAQ,KAEhBoP,EAAO,EAAQ,KAIfC,EAAalO,EAFD,EAAQ,MAMpBmO,EAAsBnO,EAFD,EAAQ,MAM7BoO,EAAwBpO,EAFD,EAAQ,MAI/BqO,EAAoB,EAAQ,KAE5BC,EAAqBtO,EAAuBqO,GAE5CrI,EAAY,EAAQ,KAIpB+H,EAAW/N,EAFD,EAAQ,MAItB,SAASA,EAAuB1I,GAAO,OAAOA,GAAOA,EAAIiC,WAAajC,EAAM,CAAEkC,QAASlC,GAcvF,IAAIiX,EAAgB,CAEpB,YAIA,aAIA,MAAQN,EAAKO,GAAK,MAAQP,EAAKO,GAAK,IAAMP,EAAKO,GAAK,QAKpD,SAA0BP,EAAKO,GAAK,QAGpC,OAASP,EAAKO,GAAK,WAGnBP,EAAKO,GAAK,KAAOP,EAAKQ,GAAK,MAGvBC,GAAY,EAAI7P,EAAMwL,OAAO,EAAG,GAGhCsE,GAAmB,EAAI9P,EAAMwL,OAAO,EAAG,GAKvCuE,EAAkBtP,EAAWjD,mBAAqBiD,EAAWhD,wBAI7DuS,GAAa,EAAIhQ,EAAMwL,OAAO,EAAGuE,GAGjCE,EAAc,IAAMxP,EAAW7C,kBAAoB,IAAMkS,EAGzDI,EAAgBd,EAAKe,KAAM,EAAInQ,EAAMwL,OAAO,EAAGuE,GAkB/CK,EAAU,MAAQZ,EAAkBa,WAAaJ,EAAc,IAAMJ,EAAYK,EAAgB,MAAQD,EAAcC,EAAgB,IAAMF,EAAa,MAAQpR,EAAWkL,2BAA6B,KAU1MwG,EAA4B,IAAI9O,OAAO,KAAO4N,EAAKmB,IAAMnB,EAAKoB,IAAM,QAIpEC,EAAmBC,OAAOD,kBAAoBE,KAAKC,IAAI,EAAG,IAAM,EAahE/H,EAAqB,WAoBvB,SAASA,IACP,IAAI/K,EAAOE,UAAU/E,OAAS,QAAsBqB,IAAjB0D,UAAU,GAAmBA,UAAU,GAAK,GAC3ED,EAAUC,UAAU/E,OAAS,QAAsBqB,IAAjB0D,UAAU,GAAmBA,UAAU,GAAK,GAC9EnE,EAAWmE,UAAU,GAczB,GAxIJ,SAAyBnD,EAAUtB,GAAe,KAAMsB,aAAoBtB,GAAgB,MAAM,IAAIuB,UAAU,qCA4H5GF,CAAgBI,KAAM6N,GAEtB7N,KAAK6V,MAAQ,YACb7V,KAAK8V,YAAc,EACnB9V,KAAK+V,YAAc,IAAI5B,EAAcxU,QAAQ,MAE7CoD,EAAUgH,EAAS,GAAIhH,EAAS,CAC9BG,eAAgBH,EAAQG,iBAAkB,EAAIiJ,EAAU9M,oBAAoB0D,EAAQG,eAAgBrE,GAAYkE,EAAQG,oBAAiB5D,EACzI0W,SAAUjT,EAAQiT,UAAYjT,EAAQ8C,SAAW,WAAa,QAC9DoQ,SAAUlT,EAAQkT,UAAYR,KAGnBO,SACX,MAAM,IAAIlW,UAAU,2BAGtB,GAAIiD,EAAQkT,SAAW,EACrB,MAAM,IAAInW,UAAU,2BAUtB,GAPAE,KAAK8C,KAAOA,EACZ9C,KAAK+C,QAAUA,EACf/C,KAAKnB,SAAWA,EAGhBmB,KAAKgW,SAAW3B,EAAW1U,QAAQoD,EAAQiT,WAEtChW,KAAKgW,SACR,MAAM,IAAIlW,UAAU,qBAAuBiD,EAAQiT,SAAW,KAIhEhW,KAAKiW,SAAWlT,EAAQkT,SAExBjW,KAAKoV,QAAU,IAAI5O,OAAO4O,EAAS,MAqMrC,OAjLAxX,EAAaiQ,EAAoB,CAAC,CAChCvP,IAAK,OACLjB,MAAO,WAML,IADA,IAAI4R,OAAU,EACPjP,KAAKiW,SAAW,GAAkD,QAA5ChH,EAAUjP,KAAKoV,QAAQpO,KAAKhH,KAAK8C,QAAiB,CAC7E,IAAIoT,EAAYjH,EAAQ,GACpBkH,EAASlH,EAAQpC,MAIrB,GAFAqJ,GAAY,EAAI5B,EAAoB3U,SAASuW,IAEzC,EAAI3B,EAAsB5U,SAASuW,EAAWC,EAAQnW,KAAK8C,MAAO,CACpE,IAAIoM,EAEJlP,KAAKoW,eAAeF,EAAWC,EAAQnW,KAAK8C,OAGzC9C,KAAKqW,kBAAkBH,EAAWC,EAAQnW,KAAK8C,MAElD,GAAIoM,EAAO,CACT,GAAIlP,KAAK+C,QAAQ5C,GAAI,CACnB,IAAIuF,EAAc,IAAIC,EAAchG,QAAQuP,EAAMtQ,QAASsQ,EAAMnJ,MAAO/F,KAAKnB,UAI7E,OAHIqQ,EAAMlQ,MACR0G,EAAY1G,IAAMkQ,EAAMlQ,KAEnB,CACLsX,SAAUpH,EAAMoH,SAChBC,OAAQrH,EAAMqH,OACd/S,OAAQkC,GAGZ,OAAOwJ,GAIXlP,KAAKiW,cASR,CACD3X,IAAK,oBACLjB,MAAO,SAA2B6Y,EAAWC,EAAQrT,GAC9C,IAAIyE,EAAYmN,EAAelN,EAAWC,MAAMC,QAAQH,GAAYI,EAAK,EAA9E,IAAiFJ,EAAYC,EAAWD,EAAYA,EAAUhK,OAAOC,cAAe,CAClJ,IAAIoK,EAEJ,GAAIJ,EAAU,CACZ,GAAIG,GAAMJ,EAAUtJ,OAAQ,MAC5B2J,EAAOL,EAAUI,SACZ,CAEL,IADAA,EAAKJ,EAAUM,QACRC,KAAM,MACbF,EAAOD,EAAGtK,MAQZ,IALA,IAEImZ,GAAe,EACfvH,OAAU,EACVwH,EAAqB,IAAIjQ,OAJLoB,EAI+B,KACG,QAAlDqH,EAAUwH,EAAmBzP,KAAKkP,KAAwBlW,KAAKiW,SAAW,GAAG,CACnF,GAAIO,EAAc,CAEhB,IAAIE,GAAS,EAAI1R,EAAM2L,qBAAqB2E,EAA2BY,EAAUtP,MAAM,EAAGqI,EAAQpC,QAE9F8J,EAAS3W,KAAKoW,eAAeM,EAAQP,EAAQrT,GACjD,GAAI6T,EACF,OAAOA,EAGT3W,KAAKiW,WACLO,GAAe,EAGjB,IAAII,GAAQ,EAAI5R,EAAM2L,qBAAqB2E,EAA2BrG,EAAQ,IAK1EC,EAAQlP,KAAKoW,eAAeQ,EAAOT,EAASlH,EAAQpC,MAAO/J,GAC/D,GAAIoM,EACF,OAAOA,EAGTlP,KAAKiW,eAeV,CACD3X,IAAK,iBACLjB,MAAO,SAAwB6Y,EAAWC,EAAQrT,GAChD,IAAK,EAAI2R,EAAmB9U,SAASuW,EAAWC,EAAQrT,EAAM9C,KAAK+C,QAAQiT,UAA3E,CAIA,IAAIxS,GAAS,EAAI0Q,EAASvU,SAASuW,EAAW,CAC5CrQ,UAAU,EACV3C,eAAgBlD,KAAK+C,QAAQG,gBAC5BlD,KAAKnB,UAER,GAAK2E,EAAOwC,UAIRhG,KAAKgW,SAASxS,EAAQ0S,EAAWlW,KAAKnB,SAAUmB,KAAK+V,aAAc,CASrE,IAAIjQ,EAAS,CACXwQ,SAAUH,EACVI,OAAQJ,EAASD,EAAUjY,OAC3BW,QAAS4E,EAAO5E,QAChBmH,MAAOvC,EAAOuC,OAOhB,OAJIvC,EAAOxE,MACT8G,EAAO9G,IAAMwE,EAAOxE,KAGf8G,MAGV,CACDxH,IAAK,UACLjB,MAAO,WAYL,MAXmB,cAAf2C,KAAK6V,QACP7V,KAAK6W,UAAY7W,KAAK8W,OAElB9W,KAAK6W,UAEP7W,KAAK6V,MAAQ,QAEb7V,KAAK6V,MAAQ,QAIK,UAAf7V,KAAK6V,QAEb,CACDvX,IAAK,OACLjB,MAAO,WAEL,IAAK2C,KAAK+W,UACR,MAAM,IAAI3X,MAAM,mBAIlB,IAAI0G,EAAS9F,KAAK6W,UAGlB,OAFA7W,KAAK6W,UAAY,KACjB7W,KAAK6V,MAAQ,YACN/P,MAIJ+H,EAhQgB,GAmQzBzQ,EAAQuC,QAAUkO,G,iCC1ZlB3Q,OAAOC,eAAeC,EAAS,aAAc,CAC5CC,OAAO,IAERD,EAAQmR,uBAAoBjP,EAE5B,IAAI1B,EAAe,WAAc,SAASC,EAAiBC,EAAQC,GAAS,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAME,OAAQD,IAAK,CAAE,IAAIE,EAAaH,EAAMC,GAAIE,EAAWC,WAAaD,EAAWC,aAAc,EAAOD,EAAWE,cAAe,EAAU,UAAWF,IAAYA,EAAWG,UAAW,GAAMnB,OAAOC,eAAeW,EAAQI,EAAWI,IAAKJ,IAAiB,OAAO,SAAUK,EAAaC,EAAYC,GAAiJ,OAA9HD,GAAYX,EAAiBU,EAAYZ,UAAWa,GAAiBC,GAAaZ,EAAiBU,EAAaE,GAAqBF,GAA7gB,GAUnBnB,EAAQ4Z,sBAAwBA,EAChC5Z,EAAQ6Z,8BAAgCA,EACxC7Z,EAAQ8Z,sBAkgCR,SAA+B/F,EAAUgG,GACxC,IAAIC,EAAoBjG,EAASvK,MAAM,EAAGuQ,GAEtCE,EAAiBrG,EAAiB,IAAKoG,GACvCE,EAAiBtG,EAAiB,IAAKoG,GAEvCG,EAAkBF,EAAiBC,EACvC,KAAOC,EAAkB,GAAKJ,EAAahG,EAASlT,QACtB,MAAzBkT,EAASgG,IACZI,IAEDJ,IAGD,OAAOhG,EAASvK,MAAM,EAAGuQ,IA/gC1B/Z,EAAQ4T,iBAAmBA,EAC3B5T,EAAQoa,OAASA,EAEjB,IAEIvU,EAAakD,EAFD,EAAQ,MAMpBR,EAAgBQ,EAFD,EAAQ,MAIvBV,EAAa,EAAQ,KAErBT,EAAQ,EAAQ,KAEhByS,EAAU,EAAQ,KAElBC,EAAW,EAAQ,KAEnB5S,EAAkB,EAAQ,KAI1BN,EAA+B2B,EAFD,EAAQ,MAI1C,SAASA,EAAuB1I,GAAO,OAAOA,GAAOA,EAAIiC,WAAajC,EAAM,CAAEkC,QAASlC,GAMvF,IAKIka,EAA6BH,EALf,IAEyB,IAOvCjJ,EAAoBnR,EAAQmR,kBAAoB,IAChDqJ,EAA4B,IAAIpR,OAAO+H,GAYvCsJ,EAAuE,WAC1E,MAAO,mBASJC,EAAwE,WAC3E,MAAO,qBAUJC,EAA0B,IAAIvR,OAAO,KAAYf,EAAW7C,kBAAoB,aAAoB6C,EAAW7C,kBAAoB,SAOnIoV,EAAgC,IAAMvS,EAAW5C,WAAa,UAAiB4C,EAAW7C,kBAAoB6C,EAAW/C,aAAe,KAExIuV,EAAwC,IAAIzR,OAAO,IAAMwR,EAAgC,IAAK,KAE9F/J,EAAY,WAMf,SAASA,EAAU/K,EAAgBrE,IAhEpC,SAAyBgB,EAAUtB,GAAe,KAAMsB,aAAoBtB,GAAgB,MAAM,IAAIuB,UAAU,qCAiE9GF,CAAgBI,KAAMiO,GAEtBjO,KAAK+C,QAAU,GAEf/C,KAAKnB,SAAW,IAAIoE,EAAWtD,QAAQd,GAEnCqE,GAAkBlD,KAAKnB,SAASE,WAAWmE,KAC9ClD,KAAKkD,eAAiBA,GAGvBlD,KAAKkY,QA42BN,OAr2BAta,EAAaqQ,EAAW,CAAC,CACxB3P,IAAK,QACLjB,MAAO,SAAeyF,GAGrB,IAAIqV,GAAmB,EAAIV,EAAQhU,gCAAgCX,IAAS,GAW5E,OAPKqV,GACArV,GAAQA,EAAKO,QAAQ,MAAQ,IAChC8U,EAAmB,KAKhBF,EAAsClW,KAAKoW,GAIzCnY,KAAKoY,cAAa,EAAI5T,EAA6B7E,SAASwY,IAH3DnY,KAAKqY,gBAKZ,CACF/Z,IAAK,eACLjB,MAAO,SAAsBgL,GA+B5B,GA3BiB,MAAbA,EAAM,KACJrI,KAAKsY,cACTtY,KAAKsY,aAAe,IAKpBtY,KAAKuY,oBAGNlQ,EAAQA,EAAMzB,MAAM,IAIrB5G,KAAKsY,aAAejQ,EAMpBrI,KAAKuF,gBAAkB8C,EAOnBrI,KAAKwY,kBACR,GAAKxY,KAAKb,mBAyCAa,KAAKpB,SACboB,KAAKyY,0BA1CuB,CAI7B,IAAKzY,KAAKuF,eAET,OAAOvF,KAAKsY,YAab,IAAKtY,KAAKmE,4BAET,OAAOnE,KAAKsY,YAIbtY,KAAK0Y,gEACL1Y,KAAK2Y,cACL3Y,KAAKyY,0BAiBA,CAKN,IAAIG,EAA2B5Y,KAAKgB,eACpChB,KAAKuF,eAAiBvF,KAAKgB,eAAiBhB,KAAKuF,eAGjDvF,KAAK6Y,wBAED7Y,KAAKgB,iBAAmB4X,IAM3B5Y,KAAK8Y,sBAAmBxZ,EACxBU,KAAK2Y,eASP,IAAK3Y,KAAKuF,eACT,OAAOvF,KAAK+Y,iCAKb/Y,KAAKgZ,kCAGL,IAAIC,EAAkCjZ,KAAKkZ,qBAAqB7Q,GAKhE,OAAI4Q,EACIjZ,KAAKmZ,iBAAiBF,GAKvBjZ,KAAK+Y,mCAEX,CACFza,IAAK,iCACLjB,MAAO,WAEN,OAAI2C,KAAKwY,mBAAqBxY,KAAKb,mBAC3B,IAAMa,KAAKb,mBAAqBa,KAAKuF,eAGtCvF,KAAKsY,cAEX,CACFha,IAAK,uBACLjB,MAAO,SAA8B+b,GAQpC,IAAIC,OAAiD,EACjDrZ,KAAKsZ,eACRD,EAAiDrZ,KAAKuZ,+BAA+BH,IAOtF,IAAII,EAAmBxZ,KAAKyZ,0CAO5B,OAAID,IASAxZ,KAAK0Z,sBAUD1Z,KAAK2Z,yBAYNN,KAEN,CACF/a,IAAK,QACLjB,MAAO,WAkBN,OAfA2C,KAAKsY,YAAc,GAEnBtY,KAAKqY,cAAgB,GAIrBrY,KAAKgB,eAAiB,GAEtBhB,KAAKuF,eAAiB,GACtBvF,KAAK6E,YAAc,GAEnB7E,KAAKuY,mBAELvY,KAAK2Y,cAEE3Y,OAEN,CACF1B,IAAK,eACLjB,MAAO,WACF2C,KAAKwY,kBACRxY,KAAKpB,aAAUU,EAEfU,KAAKpB,QAAUoB,KAAKkD,iBAGpB,CACF5E,IAAK,mBACLjB,MAAO,WACN2C,KAAK4Z,eAED5Z,KAAKkD,iBAAmBlD,KAAKwY,mBAChCxY,KAAKnB,SAASD,QAAQoB,KAAKkD,gBAC3BlD,KAAKb,mBAAqBa,KAAKnB,SAASM,qBAExCa,KAAK0Y,kEAEL1Y,KAAKnB,SAASD,aAAQU,GACtBU,KAAKb,wBAAqBG,EAI1BU,KAAK0T,kBAAoB,GACzB1T,KAAK8Y,sBAAmBxZ,KAGxB,CACFhB,IAAK,cACLjB,MAAO,WACN2C,KAAKsZ,kBAAeha,EACpBU,KAAKmR,cAAW7R,EAChBU,KAAK6Z,kCAA+Bva,EACpCU,KAAK8Z,qBAAuB,IAM3B,CACFxb,IAAK,yBACLjB,MAAO,WAGN,OAAO2C,KAAKuZ,+BAA+BvZ,KAAKuF,kBAE/C,CACFjH,IAAK,gEACLjB,MAAO,WAEN2C,KAAK0T,kBAAoB1T,KAAKnB,SAAS4B,UAAUsZ,OAAO,SAAUrY,GACjE,OAAOqW,EAAwBhW,KAAKL,EAAO8R,yBAG5CxT,KAAK8Y,sBAAmBxZ,IAEvB,CACFhB,IAAK,kCACLjB,MAAO,WACN,IAAI2c,EAAiBha,KAAKuF,eActB0U,EAAkCD,EAAe/b,OAzVxB,EA0VzBgc,EAAkC,IACrCA,EAAkC,GASnC,IAAIvG,EAAoB1T,KAAKka,2BAA6Bla,KAAK8Y,kBAAoB9Y,KAAK0T,kBACxF1T,KAAKka,0BAA4Bla,KAAKma,eAEtCna,KAAK8Y,iBAAmBpF,EAAkBqG,OAAO,SAAUrY,GAC1D,IAAI0Y,EAAgC1Y,EAAOiS,wBAAwB1V,OAInE,GAAsC,IAAlCmc,EACH,OAAO,EAGR,IAAIC,EAA+B1E,KAAK2E,IAAIL,EAAiCG,EAAgC,GACzGG,EAAyB7Y,EAAOiS,wBAAwB0G,GAI5D,OAAO,IAAI7T,OAAO,KAAO+T,EAAyB,KAAKxY,KAAKiY,KAUzDha,KAAKsZ,eAAsE,IAAtDtZ,KAAK8Y,iBAAiBzV,QAAQrD,KAAKsZ,eAC3DtZ,KAAK2Y,gBAGL,CACFra,IAAK,eACLjB,MAAO,WAeN,OAAO2C,KAAKuF,eAAetH,QApZE,IA2Z5B,CACFK,IAAK,0CACLjB,MAAO,WACD,IAAIkK,EAAYvH,KAAK8Y,iBAAkBtR,EAAWC,MAAMC,QAAQH,GAAYI,EAAK,EAAtF,IAAyFJ,EAAYC,EAAWD,EAAYA,EAAUhK,OAAOC,cAAe,CAC3J,IAAIoK,EAEJ,GAAIJ,EAAU,CACb,GAAIG,GAAMJ,EAAUtJ,OAAQ,MAC5B2J,EAAOL,EAAUI,SACX,CAEN,IADAA,EAAKJ,EAAUM,QACRC,KAAM,MACbF,EAAOD,EAAGtK,MAGX,IAAIqE,EAASkG,EAIb,GAFc,IAAIpB,OAAO,OAAS9E,EAAOiK,UAAY,MAExC5J,KAAK/B,KAAKuF,iBAIlBvF,KAAKwa,mBAAmB9Y,GAA7B,CAKA1B,KAAK2Y,cACL3Y,KAAKsZ,aAAe5X,EAEpB,IAAI8X,GAAmB,EAAI9B,EAASzE,qCAAqCjT,KAAKuF,eAAgB7D,EAAQ1B,KAAKwY,kBAA2C,KAAxBxY,KAAKgB,eAAuBhB,KAAKnB,UAgB/J,GAXImB,KAAKgB,gBAA8C,MAA5BhB,KAAKb,qBAC/Bqa,EAAmB,KAAOA,GAUvBxZ,KAAKya,yBAAyB/Y,GAEjC1B,KAAK2Z,6BACC,CAEN,IAAIe,EAAc1a,KAAKmZ,iBAAiBK,GACxCxZ,KAAKmR,SAAWuJ,EAAY1Y,QAAQ,UAAWuM,GAC/CvO,KAAK6Z,6BAA+Ba,EAGrC,OAAOlB,MAMP,CACFlb,IAAK,mBACLjB,MAAO,SAA0Bsd,GAChC,OAAI3a,KAAKwY,kBACD,IAAMxY,KAAKb,mBAAqB,IAAMwb,EAEvCA,IAON,CACFrc,IAAK,4BACLjB,MAAO,WACN,IAAI6G,GAAwB,EAAIuT,EAAQtT,2BAA2BnE,KAAKsY,YAAatY,KAAKkD,eAAgBlD,KAAKnB,SAASA,UACpHM,EAAqB+E,EAAsB/E,mBAC3CqE,EAASU,EAAsBV,OAEnC,GAAKrE,EAiBL,OAbAa,KAAKb,mBAAqBA,EAU1Ba,KAAKuF,eAAiB/B,EAEtBxD,KAAKnB,SAASuF,kCAAkCjF,QACLG,IAApCU,KAAKnB,SAAS2G,oBAEpB,CACFlH,IAAK,wBACLjB,MAAO,WAGN,GAFA2C,KAAKgB,eAAiB,GAEjBhB,KAAKnB,SAAS2G,kBAAnB,CAQA,IAAId,GAAwB,EAAI+S,EAAQ9S,wCAAwC3E,KAAKuF,eAAgBvF,KAAKnB,UACtG+F,EAA4BF,EAAsBlB,OAClDqB,EAAcH,EAAsBG,YAUxC,GARIA,IACH7E,KAAK6E,YAAcA,GAOf7E,KAAKnB,SAASqD,qBAAqBlC,KAAKwN,iBAAiBxN,KAAKuF,iBAAoBvF,KAAKwN,iBAAiB5I,OASxG,EAAII,EAAMC,iBAAiBjF,KAAKuF,eAAgBvF,KAAKnB,SAASqG,2BAA6B,EAAIF,EAAMC,iBAAiBL,EAA2B5E,KAAKnB,SAASqG,yBAQpK,OAHAlF,KAAKgB,eAAiBhB,KAAKuF,eAAeqB,MAAM,EAAG5G,KAAKuF,eAAetH,OAAS2G,EAA0B3G,QAC1G+B,KAAKuF,eAAiBX,EAEf5E,KAAKgB,kBAEX,CACF1C,IAAK,mBACLjB,MAAO,SAA0BmG,GAEhC,QADwB,EAAIsB,EAAgBC,0BAA0BvB,OAAQlE,EAAWU,KAAKnB,WAE7F,IAAK,cACJ,OAAO,EAGR,QACC,OAAO,KAGR,CACFP,IAAK,sBACLjB,MAAO,WAGD,IAAIud,EAAa5a,KAAK8Y,iBAAkB+B,EAAYpT,MAAMC,QAAQkT,GAAaE,EAAM,EAA1F,IAA6FF,EAAaC,EAAYD,EAAaA,EAAWrd,OAAOC,cAAe,CACnK,IAAIwS,EAEJ,GAAI6K,EAAW,CACd,GAAIC,GAAOF,EAAW3c,OAAQ,MAC9B+R,EAAQ4K,EAAWE,SACb,CAEN,IADAA,EAAMF,EAAW/S,QACTC,KAAM,MACdkI,EAAQ8K,EAAIzd,MAGb,IAAIqE,EAASsO,EAIb,GAAIhQ,KAAKsZ,eAAiB5X,EACzB,OAOD,GAAK1B,KAAKwa,mBAAmB9Y,IAIxB1B,KAAKya,yBAAyB/Y,GAUnC,OANA1B,KAAKsZ,aAAe5X,EAIpB1B,KAAK8Z,qBAAuB,GAErB,EAMR9Z,KAAK4Z,eAGL5Z,KAAK2Y,gBAEJ,CACFra,IAAK,qBACLjB,MAAO,SAA4BqE,GAIlC,SAAK1B,KAAKwY,oBAAsBxY,KAAKgB,gBAAkBU,EAAOqZ,8CAM1D/a,KAAKgB,iBAAmBU,EAAOI,uBAAyBJ,EAAOG,4CAKlE,CACFvD,IAAK,2BACLjB,MAAO,SAAkCqE,GAKxC,KAA0CA,EAAOiK,UAAUtI,QAAQ,MAAQ,GAA3E,CAKA,IAAI8N,EAAWnR,KAAKgb,kCAAkCtZ,GAItD,GAAKyP,EAsBL,OAjBAnR,KAAK6Z,6BAA+B1I,EAOhCnR,KAAKwY,kBACRxY,KAAKmR,SAAW5C,EAAoBiJ,EAAOjJ,EAAmBvO,KAAKb,mBAAmBlB,QAAU,IAAMkT,EAKrGnR,KAAKmR,SAAWA,EAASnP,QAAQ,MAAOuM,GAInCvO,KAAKmR,YAKX,CACF7S,IAAK,oCACLjB,MAAO,SAA2CqE,GAEjD,IAAIuZ,EAAiBvZ,EAAOiK,UAI3BsP,EAAiBA,EAEhBjZ,QAAQ6V,IAAkC,OAE1C7V,QAAQ8V,IAAmC,OAO7C,IAAIoD,EAA6CvD,EAA2BzI,MAAM+L,GAAgB,GAIlG,KAAIjb,KAAKuF,eAAetH,OAASid,EAA2Cjd,QAA5E,CAKA,IAAIkd,EAAgBnb,KAAKob,gBAAgB1Z,GAiCrC2Z,EAAiB,IAAI7U,OAAO,IAAMyU,EAAiB,KACnDK,EAA+Btb,KAAKuF,eAAevD,QAAQ,MA1xBhD,KAoyBf,OALIqZ,EAAetZ,KAAKuZ,KACvBJ,EAA6CI,GAIvCJ,EAENlZ,QAAQ,IAAIwE,OAAOyU,GAAiBE,GAEpCnZ,QAAQ,IAAIwE,OAxyBE,IAwyBkB,KAAM+H,MAEtC,CACFjQ,IAAK,iCACLjB,MAAO,SAAwCke,GAMzC,IAAIC,EAAaD,EAAO9L,MAAM,IAAKgM,EAAYhU,MAAMC,QAAQ8T,GAAaE,EAAM,EAArF,IAAwFF,EAAaC,EAAYD,EAAaA,EAAWje,OAAOC,cAAe,CAC9J,IAAIme,EAEJ,GAAIF,EAAW,CACd,GAAIC,GAAOF,EAAWvd,OAAQ,MAC9B0d,EAAQH,EAAWE,SACb,CAEN,IADAA,EAAMF,EAAW3T,QACTC,KAAM,MACd6T,EAAQD,EAAIre,MAGb,IAAIuS,EAAQ+L,EAOZ,IAAiH,IAA7G3b,KAAK6Z,6BAA6BjT,MAAM5G,KAAK8Z,oBAAsB,GAAGnT,OAAOiR,GAQhF,OAHA5X,KAAKsZ,kBAAeha,EACpBU,KAAKmR,cAAW7R,OAChBU,KAAK6Z,kCAA+Bva,GAIrCU,KAAK8Z,oBAAsB9Z,KAAK6Z,6BAA6BlT,OAAOiR,GACpE5X,KAAK6Z,6BAA+B7Z,KAAK6Z,6BAA6B7X,QAAQ4V,EAA2BhI,GAI1G,OAAOqH,EAA8BjX,KAAK6Z,6BAA8B7Z,KAAK8Z,oBAAsB,KAOlG,CACFxb,IAAK,kBACLjB,MAAO,WACN,OAAO2C,KAAKsY,aAAuC,MAAxBtY,KAAKsY,YAAY,KAE3C,CACFha,IAAK,kBACLjB,MAAO,SAAyBqE,GAC/B,GAAI1B,KAAKwY,kBACR,OAAO,EAAId,EAASvE,gCAAgCzR,EAAO8R,uBAK5D,GAAI9R,EAAOE,gCAIV,GAAI5B,KAAKgB,iBAAmBU,EAAOI,qBAElC,OAAOJ,EAAOA,SAASM,QAAQ0V,EAASpF,oBAAqB5Q,EAAOE,qCAMjE,GAAgC,MAA5B5B,KAAKb,oBAAsD,MAAxBa,KAAKgB,eAC/C,MAAO,KAAOU,EAAOA,SAGvB,OAAOA,EAAOA,WAOb,CACFpD,IAAK,sBACLjB,MAAO,WACN2C,KAAKpB,SAAU,EAAI6Y,EAAQpS,mBAAmBrF,KAAKb,mBAAoBa,KAAKuF,eAAgBvF,KAAKnB,YAUhG,CACFP,IAAK,YACLjB,MAAO,WACN,GAAK2C,KAAKb,oBAAuBa,KAAKuF,eAAtC,CAGA,IAAIG,EAAc,IAAIC,EAAchG,QAAQK,KAAKpB,SAAWoB,KAAKb,mBAAoBa,KAAKuF,eAAgBvF,KAAKnB,SAASA,UAKxH,OAJImB,KAAK6E,cACRa,EAAYb,YAAc7E,KAAK6E,aAGzBa,KAEN,CACFpH,IAAK,oBACLjB,MAAO,WACN,OAAO2C,KAAKuF,iBAEX,CACFjH,IAAK,cACLjB,MAAO,WACN,GAAK2C,KAAKmR,SAAV,CAOA,IAHA,IAAItE,GAAS,EAET7O,EAAI,EACDA,EAAIgC,KAAKsY,YAAYra,QAC3B4O,EAAQ7M,KAAKmR,SAAS9N,QAAQkL,EAAmB1B,EAAQ,GACzD7O,IAGD,OAAOiZ,EAA8BjX,KAAKmR,SAAUtE,EAAQ,QAIvDoB,EA73BQ,GAi4BhB,SAAS+I,EAAsBxH,GAG9B,IAFA,IAAI+H,EAAkB,GAClBvZ,EAAI,EACDA,EAAIwR,EAAOvR,QACC,MAAduR,EAAOxR,GACVuZ,EAAgB5M,KAAK3M,GACG,MAAdwR,EAAOxR,IACjBuZ,EAAgBqE,MAEjB5d,IAGD,IAAIuL,EAAQ,EACRsS,EAAiB,GACrBtE,EAAgB5M,KAAK6E,EAAOvR,QACvB,IAAI6d,EAAavE,EAAiBwE,EAAYtU,MAAMC,QAAQoU,GAAaE,EAAM,EAApF,IAAuFF,EAAaC,EAAYD,EAAaA,EAAWve,OAAOC,cAAe,CAC7J,IAAIye,EAEJ,GAAIF,EAAW,CACd,GAAIC,GAAOF,EAAW7d,OAAQ,MAC9Bge,EAAQH,EAAWE,SACb,CAEN,IADAA,EAAMF,EAAWjU,QACTC,KAAM,MACdmU,EAAQD,EAAI3e,MAGb,IAAIwP,EAAQoP,EAEZJ,GAAkBrM,EAAO5I,MAAM2C,EAAOsD,GACtCtD,EAAQsD,EAAQ,EAGjB,OAAOgP,EAGR,SAAS5E,EAA8BzH,EAAQ0M,GAI9C,MAHiC,MAA7B1M,EAAO0M,IACVA,IAEMlF,EAAsBxH,EAAO5I,MAAM,EAAGsV,IAsB9C,SAASlL,EAAiBC,EAAQzB,GACjC,IAAI0B,EAAQ,EAOHiL,EAAa3M,EAAOC,MAAM,IAAK2M,EAAY3U,MAAMC,QAAQyU,GAAaE,EAAM,EAArF,IAAwFF,EAAaC,EAAYD,EAAaA,EAAW5e,OAAOC,cAAe,CAC9J,IAAI8e,EAEJ,GAAIF,EAAW,CACd,GAAIC,GAAOF,EAAWle,OAAQ,MAC9Bqe,EAAQH,EAAWE,SACb,CAEN,IADAA,EAAMF,EAAWtU,QACTC,KAAM,MACdwU,EAAQD,EAAIhf,MAGGif,IAEErL,GACjBC,IAIF,OAAOA,EAKR,SAASsG,EAAOhI,EAAQ+M,GACvB,GAAIA,EAAQ,EACX,MAAO,GAKR,IAFA,IAAIzW,EAAS,GAENyW,EAAQ,GACF,EAARA,IACHzW,GAAU0J,GAGX+M,IAAU,EACV/M,GAAUA,EAGX,OAAO1J,EAAS0J,EA/GjBpS,EAAQuC,QAAUsO,G,iCCl+BlB,SAASuO,IAEP,IAAI3G,EAAQ7V,KAAKtC,YAAY+e,yBAAyBzc,KAAKjC,MAAOiC,KAAK6V,OACnEA,SACF7V,KAAK0c,SAAS7G,GAIlB,SAAS8G,EAA0BC,GAQjC5c,KAAK0c,SALL,SAAiBG,GACf,IAAIhH,EAAQ7V,KAAKtC,YAAY+e,yBAAyBG,EAAWC,GACjE,OAAOhH,QAAwCA,EAAQ,MAGnCiH,KAAK9c,OAG7B,SAAS+c,EAAoBH,EAAWI,GACtC,IACE,IAAIC,EAAYjd,KAAKjC,MACjB8e,EAAY7c,KAAK6V,MACrB7V,KAAKjC,MAAQ6e,EACb5c,KAAK6V,MAAQmH,EACbhd,KAAKkd,6BAA8B,EACnCld,KAAKmd,wBAA0Bnd,KAAKod,wBAClCH,EACAJ,GAEF,QACA7c,KAAKjC,MAAQkf,EACbjd,KAAK6V,MAAQgH,GAUjB,SAASQ,EAASC,GAChB,IAAI3f,EAAY2f,EAAU3f,UAE1B,IAAKA,IAAcA,EAAU4f,iBAC3B,MAAM,IAAIne,MAAM,sCAGlB,GACgD,mBAAvCke,EAAUb,0BAC4B,mBAAtC9e,EAAUyf,wBAEjB,OAAOE,EAMT,IAAIE,EAAqB,KACrBC,EAA4B,KAC5BC,EAAsB,KAgB1B,GAf4C,mBAAjC/f,EAAU6e,mBACnBgB,EAAqB,qBACmC,mBAAxC7f,EAAUggB,4BAC1BH,EAAqB,6BAE4B,mBAAxC7f,EAAUgf,0BACnBc,EAA4B,4BACmC,mBAA/C9f,EAAUigB,mCAC1BH,EAA4B,oCAEe,mBAAlC9f,EAAUof,oBACnBW,EAAsB,sBACmC,mBAAzC/f,EAAUkgB,6BAC1BH,EAAsB,8BAGC,OAAvBF,GAC8B,OAA9BC,GACwB,OAAxBC,EACA,CACA,IAAII,EAAgBR,EAAUS,aAAeT,EAAUvN,KACnDiO,EAC4C,mBAAvCV,EAAUb,yBACb,6BACA,4BAEN,MAAMrd,MACJ,2FACE0e,EACA,SACAE,EACA,uDACwB,OAAvBR,EAA8B,OAASA,EAAqB,KAC9B,OAA9BC,EACG,OAASA,EACT,KACqB,OAAxBC,EAA+B,OAASA,EAAsB,IAC/D,wIAgBN,GARkD,mBAAvCJ,EAAUb,2BACnB9e,EAAU6e,mBAAqBA,EAC/B7e,EAAUgf,0BAA4BA,GAMS,mBAAtChf,EAAUyf,wBAAwC,CAC3D,GAA4C,mBAAjCzf,EAAUsgB,mBACnB,MAAM,IAAI7e,MACR,qHAIJzB,EAAUof,oBAAsBA,EAEhC,IAAIkB,EAAqBtgB,EAAUsgB,mBAEnCtgB,EAAUsgB,mBAAqB,SAC7BhB,EACAJ,EACAqB,GAUA,IAAIC,EAAWne,KAAKkd,4BAChBld,KAAKmd,wBACLe,EAEJD,EAAmB9T,KAAKnK,KAAMid,EAAWJ,EAAWsB,IAIxD,OAAOb,EA1JT,8CA6CAd,EAAmB4B,8BAA+B,EAClDzB,EAA0ByB,8BAA+B,EACzDrB,EAAoBqB,8BAA+B,G,iCC7CnDlhB,OAAOC,eAAeC,EAAS,aAAc,CAC5CC,OAAO,IAGRD,EAAQuC,QAAU,SAAUwR,EAAUC,EAAajE,GACvB,mBAAhBiE,IACVjE,EAAQiE,EACRA,EAAc,KAGf,IAAIiN,GAAiB,EAAI9M,EAASP,kBAAkBI,EAAaD,GAEjE,OAAO,SAAUrE,EAAWzP,GAC3B,GAAIA,EAAMY,OAASogB,EAClB,OAAOlR,EAAML,EAAWzP,KAK3B,IAAIkU,EAAW,EAAQ,M,iCCnBvBrU,OAAOC,eAAeC,EAAS,aAAc,CAC5CC,OAAO,IAERD,EAAQuC,aAAUL,EAElB,IAIIgf,EAAQC,EAJRxU,EAAW7M,OAAO8M,QAAU,SAAUlM,GAAU,IAAK,IAAIE,EAAI,EAAGA,EAAIgF,UAAU/E,OAAQD,IAAK,CAAE,IAAIiM,EAASjH,UAAUhF,GAAI,IAAK,IAAIM,KAAO2L,EAAc/M,OAAOS,UAAUuM,eAAeC,KAAKF,EAAQ3L,KAAQR,EAAOQ,GAAO2L,EAAO3L,IAAY,OAAOR,GAEnPF,EAAe,WAAc,SAASC,EAAiBC,EAAQC,GAAS,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAME,OAAQD,IAAK,CAAE,IAAIE,EAAaH,EAAMC,GAAIE,EAAWC,WAAaD,EAAWC,aAAc,EAAOD,EAAWE,cAAe,EAAU,UAAWF,IAAYA,EAAWG,UAAW,GAAMnB,OAAOC,eAAeW,EAAQI,EAAWI,IAAKJ,IAAiB,OAAO,SAAUK,EAAaC,EAAYC,GAAiJ,OAA9HD,GAAYX,EAAiBU,EAAYZ,UAAWa,GAAiBC,GAAaZ,EAAiBU,EAAaE,GAAqBF,GAA7gB,GAMfigB,EAAUrY,EAFD,EAAQ,KAMjBsY,EAActY,EAFD,EAAQ,MAMrBuY,EAAUvY,EAFA,EAAQ,MAIlBwY,EAAgB,EAAQ,KAE5B,SAASxY,EAAuB1I,GAAO,OAAOA,GAAOA,EAAIiC,WAAajC,EAAM,CAAEkC,QAASlC,GAMvF,SAASmhB,EAA2BC,EAAM1U,GAAQ,IAAK0U,EAAQ,MAAM,IAAIC,eAAe,6DAAgE,OAAO3U,GAAyB,iBAATA,GAAqC,mBAATA,EAA8B0U,EAAP1U,EAYlO,IAAI4U,GAAcR,EAASD,EAAS,SAAUU,GAG7C,SAASD,IACR,IAAInX,EAEAqX,EAAOze,GApBb,SAAyBX,EAAUtB,GAAe,KAAMsB,aAAoBtB,GAAgB,MAAM,IAAIuB,UAAU,qCAsB9GF,CAAgBI,KAAM+e,GAEtB,IAAK,IAAIG,EAAOlc,UAAU/E,OAAQiN,EAAOzD,MAAMyX,GAAOC,EAAO,EAAGA,EAAOD,EAAMC,IAC5EjU,EAAKiU,GAAQnc,UAAUmc,GAGxB,OAAeF,EAASze,EAAQoe,EAA2B5e,MAAO4H,EAAOmX,EAAWK,WAAaliB,OAAOmiB,eAAeN,IAAa5U,KAAKmV,MAAM1X,EAAM,CAAC5H,MAAMuf,OAAOrU,KAAiB1K,EAAMgf,cAAgB,SAAU3f,GACnNW,EAAM6H,MAAQxI,GACZW,EAAMif,gBAAkB,WAC1B,OAAOjf,EAAM6H,OACX7H,EAAMuI,SAAW,SAAUX,GAC7B,IAAIsX,EAAclf,EAAMzC,MACpBoP,EAAQuS,EAAYvS,MACpBzL,EAASge,EAAYhe,OAGzB,OAAO,EAAIid,EAAc5V,UAAUX,EAAO5H,EAAMif,kBAAmBtS,EAAOzL,EAAQlB,EAAMzC,MAAMgL,WAC5FvI,EAAMkI,QAAU,SAAUN,GAC5B,IAAIuX,EAAenf,EAAMzC,MACrBoP,EAAQwS,EAAaxS,MACrBzL,EAASie,EAAaje,OAG1B,OAAO,EAAIid,EAAcjW,SAASN,EAAO5H,EAAMif,kBAAmBtS,EAAOzL,EAAQlB,EAAMzC,MAAMgL,WAC3FvI,EAAM2H,MAAQ,SAAUC,GAC1B,IAAIwX,EAAepf,EAAMzC,MACrBoP,EAAQyS,EAAazS,MACrBzL,EAASke,EAAale,OAG1B,OAAO,EAAIid,EAAcxW,OAAOC,EAAO5H,EAAMif,kBAAmBtS,EAAOzL,EAAQlB,EAAMzC,MAAMgL,WACzFvI,EAAMqf,OAAS,SAAUzX,GAC3B,IAAI0X,EAAetf,EAAMzC,MACrBoP,EAAQ2S,EAAa3S,MACrB0S,EAASC,EAAaD,OAM1B,GAAIA,EAAQ,CACX,IAAIE,EAAShW,EAAS,GAAI3B,EAAO,CAChCtK,OAAQiM,EAAS,GAAI3B,EAAMtK,OAAQ,CAClCT,OAAO,EAAIqhB,EAAQ/e,SAASa,EAAMif,kBAAkBpiB,WAAOiC,EAAW6N,GAAO9P,UAK5E0iB,EAAOC,gBAAkB5X,EAAM4X,gBAClCD,EAAO5W,eAAiBf,EAAMe,eAE9B0W,EAAOE,KAENvf,EAAMwI,UAAY,SAAUZ,GAC9B,IAAI6X,EAAezf,EAAMzC,MACrBoP,EAAQ8S,EAAa9S,MACrBzL,EAASue,EAAave,OAO1B,OAJIlB,EAAMzC,MAAMiL,WACfxI,EAAMzC,MAAMiL,UAAUZ,IAGhB,EAAIuW,EAAc3V,WAAWZ,EAAO5H,EAAMif,kBAAmBtS,EAAOzL,EAAQlB,EAAMzC,MAAMgL,WACrF6V,EAA2Bpe,EAAnCye,GAqDJ,OAvID,SAAmBiB,EAAUC,GAAc,GAA0B,mBAAfA,GAA4C,OAAfA,EAAuB,MAAM,IAAIrgB,UAAU,kEAAoEqgB,GAAeD,EAASviB,UAAYT,OAAOkV,OAAO+N,GAAcA,EAAWxiB,UAAW,CAAED,YAAa,CAAEL,MAAO6iB,EAAU/hB,YAAY,EAAOE,UAAU,EAAMD,cAAc,KAAe+hB,IAAYjjB,OAAOkjB,eAAiBljB,OAAOkjB,eAAeF,EAAUC,GAAcD,EAASd,UAAYe,GAWheE,CAAUtB,EA6HTP,EAAQ7e,QAAQ2d,WAnDjB1f,EAAamhB,EAAY,CAAC,CACzBzgB,IAAK,SACLjB,MAAO,WACN,IAAIijB,EAAStgB,KAAKjC,MACdV,EAAQijB,EAAOjjB,MAEfqE,GADQ4e,EAAOnT,MACNmT,EAAO5e,QAChB6e,EAAiBD,EAAOC,eACxBC,EAnGP,SAAkC/iB,EAAK2E,GAAQ,IAAItE,EAAS,GAAI,IAAK,IAAIE,KAAKP,EAAW2E,EAAKiB,QAAQrF,IAAM,GAAkBd,OAAOS,UAAUuM,eAAeC,KAAK1M,EAAKO,KAAcF,EAAOE,GAAKP,EAAIO,IAAM,OAAOF,EAmGrM2iB,CAAyBH,EAAQ,CAAC,QAAS,QAAS,SAAU,mBAUzE,OAAO9B,EAAQ7e,QAAQ+gB,cAAcH,EAAgBxW,EAAS,GAAIyW,EAAM,CACvEG,IAAK3gB,KAAKwf,cACVniB,MAAOqE,EAAOkf,EAAQvjB,GAAS,GAAKA,GAAOyF,KAC3CkG,UAAWhJ,KAAKgJ,UAChBD,SAAU/I,KAAK+I,SACfL,QAAS1I,KAAK0I,QACdP,MAAOnI,KAAKmI,MACZ0X,OAAQ7f,KAAK6f,YAYb,CACFvhB,IAAK,QAOLjB,MAAO,WACN2C,KAAKyf,kBAAkBoB,YAIlB9B,EA7H4B,GA8HNT,EAAOwC,UAAY,CAEhD3T,MAAOsR,EAAY9e,QAAQohB,KAAKC,WAGhCtf,OAAQ+c,EAAY9e,QAAQohB,KAAKC,WAKjCT,eAAgB9B,EAAY9e,QAAQ6P,OAAOwR,WAG3C/e,KAAMwc,EAAY9e,QAAQ6P,OAAOwR,WAGjC3jB,MAAOohB,EAAY9e,QAAQ6P,OAG3BzG,SAAU0V,EAAY9e,QAAQohB,KAAKC,WAKnCnB,OAAQpB,EAAY9e,QAAQohB,KAG5B/X,UAAWyV,EAAY9e,QAAQohB,MAC7BzC,EAAO2C,aAAe,CAIxBV,eAAgB,QAGhBte,KAAM,QACJsc,GAIH,SAASqC,EAAQvjB,GAChB,OAAOA,QAJRD,EAAQuC,QAAUof,G,iCC9MlB7hB,OAAOC,eAAeC,EAAS,aAAc,CAC5CC,OAAO,IAGRD,EAAQuC,QAAU,SAAUmN,EAAWzP,GACtC,OAAOiR,EAAOxB,IAYf,IAAIwB,EAASlR,EAAQkR,OAAS,CAC7B,EAAK,IACL,EAAK,IACL,EAAK,IACL,EAAK,IACL,EAAK,IACL,EAAK,IACL,EAAK,IACL,EAAK,IACL,EAAK,IACL,EAAK,IACL,IAAU,IACV,IAAU,IACV,IAAU,IACV,IAAU,IACV,IAAU,IACV,IAAU,IACV,IAAU,IACV,IAAU,IACV,IAAU,IACV,IAAU,IACV,IAAU,IACV,IAAU,IACV,IAAU,IACV,IAAU,IACV,IAAU,IACV,IAAU,IACV,IAAU,IACV,IAAU,IACV,IAAU,IACV,IAAU,IACV,IAAU,IACV,IAAU,IACV,IAAU,IACV,IAAU,IACV,IAAU,IACV,IAAU,IACV,IAAU,IACV,IAAU,IACV,IAAU,IACV,IAAU,M,iCCzDXpR,OAAOC,eAAeC,EAAS,aAAc,CAC5CC,OAAO,IAGR,IAAI0M,EAAW7M,OAAO8M,QAAU,SAAUlM,GAAU,IAAK,IAAIE,EAAI,EAAGA,EAAIgF,UAAU/E,OAAQD,IAAK,CAAE,IAAIiM,EAASjH,UAAUhF,GAAI,IAAK,IAAIM,KAAO2L,EAAc/M,OAAOS,UAAUuM,eAAeC,KAAKF,EAAQ3L,KAAQR,EAAOQ,GAAO2L,EAAO3L,IAAY,OAAOR,GAEvPV,EAAQuC,QAQR,SAA0BmD,EAAMC,EAASlE,GACxC,OAAO,EAAIqV,EAASvU,SAASmD,EAAMiH,EAAS,GAAIhH,EAAS,CAAE5C,IAAI,IAAStB,IAPzE,IAIgCpB,EAJ5Bga,EAAU,EAAQ,KAElBvD,GAE4BzW,EAFMga,IAEeha,EAAIiC,WAAajC,EAAM,CAAEkC,QAASlC,I,iCCZvFP,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAGT,IAAI8O,EAAY,EAAQ,KAExBjP,OAAOC,eAAeC,EAAS,UAAW,CACxCe,YAAY,EACZ+iB,IAAK,WACH,OAAO/U,EAAUjN,0B,iCCTrBhC,OAAOC,eAAeC,EAAS,aAAc,CAC5CC,OAAO,IAERD,EAAQyV,aA0BR,SAAsBjU,EAASC,GAC9B,IAAIsiB,EAAkB,IAAIle,EAAWtD,QAAQd,GAG7C,GAFAsiB,EAAgBviB,QAAQA,GAEpBwiB,EAAkBrf,KAAKof,EAAgBvO,aAC1C,OAAOuO,EAAgBvO,YAGxB,OAAOuO,EAAgBE,oBAjCxBjkB,EAAQ8K,eAoCR,SAAwB1E,EAAQ5E,EAASC,GACxC,IAAKD,EACJ,OAKD,IAAIuiB,EAAkB,IAAIle,EAAWtD,QAAQd,GAC7CsiB,EAAgBviB,QAAQA,GAExB,IAAI0iB,EAAmB,IAAI9a,OAAO2a,EAAgBvO,aAElD,GAAwC,IAApCpP,EAAOmD,OAAO2a,GACjB,OAQD,IAAIC,GAJJ/d,EAASA,EAAOoD,MAAMpD,EAAO0L,MAAMoS,GAAkB,GAAGrjB,SAI7BiR,MAAMsS,GAEjC,GAAID,GAAqC,MAApBA,EAAc,IAAcA,EAAc,GAAGtjB,OAAS,GACjD,MAArBsjB,EAAc,GACjB,OAIF,OAAO/d,GA/DR,IAMgC/F,EAN5B0O,EAAY,EAAQ,KAEpBlJ,GAI4BxF,EAJQ0O,IAIa1O,EAAIiC,WAAajC,EAAM,CAAEkC,QAASlC,GAFnFgI,EAAa,EAAQ,KAIzB,IAAI+b,EAA0B,IAAIhb,OAAO,KAAOf,EAAW/C,aAAe,MAWtE0e,EAAoB,0C,iCCzBxBlkB,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQuC,QAaR,SAAgC0I,EAAOzJ,GACrC,IAAImE,EAAUC,UAAU/E,OAAS,QAAsBqB,IAAjB0D,UAAU,GAAmBA,UAAU,GAAK,GAC9EnE,EAAWmE,UAAU,GAEzB,OAAOqF,EAAMzJ,UAAYA,IAAW,EAAIwR,EAAYzQ,SAAS0I,EAAOtF,EAASlE,IAf/E,IAIgCpB,EAJ5BgkB,EAAa,EAAQ,KAErBrR,GAE4B3S,EAFSgkB,IAEYhkB,EAAIiC,WAAajC,EAAM,CAAEkC,QAASlC,I,iCCTvFP,OAAOC,eAAeC,EAAS,aAAc,CAC5CC,OAAO,IAERD,EAAQuC,QAoCR,WACC,IAAImL,GAAsB,EAAI4W,EAAkB3W,oBAAoB/H,WAChEF,EAAOgI,EAAoBhI,KAC3BC,EAAU+H,EAAoB/H,QAC9BlE,EAAWiM,EAAoBjM,SAEnC,OAAO,EAAIqV,EAASvU,SAASmD,EAAMC,EAASlE,IAxC7C,IAMgCpB,EAN5Bga,EAAU,EAAQ,KAElBvD,GAI4BzW,EAJMga,IAIeha,EAAIiC,WAAajC,EAAM,CAAEkC,QAASlC,GAFnFikB,EAAoB,EAAQ,M,iCCThCxkB,OAAOC,eAAeC,EAAS,aAAc,CAC5CC,OAAO,IAGR,IAAIC,EAA4B,mBAAXC,QAAoD,iBAApBA,OAAOC,SAAwB,SAAUC,GAAO,cAAcA,GAAS,SAAUA,GAAO,OAAOA,GAAyB,mBAAXF,QAAyBE,EAAIC,cAAgBH,QAAUE,IAAQF,OAAOI,UAAY,gBAAkBF,GAElQ2M,EAAgb,SAAUC,EAAKrM,GAAK,GAAIyJ,MAAMC,QAAQ2C,GAAQ,OAAOA,EAAY,GAAI9M,OAAOC,YAAYN,OAAOmN,GAAQ,OAAxf,SAAuBA,EAAKrM,GAAK,IAAIsM,EAAO,GAAQC,GAAK,EAAUC,GAAK,EAAWC,OAAKnL,EAAW,IAAM,IAAK,IAAiCoL,EAA7B/C,EAAK0C,EAAI9M,OAAOC,cAAmB+M,GAAMG,EAAK/C,EAAGE,QAAQC,QAAoBwC,EAAKK,KAAKD,EAAGrN,QAAYW,GAAKsM,EAAKrM,SAAWD,GAA3DuM,GAAK,IAAoE,MAAOK,GAAOJ,GAAK,EAAMC,EAAKG,EAAO,QAAU,KAAWL,GAAM5C,EAAW,QAAGA,EAAW,SAAO,QAAU,GAAI6C,EAAI,MAAMC,GAAQ,OAAOH,EAA6HO,CAAcR,EAAKrM,GAAa,MAAM,IAAI8B,UAAU,yDAEtlB1C,EAAQuC,QAYR,WACC,IAAImL,EAUL,SAA4BI,GAC3B,IAAIC,EAAwB1D,MAAM9J,UAAUiJ,MAAMuD,KAAKe,GACnDE,EAAyBhB,EAAee,EAAuB,GAC/DE,EAAQD,EAAuB,GAC/BE,EAAQF,EAAuB,GAC/BG,EAAQH,EAAuB,GAC/BI,EAAQJ,EAAuB,GAC/BuW,EAAQvW,EAAuB,GAE/B/C,OAAQ,EACR3G,OAAS,EACTqB,OAAU,EACVlE,OAAW,EAMf,GAAqB,iBAAVwM,EAGV,GAAqB,iBAAVE,EACV7J,EAAS6J,EAELoW,GACH5e,EAAUyI,EACV3M,EAAW8iB,GAEX9iB,EAAW2M,EAGZnD,GAAQ,EAAI6L,EAASvU,SAAS0L,EAAO,CAAEnI,eAAgBoI,EAAOzF,UAAU,GAAQhH,OAI5E,CACH,GAAqB,iBAAVyM,EACV,MAAM,IAAIlM,MAAM,kEAGjBsC,EAAS4J,EAELE,GACHzI,EAAUwI,EACV1M,EAAW2M,GAEX3M,EAAW0M,EAGZlD,GAAQ,EAAI6L,EAASvU,SAAS0L,EAAO,CAAExF,UAAU,GAAQhH,OAKvD,KAAIsD,EAAUkJ,GAUX,MAAM,IAAIvL,UAAU,sFAT1BuI,EAAQgD,EACR3J,EAAS4J,EAELE,GACHzI,EAAUwI,EACV1M,EAAW2M,GAEX3M,EAAW0M,EAKC,kBAAX7J,EACHA,EAAS,gBACY,aAAXA,IACVA,EAAS,YAGV,MAAO,CACN2G,MAAOA,EACP3G,OAAQA,EACRqB,QAASA,EACTlE,SAAUA,GAvFekM,CAAmB/H,WACzCqF,EAAQyC,EAAoBzC,MAC5B3G,EAASoJ,EAAoBpJ,OAC7BqB,EAAU+H,EAAoB/H,QAC9BlE,EAAWiM,EAAoBjM,SAEnC,OAAO,EAAIwR,EAAU1Q,SAAS0I,EAAO3G,EAAQqB,EAASlE,IAjBvD,IAEIwR,EAAYlK,EAFD,EAAQ,MAMnB+N,EAAW/N,EAFD,EAAQ,MAItB,SAASA,EAAuB1I,GAAO,OAAOA,GAAOA,EAAIiC,WAAajC,EAAM,CAAEkC,QAASlC,GAiGvF,IAAI0E,EAAY,SAAmBtB,GAClC,MAAiE,iBAA5C,IAANA,EAAoB,YAAcvD,EAAQuD,M,iCCpH1D3D,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQwkB,cA4DR,SAAuBC,GAErB,IAAKC,EAAU/f,KAAK8f,KAAYE,EAAWhgB,KAAK8f,GAC9C,OAAO,EAGT,OAAOG,EAAkBjgB,KAAK8f,IAjEhCzkB,EAAQ6kB,2BAoER,SAAoCnV,GAClC,MAAqB,MAAdA,GAAqBoV,EAAWngB,KAAK+K,IA9C9C,IAAIqV,EAAM,yBAUN3M,GATKpY,EAAQuX,GAAK,IAAMwN,EAAM,IACzB/kB,EAAQwX,GAAK,KAAOuN,EAAM,IAEzB/kB,EAAQmY,IAAM,0LAIdnY,EAAQ+X,IAAM,8GAEd/X,EAAQoY,IAAM,i5BAEpBsM,EAAY,IAAItb,OADX,IAAMgP,EAAM,KAKjB0M,EAAa,IAAI1b,OADX,8BAKNub,EAAa,IAAIvb,OADX,6YAUNwb,EAAoB,IAAIxb,OAAO,0B,iCCxDnCtJ,OAAOC,eAAeC,EAAS,aAAc,CAC5CC,OAAO,IAERD,EAAQuC,QAcR,SAA2BuW,GAI1B,OAAO,EAAIlR,EAAM2L,qBAAqByR,EAA6BlM,IAhBpE,IAAIlR,EAAQ,EAAQ,KAUhBod,EAA8B,a,iCCflCllB,OAAOC,eAAeC,EAAS,aAAc,CAC5CC,OAAO,IAERD,EAAQuC,QAYR,SAA6BuW,EAAWC,EAAQrT,GAE/C,GAAIuf,EAAsBtgB,KAAKmU,GAC9B,OAAO,EAIR,GAAIoM,EAAYvgB,KAAKmU,GAAY,CAChC,IAAIqM,EAAgBzf,EAAK8D,MAAMuP,EAASD,EAAUjY,QAClD,GAAIukB,EAA2BzgB,KAAKwgB,GACnC,OAAO,EAIT,OAAO,GAvBR,IAAIF,EAAwB,oEAMxBC,EAAc,+CACdE,EAA6B,a,iCCbjCtlB,OAAOC,eAAeC,EAAS,aAAc,CAC5CC,OAAO,IAERD,EAAQiY,gBAAa/V,EACrBlC,EAAQuC,QAyCR,SAA0BuW,EAAWC,EAAQrT,EAAMkT,GAGlD,IAAKyM,EAAyB1gB,KAAKmU,IAAcwM,EAAU3gB,KAAKmU,GAC/D,OAKD,GAAiB,aAAbF,EAAyB,CAI5B,GAAIG,EAAS,IAAMwM,EAAmB5gB,KAAKmU,GAAY,CACtD,IAAI0M,EAAe9f,EAAKqT,EAAS,GAEjC,IAAI,EAAI/B,EAAK6N,4BAA4BW,KAAiB,EAAIxO,EAAKwN,eAAegB,GACjF,OAAO,EAIT,IAAIC,EAAgB1M,EAASD,EAAUjY,OACvC,GAAI4kB,EAAgB/f,EAAK7E,OAAQ,CAChC,IAAI6kB,EAAWhgB,EAAK+f,GACpB,IAAI,EAAIzO,EAAK6N,4BAA4Ba,KAAa,EAAI1O,EAAKwN,eAAekB,GAC7E,OAAO,GAKV,OAAO,GArER,IAAIrd,EAAa,EAAQ,KAErBT,EAAQ,EAAQ,KAEhBoP,EAAO,EAAQ,KAOfiB,EAAajY,EAAQiY,WAAa,UAAuB5P,EAAW5C,WAAa,IAGjF8f,EAAqB,IAAInc,OAAO,IAAM6O,GAGtC0N,GAAqB,EAAI/d,EAAMwL,OAAO,EAAG,GAWzCiS,EAA2B,IAAIjc,OAAO,kGAAiMuc,EAnB1N,qBA4BbL,EAAY,oC,iCC3ChBxlB,OAAOC,eAAeC,EAAS,aAAc,CAC5CC,OAAO,IAERD,EAAQuC,QAcR,WACC,IAAImL,GAAsB,EAAI4W,EAAkB3W,oBAAoB/H,WAChEF,EAAOgI,EAAoBhI,KAC3BC,EAAU+H,EAAoB/H,QAC9BlE,EAAWiM,EAAoBjM,SAEnC,OAAO,EAAImkB,EAAoBrjB,SAASmD,EAAMC,EAASlE,IAnBxDzB,EAAQ2Q,mBAyBR,WACC,IAAIkV,GAAuB,EAAIvB,EAAkB3W,oBAAoB/H,WACjEF,EAAOmgB,EAAqBngB,KAC5BC,EAAUkgB,EAAqBlgB,QAC/BlE,EAAWokB,EAAqBpkB,SAEpC,OAAO,EAAIqkB,EAAmBnV,oBAAoBjL,EAAMC,EAASlE,IA7BlE,IAMgCpB,EAN5BylB,EAAqB,EAAQ,KAE7BF,GAI4BvlB,EAJiBylB,IAIIzlB,EAAIiC,WAAajC,EAAM,CAAEkC,QAASlC,GAFnFikB,EAAoB,EAAQ,M,iCCVhCxkB,OAAOC,eAAeC,EAAS,aAAc,CAC5CC,OAAO,IAERD,EAAQ4Q,uBAAoB1O,EAE5B,IAAI1B,EAAe,WAAc,SAASC,EAAiBC,EAAQC,GAAS,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAME,OAAQD,IAAK,CAAE,IAAIE,EAAaH,EAAMC,GAAIE,EAAWC,WAAaD,EAAWC,aAAc,EAAOD,EAAWE,cAAe,EAAU,UAAWF,IAAYA,EAAWG,UAAW,GAAMnB,OAAOC,eAAeW,EAAQI,EAAWI,IAAKJ,IAAiB,OAAO,SAAUK,EAAaC,EAAYC,GAAiJ,OAA9HD,GAAYX,EAAiBU,EAAYZ,UAAWa,GAAiBC,GAAaZ,EAAiBU,EAAaE,GAAqBF,GAA7gB,GAEnBnB,EAAQuC,QA0CR,SAA0BmD,EAAMC,EAASlE,QAExBS,IAAZyD,IACHA,EAAU,IAGX,IAAI4D,EAAS,IAAIqH,EAAkBlL,EAAMC,EAASlE,GAC9CskB,EAAS,GACb,KAAOxc,EAAOoQ,WACboM,EAAOxY,KAAKhE,EAAOkB,QAEpB,OAAOsb,GApDR/lB,EAAQ2Q,mBA0DR,SAA4BjL,EAAMC,EAASlE,QAE1BS,IAAZyD,IACHA,EAAU,IAGX,IAAI4D,EAAS,IAAIqH,EAAkBlL,EAAMC,EAASlE,GAElD,OAxCD,SAAyBpB,EAAKa,EAAKjB,GAAaiB,KAAOb,EAAOP,OAAOC,eAAeM,EAAKa,EAAK,CAAEjB,MAAOA,EAAOc,YAAY,EAAMC,cAAc,EAAMC,UAAU,IAAkBZ,EAAIa,GAAOjB,EAAS,OAAOI,EAwCnM2lB,CAAgB,GAAI7lB,OAAOC,SAAU,WAC3C,MAAO,CACNqK,KAAM,WACL,OAAIlB,EAAOoQ,UACH,CACNjP,MAAM,EACNzK,MAAOsJ,EAAOkB,QAGT,CACNC,MAAM,QA1EX,IAAIrC,EAAa,EAAQ,KAErB7B,EAAa,EAAQ,KAIrBsQ,EAAW/N,EAFD,EAAQ,MAMlBmO,EAAsBnO,EAFD,EAAQ,MAM7BoO,EAAwBpO,EAFD,EAAQ,MAM/BsO,EAAqBtO,EAFD,EAAQ,MAIhC,SAASA,EAAuB1I,GAAO,OAAOA,GAAOA,EAAIiC,WAAajC,EAAM,CAAEkC,QAASlC,GAQvF,IAAImR,EAAqB,IAAMnJ,EAAW5C,WAAa,aAAyB4C,EAAW7C,kBAAoB,MAAa6C,EAAW/C,aAAe,UAAsB+C,EAAW7C,kBAAoB6C,EAAW/C,aAAe,KAEjO2gB,EAAsC,IAAI7c,OAAO,KAAOf,EAAW9C,WAAa,MAChF2gB,EAAiC,IAAI9c,OAAO,IAAMf,EAAW7C,kBAAoB,OAwDrF,IAAIoL,EAAoB5Q,EAAQ4Q,kBAAoB,WACnD,SAASA,EAAkBlL,GAC1B,IAAIC,EAAUC,UAAU/E,OAAS,QAAsBqB,IAAjB0D,UAAU,GAAmBA,UAAU,GAAK,GAC9EnE,EAAWmE,UAAU,IApE3B,SAAyBnD,EAAUtB,GAAe,KAAMsB,aAAoBtB,GAAgB,MAAM,IAAIuB,UAAU,qCAsE9GF,CAAgBI,KAAMgO,GAEtBhO,KAAK6V,MAAQ,YAEb7V,KAAK8C,KAAOA,EACZ9C,KAAK+C,QAAUA,EACf/C,KAAKnB,SAAWA,EAEhBmB,KAAK4Q,OAAS,IAAIpK,OAAOoI,EAEzB,MAAQhL,EAAWiL,0BAA4B,KAAM,MA2GtD,OApGAjR,EAAaoQ,EAAmB,CAAC,CAChC1P,IAAK,OACLjB,MAAO,WACN,IAAI4R,EAAUjP,KAAK4Q,OAAO5J,KAAKhH,KAAK8C,MAEpC,GAAKmM,EAAL,CAIA,IAAIzL,EAASyL,EAAQ,GACjBqH,EAAWrH,EAAQpC,MAEvBrJ,EAASA,EAAOxB,QAAQqhB,EAAqC,IAC7D/M,GAAYrH,EAAQ,GAAGhR,OAASuF,EAAOvF,OAIvCuF,EAASA,EAAOxB,QAAQshB,EAAgC,IAExD9f,GAAS,EAAI8Q,EAAoB3U,SAAS6D,GAE1C,IAAIsC,EAAS9F,KAAKujB,eAAe/f,EAAQ8S,GAEzC,OAAIxQ,GAMG9F,KAAK8W,UAEX,CACFxY,IAAK,iBACLjB,MAAO,SAAwBmG,EAAQ8S,GACtC,IAAK,EAAI/B,EAAsB5U,SAAS6D,EAAQ8S,EAAUtW,KAAK8C,QAQ1D,EAAI2R,EAAmB9U,SAAS6D,EAAQ8S,EAAUtW,KAAK8C,KAAM9C,KAAK+C,QAAQ8C,SAAW,WAAa,SAAvG,CAgBA,IAAIC,GAAS,EAAIoO,EAASvU,SAAS6D,EAAQxD,KAAK+C,QAAS/C,KAAKnB,UAE9D,GAAKiH,EAAOC,MAOZ,OAHAD,EAAOwQ,SAAWA,EAClBxQ,EAAOyQ,OAASD,EAAW9S,EAAOvF,OAE3B6H,KAEN,CACFxH,IAAK,UACLjB,MAAO,WAWN,MAVmB,cAAf2C,KAAK6V,QACR7V,KAAKwjB,WAAaxjB,KAAK8W,OAEnB9W,KAAKwjB,WACRxjB,KAAK6V,MAAQ,QAEb7V,KAAK6V,MAAQ,QAIO,UAAf7V,KAAK6V,QAEX,CACFvX,IAAK,OACLjB,MAAO,WAEN,IAAK2C,KAAK+W,UACT,MAAM,IAAI3X,MAAM,mBAIjB,IAAI0G,EAAS9F,KAAKwjB,WAGlB,OAFAxjB,KAAKwjB,WAAa,KAClBxjB,KAAK6V,MAAQ,YACN/P,MAIFkI,EA1H4C,I,0CCnGpD,IAAIyV,EAAa,EAAQ,KAA8C9jB,SAE7DoN,EAAO3P,QAAUqmB,GACV,QAAUA,G,iCCD3BvmB,OAAOC,eAAeC,EAAS,aAAc,CAC5CC,OAAO,IAERD,EAAQuC,aAAUL,EAElB,IAAIyK,EAAW7M,OAAO8M,QAAU,SAAUlM,GAAU,IAAK,IAAIE,EAAI,EAAGA,EAAIgF,UAAU/E,OAAQD,IAAK,CAAE,IAAIiM,EAASjH,UAAUhF,GAAI,IAAK,IAAIM,KAAO2L,EAAc/M,OAAOS,UAAUuM,eAAeC,KAAKF,EAAQ3L,KAAQR,EAAOQ,GAAO2L,EAAO3L,IAAY,OAAOR,GAEnPF,EAAe,WAAc,SAASC,EAAiBC,EAAQC,GAAS,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAME,OAAQD,IAAK,CAAE,IAAIE,EAAaH,EAAMC,GAAIE,EAAWC,WAAaD,EAAWC,aAAc,EAAOD,EAAWE,cAAe,EAAU,UAAWF,IAAYA,EAAWG,UAAW,GAAMnB,OAAOC,eAAeW,EAAQI,EAAWI,IAAKJ,IAAiB,OAAO,SAAUK,EAAaC,EAAYC,GAAiJ,OAA9HD,GAAYX,EAAiBU,EAAYZ,UAAWa,GAAiBC,GAAaZ,EAAiBU,EAAaE,GAAqBF,GAA7gB,GAEfmlB,EAAS,EAAQ,IAEjBlF,EAAUrY,EAAuBud,GAIjCzgB,EAAakD,EAFD,EAAQ,MAMpBwd,EAAqBxd,EAFD,EAAQ,MAIhC,SAASA,EAAuB1I,GAAO,OAAOA,GAAOA,EAAIiC,WAAajC,EAAM,CAAEkC,QAASlC,GAIvF,SAASmhB,EAA2BC,EAAM1U,GAAQ,IAAK0U,EAAQ,MAAM,IAAIC,eAAe,6DAAgE,OAAO3U,GAAyB,iBAATA,GAAqC,mBAATA,EAA8B0U,EAAP1U,EAIlO,IAAIyZ,EAAkC,SAAUC,GAG/C,SAASD,IACR,IAAIhc,EAEAqX,EAAOze,GAZb,SAAyBX,EAAUtB,GAAe,KAAMsB,aAAoBtB,GAAgB,MAAM,IAAIuB,UAAU,qCAc9GF,CAAgBI,KAAM4jB,GAEtB,IAAK,IAAI1E,EAAOlc,UAAU/E,OAAQiN,EAAOzD,MAAMyX,GAAOC,EAAO,EAAGA,EAAOD,EAAMC,IAC5EjU,EAAKiU,GAAQnc,UAAUmc,GAGxB,OAAeF,EAASze,EAAQoe,EAA2B5e,MAAO4H,EAAOgc,EAAgCxE,WAAaliB,OAAOmiB,eAAeuE,IAAkCzZ,KAAKmV,MAAM1X,EAAM,CAAC5H,MAAMuf,OAAOrU,KAAiB1K,EAAMsjB,cAAgB,SAAUnD,GAC7P,OAAOngB,EAAM6H,MAAQsY,GACX/B,EAA2Bpe,EAAnCye,GAoBJ,OAtCD,SAAmBiB,EAAUC,GAAc,GAA0B,mBAAfA,GAA4C,OAAfA,EAAuB,MAAM,IAAIrgB,UAAU,kEAAoEqgB,GAAeD,EAASviB,UAAYT,OAAOkV,OAAO+N,GAAcA,EAAWxiB,UAAW,CAAED,YAAa,CAAEL,MAAO6iB,EAAU/hB,YAAY,EAAOE,UAAU,EAAMD,cAAc,KAAe+hB,IAAYjjB,OAAOkjB,eAAiBljB,OAAOkjB,eAAeF,EAAUC,GAAcD,EAASd,UAAYe,GAGheE,CAAUuD,EAoCTF,EAAOpG,WAlBR1f,EAAagmB,EAAiC,CAAC,CAC9CtlB,IAAK,SACLjB,MAAO,WACN,OAAOmhB,EAAQ7e,QAAQ+gB,cAAciD,EAAmBhkB,QAASoK,EAAS,GAAI/J,KAAKjC,MAAO,CACzF4iB,IAAK3gB,KAAK8jB,cACVjlB,SAAUoE,EAAWtD,aAKrB,CACFrB,IAAK,QACLjB,MAAO,WACN,OAAO2C,KAAKqI,MAAMwY,YAIb+C,EApC8B,GAuCtCxmB,EAAQuC,QAAUikB,G,8u/ECpElB1mB,OAAOC,eAAeC,EAAS,aAAc,CAC5CC,OAAO,IAERD,EAAQuC,aAAUL,EAElB,IAIIgf,EAAQC,EAJRxU,EAAW7M,OAAO8M,QAAU,SAAUlM,GAAU,IAAK,IAAIE,EAAI,EAAGA,EAAIgF,UAAU/E,OAAQD,IAAK,CAAE,IAAIiM,EAASjH,UAAUhF,GAAI,IAAK,IAAIM,KAAO2L,EAAc/M,OAAOS,UAAUuM,eAAeC,KAAKF,EAAQ3L,KAAQR,EAAOQ,GAAO2L,EAAO3L,IAAY,OAAOR,GAEnPF,EAAe,WAAc,SAASC,EAAiBC,EAAQC,GAAS,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAME,OAAQD,IAAK,CAAE,IAAIE,EAAaH,EAAMC,GAAIE,EAAWC,WAAaD,EAAWC,aAAc,EAAOD,EAAWE,cAAe,EAAU,UAAWF,IAAYA,EAAWG,UAAW,GAAMnB,OAAOC,eAAeW,EAAQI,EAAWI,IAAKJ,IAAiB,OAAO,SAAUK,EAAaC,EAAYC,GAAiJ,OAA9HD,GAAYX,EAAiBU,EAAYZ,UAAWa,GAAiBC,GAAaZ,EAAiBU,EAAaE,GAAqBF,GAA7gB,GAIfmlB,EAAS,EAAQ,IAEjBlF,EAAUrY,EAAuBud,GAIjCjF,EAActY,EAFD,EAAQ,MAMrB4d,EAAe5d,EAFD,EAAQ,KAMtB6d,EAAe7d,EAFD,EAAQ,MAMtB8d,EAAwB9d,EAFD,EAAQ,MAInC,SAASA,EAAuB1I,GAAO,OAAOA,GAAOA,EAAIiC,WAAajC,EAAM,CAAEkC,QAASlC,GAIvF,SAASmhB,EAA2BC,EAAM1U,GAAQ,IAAK0U,EAAQ,MAAM,IAAIC,eAAe,6DAAgE,OAAO3U,GAAyB,iBAATA,GAAqC,mBAATA,EAA8B0U,EAAP1U,EAIlO,IAAI+Z,GAAoB3F,EAASD,EAAS,SAAUuF,GAGnD,SAASK,IACR,IAAItc,EAEAqX,EAAOze,GAZb,SAAyBX,EAAUtB,GAAe,KAAMsB,aAAoBtB,GAAgB,MAAM,IAAIuB,UAAU,qCAc9GF,CAAgBI,KAAMkkB,GAEtB,IAAK,IAAIhF,EAAOlc,UAAU/E,OAAQiN,EAAOzD,MAAMyX,GAAOC,EAAO,EAAGA,EAAOD,EAAMC,IAC5EjU,EAAKiU,GAAQnc,UAAUmc,GAGxB,OAAeF,EAASze,EAAQoe,EAA2B5e,MAAO4H,EAAOsc,EAAiB9E,WAAaliB,OAAOmiB,eAAe6E,IAAmB/Z,KAAKmV,MAAM1X,EAAM,CAAC5H,MAAMuf,OAAOrU,KAAiB1K,EAAMsjB,cAAgB,SAAUnD,GAC/N,OAAOngB,EAAM6H,MAAQsY,GACnBngB,EAAM2jB,kBAAoB,SAAUnU,GACtC,IAAIoU,EAAWpU,EAAMoU,SACjBC,EAAUrU,EAAMqU,QAEpB,OAAO,EAAIN,EAAapkB,SAExB,0CAA2C,CAC1C,4CAA6CykB,EAC7C,2CAA4CC,KAEnCzF,EAA2Bpe,EAAnCye,GAsBJ,OAlDD,SAAmBiB,EAAUC,GAAc,GAA0B,mBAAfA,GAA4C,OAAfA,EAAuB,MAAM,IAAIrgB,UAAU,kEAAoEqgB,GAAeD,EAASviB,UAAYT,OAAOkV,OAAO+N,GAAcA,EAAWxiB,UAAW,CAAED,YAAa,CAAEL,MAAO6iB,EAAU/hB,YAAY,EAAOE,UAAU,EAAMD,cAAc,KAAe+hB,IAAYjjB,OAAOkjB,eAAiBljB,OAAOkjB,eAAeF,EAAUC,GAAcD,EAASd,UAAYe,GAGheE,CAAU6D,EAgDTR,EAAOpG,WApBR1f,EAAasmB,EAAkB,CAAC,CAC/B5lB,IAAK,SACLjB,MAAO,WACN,OAAOmhB,EAAQ7e,QAAQ+gB,cAAcsD,EAAarkB,QAASoK,EAAS,GAAI/J,KAAKjC,MAAO,CACnF4iB,IAAK3gB,KAAK8jB,cACVK,kBAAmBnkB,KAAKmkB,kBACxBG,uBAAwBL,EAAsBtkB,QAC9C4kB,wBAAyBA,OAEzB,CACFjmB,IAAK,QAILjB,MAAO,WACN,OAAO2C,KAAKqI,MAAMwY,YAIbqD,EAhDkC,GAiDrB5F,EAAOwC,UAAY,CAEvC0D,4BAA6B/F,EAAY9e,QAAQohB,MAC/CxC,GACHnhB,EAAQuC,QAAUukB,EAGlB,IAAIK,EAA0B,CAC7BC,4BAA6B,yB,iCChG9BtnB,OAAOC,eAAeC,EAAS,aAAc,CAC5CC,OAAO,IAERD,EAAQuC,aAAUL,EAElB,IAIIgf,EAAQmG,EAASxF,EAAOyF,EAJxB3a,EAAW7M,OAAO8M,QAAU,SAAUlM,GAAU,IAAK,IAAIE,EAAI,EAAGA,EAAIgF,UAAU/E,OAAQD,IAAK,CAAE,IAAIiM,EAASjH,UAAUhF,GAAI,IAAK,IAAIM,KAAO2L,EAAc/M,OAAOS,UAAUuM,eAAeC,KAAKF,EAAQ3L,KAAQR,EAAOQ,GAAO2L,EAAO3L,IAAY,OAAOR,GAEnPF,EAAe,WAAc,SAASC,EAAiBC,EAAQC,GAAS,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAME,OAAQD,IAAK,CAAE,IAAIE,EAAaH,EAAMC,GAAIE,EAAWC,WAAaD,EAAWC,aAAc,EAAOD,EAAWE,cAAe,EAAU,UAAWF,IAAYA,EAAWG,UAAW,GAAMnB,OAAOC,eAAeW,EAAQI,EAAWI,IAAKJ,IAAiB,OAAO,SAAUK,EAAaC,EAAYC,GAAiJ,OAA9HD,GAAYX,EAAiBU,EAAYZ,UAAWa,GAAiBC,GAAaZ,EAAiBU,EAAaE,GAAqBF,GAA7gB,GAOfmlB,EAAS,EAAQ,IAEjBlF,EAAUrY,EAAuBud,GAIjCjF,EAActY,EAFD,EAAQ,MAIrBwe,EAAyB,EAAQ,KAIjCZ,EAAe5d,EAFD,EAAQ,KAMtBye,EAAeze,EAFD,EAAQ,MAMtB0e,EAAe1e,EAFD,EAAQ,MAMtB2e,EAAsB3e,EAFD,EAAQ,MAM7B4e,EAAS5e,EAFD,EAAQ,MAIhBwY,EAAgB,EAAQ,KAIxBqG,EAAY7e,EAFD,EAAQ,MAInB8e,EAAa,EAAQ,KAEzB,SAAS9e,EAAuB1I,GAAO,OAAOA,GAAOA,EAAIiC,WAAajC,EAAM,CAAEkC,QAASlC,GAYvF,IAAIynB,GAAmB,EAAIP,EAAuBtH,WAAoB4B,EAAQwF,EAAU,SAAUU,GAGjG,SAASD,EAAiBnnB,IAX3B,SAAyB8B,EAAUtB,GAAe,KAAMsB,aAAoBtB,GAAgB,MAAM,IAAIuB,UAAU,qCAY9GF,CAAgBI,KAAMklB,GAEtB,IAAI1kB,EAZN,SAAoCqe,EAAM1U,GAAQ,IAAK0U,EAAQ,MAAM,IAAIC,eAAe,6DAAgE,OAAO3U,GAAyB,iBAATA,GAAqC,mBAATA,EAA8B0U,EAAP1U,EAYpNyU,CAA2B5e,MAAOklB,EAAiB9F,WAAaliB,OAAOmiB,eAAe6F,IAAmB/a,KAAKnK,KAAMjC,IAEhI2mB,EAAiBva,KAAK3J,GAEtB,IAAIkf,EAAclf,EAAMzC,MACpBV,EAAQqiB,EAAYriB,MACpBuB,EAAU8gB,EAAY9gB,QACtBW,EAAYmgB,EAAYngB,UACxB6lB,EAAS1F,EAAY0F,OACrBC,EAAgB3F,EAAY2F,cAC5BxmB,EAAW6gB,EAAY7gB,SAI3B,GAA6C,mBAAlC2B,EAAMzC,MAAMunB,kBACtB,MAAM,IAAIlmB,MAAM,gSAGjB,IAAImmB,GAAgB,EAAI5G,EAAc1R,kBAAkB5P,EAAOwB,GAE3D2mB,GAAuB,EAAI7G,EAAc8G,uBAAuBF,EAAe3mB,EAASW,IAAa,EAAI0lB,EAAWS,iBAAiBN,GAASC,EAAexmB,GAiCjK,OA/BA2B,EAAMqV,MAAQ,CAEb9X,MAAOyC,EAAMzC,MAGba,QAAS4mB,EAGTG,uBAAwBC,EAAgCplB,EAAMzC,OAY9D8nB,aAAcC,EAAoBzoB,EAAOkoB,EAAe/kB,EAAMzC,OAS9DV,MAAOA,GAEDmD,EAwOR,OAvSD,SAAmB0f,EAAUC,GAAc,GAA0B,mBAAfA,GAA4C,OAAfA,EAAuB,MAAM,IAAIrgB,UAAU,kEAAoEqgB,GAAeD,EAASviB,UAAYT,OAAOkV,OAAO+N,GAAcA,EAAWxiB,UAAW,CAAED,YAAa,CAAEL,MAAO6iB,EAAU/hB,YAAY,EAAOE,UAAU,EAAMD,cAAc,KAAe+hB,IAAYjjB,OAAOkjB,eAAiBljB,OAAOkjB,eAAeF,EAAUC,GAAcD,EAASd,UAAYe,GAKheE,CAAU6E,EAmSTxB,EAAOqC,eA1MRnoB,EAAasnB,EAAkB,CAAC,CAC/B5mB,IAAK,kBAOLjB,MAAO,SAAyB2oB,GAC/B,IAAIC,EAAkBjmB,KAAKjC,MAAMkoB,gBAC7BrnB,EAAUoB,KAAK6V,MAAMjX,QAGrBqnB,GAAmBD,IAAgBpnB,GACtCqnB,EAAgBD,KAMhB,CACF1nB,IAAK,SACLjB,MAAO,WACN,IAAIijB,EAAStgB,KAAKjC,MACdgS,EAAOuQ,EAAOvQ,KACdqU,EAAW9D,EAAO8D,SAClB8B,EAAe5F,EAAO4F,aACtBC,EAAwB7F,EAAO6F,sBAC/BC,EAAoB9F,EAAO8F,kBAC3BC,EAAQ/F,EAAO+F,MACfC,EAAYhG,EAAOgG,UACnBC,EAAiBjG,EAAOiG,eACxBpC,EAAoB7D,EAAO6D,kBAC3BI,EAA0BjE,EAAOiE,wBACjCiC,EAAQlG,EAAOkG,MACfC,EAAkBnG,EAAOmG,gBACzBC,EAAyBpG,EAAOgE,uBAChC/D,EAAiBD,EAAOC,eACxBoG,EAAarG,EAAOqG,WACpB3nB,EAAMshB,EAAOthB,IAEbomB,GADY9E,EAAO/gB,UACV+gB,EAAO8E,QAWhBvmB,GAVIyhB,EAAO1hB,QACH0hB,EAAOsG,MACCtG,EAAOuG,cACXvG,EAAOwG,UACHxG,EAAO+E,cACH/E,EAAOgF,kBACQhF,EAAOyG,iCACxBzG,EAAO2F,gBACW3F,EAAO0G,kCAClC1G,EAAO2G,OACL3G,EAAOzhB,UAClBqoB,EAzJP,SAAkCzpB,EAAK2E,GAAQ,IAAItE,EAAS,GAAI,IAAK,IAAIE,KAAKP,EAAW2E,EAAKiB,QAAQrF,IAAM,GAAkBd,OAAOS,UAAUuM,eAAeC,KAAK1M,EAAKO,KAAcF,EAAOE,GAAKP,EAAIO,IAAM,OAAOF,EAyJpL2iB,CAAyBH,EAAQ,CAAC,OAAQ,WAAY,eAAgB,wBAAyB,oBAAqB,QAAS,YAAa,iBAAkB,oBAAqB,0BAA2B,QAAS,kBAAmB,yBAA0B,iBAAkB,aAAc,MAAO,YAAa,SAAU,UAAW,QAAS,gBAAiB,YAAa,gBAAiB,oBAAqB,mCAAoC,kBAAmB,oCAAqC,SAAU,aAEthB6G,EAASnnB,KAAK6V,MACdjX,EAAUuoB,EAAOvoB,QACjBwoB,EAAsBD,EAAOC,oBAC7BzB,EAAyBwB,EAAOxB,uBAChCE,EAAesB,EAAOtB,aAGtBwB,EAAiB9G,IAAmBoG,EAAa/B,EAAajlB,QAAUklB,EAAallB,SAIrF2nB,EAAsB,GAC1B,GAAI/C,EACH,IAAK,IAAIjmB,KAAOimB,EACXvkB,KAAKjC,MAAMmM,eAAe5L,KAC7BgpB,EAAoB/C,EAAwBjmB,IAAQ0B,KAAKjC,MAAMO,UACxD4oB,EAAsB5oB,IAKhC,OAAOkgB,EAAQ7e,QAAQ+gB,cACtB,MACA,CACC2F,MAAOA,EACPC,WAAW,EAAIvC,EAAapkB,SAAS,2BAA4B,CAChE,oCAAqC6mB,GAASC,GAC5CH,IACJ9H,EAAQ7e,QAAQ+gB,cACf,MACA,CAAE4F,UAAW,iCACbF,GAAqB5H,EAAQ7e,QAAQ+gB,cAAcgG,EAAwB3c,EAAS,GAAIud,EAAqB,CAC5G3G,IAAK3gB,KAAKunB,2BACVxX,KAAMA,EAAOA,EAAO,iBAAczQ,EAClCjC,MAAOuB,EACPmE,QAAS4iB,EACT5c,SAAU/I,KAAKwnB,kBACfpD,SAAUA,EACVqD,SAAUtB,EACViB,oBAAqBpnB,KAAKonB,oBAC1BM,qBAAsB1nB,KAAK6gB,MAC3ByF,UAAW,wCACXc,GAAuB5I,EAAQ7e,QAAQ+gB,cAAc2G,EAAgBtd,EAAS,CAC9E9H,KAAM,MACN8N,KAAMA,GACJmX,EAAuB,CACzBvG,IAAK3gB,KAAK2nB,8BACV9oB,SAAUA,EACVD,QAASA,EACTvB,MAAOwoB,GAAgB,GACvB9c,SAAU/I,KAAK+I,SACf8W,OAAQ7f,KAAK6f,OACb7W,UAAWhJ,KAAK4nB,qBAChBxD,SAAUA,EACV8B,aAAcA,EACdI,WAAW,EAAIvC,EAAapkB,SAAS,kCAMrC4mB,EAAgBpC,GAAqBA,EAAkB,CAAEC,SAAUA,EAAUC,QAASmC,GAASC,QAChGznB,IAAQooB,GAAuB5I,EAAQ7e,QAAQ+gB,cAC9C,QACA,CAAE4F,UAAW,iCACblB,EAAOpmB,IACPwf,EAAQ7e,QAAQkoB,aAAa7oB,EAAK,CACjCiD,UAAyB3C,IAAnBN,EAAIjB,MAAMkE,KAAqB,SAAWjD,EAAIjB,MAAMkE,KAC1DqkB,WAAW,EAAIvC,EAAapkB,SAAS,sCAKrC4mB,EAAgBpC,GAAqBA,EAAkB,CAAEC,SAAUA,IAAaplB,EAAIjB,MAAMuoB,eAI7FE,GAASC,GAAmBjI,EAAQ7e,QAAQ+gB,cAC3C,MACA,CAAE4F,WAAW,EAAIvC,EAAapkB,SAAS,kCAAmC,sBAC1E6mB,OAIA,CAAC,CACJloB,IAAK,2BACLjB,MAAO,SAAkCU,EAAO8X,GAC/C,IAAIjX,EAAUiX,EAAMjX,QAChBkpB,EAAoBjS,EAAMiS,kBAC1BzqB,EAAQwY,EAAMxY,MACd0qB,EAAelS,EAAM9X,MACrBiqB,EAAsBD,EAAanpB,QACnCqpB,EAAYF,EAAa1qB,MACzBwB,EAAWd,EAAMc,SACjBqpB,EAAsBnqB,EAAMa,QAC5BupB,EAAYpqB,EAAMV,MAIlB+qB,EAAY,CAAErqB,MAAOA,GAezB,GAXMA,EAAMwB,YAAcsW,EAAM9X,MAAMwB,WAAaxB,EAAMqnB,SAAWvP,EAAM9X,MAAMqnB,QAAUrnB,EAAMsnB,gBAAkBxP,EAAM9X,MAAMsnB,gBAC7H+C,EAAUzC,uBAAyBC,EAAgC7nB,MAUhEmqB,IAAwBF,GAAwBF,GAAsBzqB,GAAU8qB,GACnF,OAAOpe,EAAS,GAAIqe,EAAW,CAC9BxpB,QAASspB,IAcN,GAAIC,IAAcF,GAAaE,IAAc9qB,EAAO,CACvD,IAAIkoB,GAAgB,EAAI5G,EAAc1R,kBAAkBkb,EAAWtpB,GAEnE,OAAOkL,EAAS,GAAIqe,EAAW,CAC9BvC,aAAcC,EAAoBqC,EAAW5C,EAAexnB,GAC5DV,MAAO8qB,EACPvpB,QAASupB,EAAY5C,EAAc3mB,QAAUA,IAMhD,OAAOwpB,MAIFlD,EAnSgF,GAoS/DT,EAAQ3D,UAAY,CAG5CzjB,MAAOohB,EAAY9e,QAAQ6P,OAI3BzG,SAAU0V,EAAY9e,QAAQohB,KAAKC,WAGnCnB,OAAQpB,EAAY9e,QAAQohB,KAG5B/X,UAAWyV,EAAY9e,QAAQohB,KAM/BkF,gBAAiBxH,EAAY9e,QAAQohB,KAKrCqD,SAAU3F,EAAY9e,QAAQ0oB,KAAKrH,WAkBnCkF,aAAczH,EAAY9e,QAAQ6P,OAAOwR,WAKzC+F,iCAAkCtI,EAAY9e,QAAQ0oB,KAAKrH,WAI3DpiB,QAAS6f,EAAY9e,QAAQ6P,OAI7BjQ,UAAWkf,EAAY9e,QAAQ2oB,QAAQ7J,EAAY9e,QAAQ6P,QAI3D4V,OAAQ3G,EAAY9e,QAAQ4oB,SAAS9J,EAAY9e,QAAQ6P,QAAQwR,WASjE4F,MAAOnI,EAAY9e,QAAQ4oB,SAAS9J,EAAY9e,QAAQohB,MAGxD8F,cAAepI,EAAY9e,QAAQohB,KAAKC,WAIxC8F,UAAWrI,EAAY9e,QAAQ6P,OAAOwR,WAKtCqE,cAAe5G,EAAY9e,QAAQ0oB,KAGnC/C,kBAAmB7G,EAAY9e,QAAQohB,KAAKC,WAI5CoF,kBAAmB3H,EAAY9e,QAAQ0oB,KAAKrH,WAG5CmF,sBAAuB1H,EAAY9e,QAAQ6D,OAG3C6iB,MAAO5H,EAAY9e,QAAQ6oB,OAG3BlC,UAAW7H,EAAY9e,QAAQ6P,OAK/B+W,eAAgB9H,EAAY9e,QAAQ6P,OAIpC2U,kBAAmB1F,EAAY9e,QAAQohB,KAmBvCuD,uBAAwB7F,EAAY9e,QAAQohB,KAAKC,WAcjDT,eAAgB9B,EAAY9e,QAAQohB,KAKpC4F,WAAYlI,EAAY9e,QAAQ0oB,KAAKrH,WAKrCgG,kCAAmCvI,EAAY9e,QAAQ0oB,KAAKrH,WAG5DhiB,IAAKyf,EAAY9e,QAAQ8oB,KAGzBjC,MAAO/H,EAAY9e,QAAQ6P,OAG3BiX,gBAAiBhI,EAAY9e,QAAQ0oB,KAGrCpB,OAAQxI,EAAY9e,QAAQ4oB,SAAS9J,EAAY9e,QAAQ6P,QAGzD3Q,SAAU4f,EAAY9e,QAAQ+oB,MAAM,CACnClnB,sBAAuBid,EAAY9e,QAAQ6oB,OAAOxH,WAClDzhB,UAAWkf,EAAY9e,QAAQ6oB,OAAOxH,aACpCA,YACDyD,EAAQxD,aAAe,CAEzBmD,UAAU,EAGV8B,aAAc,MAEdd,OAAQJ,EAAUrlB,QAGlBknB,cAAe9B,EAAOplB,QAGtBmnB,UAAW,mDAGXxB,kBAAmBR,EAAoBnlB,QAGvCymB,mBAAmB,EASnBW,kCAAkC,EAKlCJ,YAAY,EAIZK,mCAAmC,GACjCtC,EAAmB,WACrB,IAAIiE,EAAS3oB,KAEbA,KAAKwnB,kBAAoB,SAAUxB,GAClC,IAAI4C,EAAUD,EAAO5qB,MACjBc,EAAW+pB,EAAQ/pB,SACnBkK,EAAW6f,EAAQ7f,SACnBie,EAAoC4B,EAAQ5B,kCAC5C6B,EAAUF,EAAO9S,MACjBiT,EAAmBD,EAAQhD,aAC3BkD,EAAcF,EAAQjqB,QAMtBoqB,GAAmB,EAAIrK,EAAcsK,iCAAiCH,EAAkBC,EAAa/C,EAAannB,GAElHspB,GAAY,EAAIxJ,EAAcuK,MAAMF,EAAkBhD,EAAannB,GAEvE8pB,EAAO1C,gBAAgBD,GAIlBgB,GACJ2B,EAAO9H,QAGR8H,EAAOjM,SAAS,CACf9d,QAASonB,EACT8B,mBAAmB,EACnBjC,aAAcmD,EACd3rB,MAAO8qB,GACL,WAKFpf,EAASof,GAKLnB,GACH2B,EAAO9H,WAKV7gB,KAAK4nB,qBAAuB,SAAUxf,GACrC,IAAIY,EAAY2f,EAAO5qB,MAAMiL,UASzBA,GACHA,EAAUZ,IAIZpI,KAAK+I,SAAW,SAAU8c,GACzB,IAAIsD,EAAUR,EAAO5qB,MACjBgL,EAAWogB,EAAQpgB,SACnBxJ,EAAY4pB,EAAQ5pB,UACpB8lB,EAAgB8D,EAAQ9D,cACxBxmB,EAAWsqB,EAAQtqB,SACnBD,EAAU+pB,EAAO9S,MAAMjX,QAGvBinB,IAIqB,MAApBA,EAAa,IAChBjnB,GAAU,EAAI+f,EAAcyK,0BAA0BvD,EAAcjnB,EAASW,EAAW8lB,EAAexmB,GAEvG8pB,EAAO1C,gBAAgBrnB,IAMdA,IACRinB,EAAe,IAAMA,IAKxB,IAAIxoB,GAAQ,EAAIshB,EAAcuK,MAAMrD,EAAcjnB,EAASC,GAE3D8pB,EAAOjM,SAAS,CACfmJ,aAAcA,EACdxoB,MAAOA,EACPuB,QAASA,GAMV,WACC,OAAOmK,EAAS1L,MAIlB2C,KAAK6f,OAAS,SAAUzX,GACvB,IAAIyX,EAAS8I,EAAO5qB,MAAM8hB,OACtBxiB,EAAQsrB,EAAO9S,MAAMxY,MAGzB,GAAKwiB,EAAL,CAMA,IAAIE,EAAShW,EAAS,GAAI3B,EAAO,CAChCtK,OAAQiM,EAAS,GAAI3B,EAAMtK,OAAQ,CAClCT,MAAOA,MAQT,OAHG0iB,EAAOC,gBAAkB5X,EAAM4X,gBAClCD,EAAO5W,eAAiBf,EAAMe,eAEvB0W,EAAOE,KAGf/f,KAAKonB,oBAAsB,SAAUiC,GACpCV,EAAOjM,SAAS,CACf0K,oBAAqBiC,KAIvBrpB,KAAK6gB,MAAQ,WACZ,OAAO8H,EAAOW,aAAazI,SAG5B7gB,KAAKunB,2BAA6B,SAAU1mB,GAC3C,OAAO8nB,EAAOY,eAAiB1oB,GAGhCb,KAAK2nB,8BAAgC,SAAU9mB,GAC9C,OAAO8nB,EAAOW,aAAezoB,IApoB6Byd,EAsoBzDW,KAAWX,EAMd,SAASsH,EAAgC7nB,GACxC,IAAIwB,EAAYxB,EAAMwB,UAClB6lB,EAASrnB,EAAMqnB,OACfC,EAAgBtnB,EAAMsnB,cAG1B,OAAO,EAAI1G,EAAc6K,yBAAyBjqB,IAAa,EAAI0lB,EAAWS,iBAAiBN,GAASA,EAAQC,EAAeL,EAAUrlB,SAASiB,IAAI,SAAUgH,GAC/J,IAAIvK,EAAQuK,EAAKvK,MACbosB,EAAQ7hB,EAAK6hB,MACjB,MAAO,CACNpsB,MAAOA,EACPosB,MAAOA,EACPC,KAAMC,EAAuCtsB,EAAOosB,EAAO1rB,MAK9D,SAAS4rB,EAAuCtsB,EAAOosB,EAAO1rB,GAC7D,IAAI6oB,EAAQ7oB,EAAM6oB,MACdE,EAAY/oB,EAAM+oB,UAClB8C,EAAgB7rB,EAAM8oB,cACtBgD,EAAoB9rB,EAAMunB,kBAG9B,OAAIjoB,EACI,SAAUU,GAChB,OAAOygB,EAAQ7e,QAAQ+gB,cAAckJ,EAAe,CACnDhrB,QAASvB,EACTupB,MAAOA,EACPE,UAAWA,EACXR,UAAWvoB,EAAQA,EAAMuoB,eAAYhnB,KAIjC,SAAUvB,GAChB,OAAOygB,EAAQ7e,QAAQ+gB,cACtB,MACA,CACC4F,WAAW,EAAIvC,EAAapkB,SAAS,iCAAkC,gDAAiD5B,GAASA,EAAMuoB,YACxI9H,EAAQ7e,QAAQ+gB,cAAcmJ,EAAmB,QAKpD,SAAS/D,EAAoBzoB,EAAOkoB,EAAexnB,GAClD,IAAIgpB,EAAmChpB,EAAMgpB,iCACzCloB,EAAWd,EAAMc,SASrB,OAAIkoB,GAAoCxB,EAAc3mB,SAC9C,EAAI+f,EAAcmL,8BAA8BvE,EAAe1mB,GAGhExB,EA5DRD,EAAQuC,QAAUulB,G,iCC3sBlBhoB,OAAOC,eAAeC,EAAS,aAAc,CAC5CC,OAAO,IAERD,EAAQuC,aAAUL,EAElB,IAAIyK,EAAW7M,OAAO8M,QAAU,SAAUlM,GAAU,IAAK,IAAIE,EAAI,EAAGA,EAAIgF,UAAU/E,OAAQD,IAAK,CAAE,IAAIiM,EAASjH,UAAUhF,GAAI,IAAK,IAAIM,KAAO2L,EAAc/M,OAAOS,UAAUuM,eAAeC,KAAKF,EAAQ3L,KAAQR,EAAOQ,GAAO2L,EAAO3L,IAAY,OAAOR,GAEnPF,EAAe,WAAc,SAASC,EAAiBC,EAAQC,GAAS,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAME,OAAQD,IAAK,CAAE,IAAIE,EAAaH,EAAMC,GAAIE,EAAWC,WAAaD,EAAWC,aAAc,EAAOD,EAAWE,cAAe,EAAU,UAAWF,IAAYA,EAAWG,UAAW,GAAMnB,OAAOC,eAAeW,EAAQI,EAAWI,IAAKJ,IAAiB,OAAO,SAAUK,EAAaC,EAAYC,GAAiJ,OAA9HD,GAAYX,EAAiBU,EAAYZ,UAAWa,GAAiBC,GAAaZ,EAAiBU,EAAaE,GAAqBF,GAA7gB,GAEfmlB,EAAS,EAAQ,IAEjBlF,EAAUrY,EAAuBud,GAEjCqG,EAAe,EAAQ,KAEvBC,EAAU,EAAQ,KAIlBC,EAAsB9jB,EAFD,EAAQ,MAIjC,SAASA,EAAuB1I,GAAO,OAAOA,GAAOA,EAAIiC,WAAajC,EAAM,CAAEkC,QAASlC,GAMvF,SAASmhB,EAA2BC,EAAM1U,GAAQ,IAAK0U,EAAQ,MAAM,IAAIC,eAAe,6DAAgE,OAAO3U,GAAyB,iBAATA,GAAqC,mBAATA,EAA8B0U,EAAP1U,EAQlO,IAAI+f,EAAa,SAAUrG,GAG1B,SAASqG,IACR,IAAItiB,EAEAqX,EAAOze,GAhBb,SAAyBX,EAAUtB,GAAe,KAAMsB,aAAoBtB,GAAgB,MAAM,IAAIuB,UAAU,qCAkB9GF,CAAgBI,KAAMkqB,GAEtB,IAAK,IAAIhL,EAAOlc,UAAU/E,OAAQiN,EAAOzD,MAAMyX,GAAOC,EAAO,EAAGA,EAAOD,EAAMC,IAC5EjU,EAAKiU,GAAQnc,UAAUmc,GAGxB,OAAeF,EAASze,EAAQoe,EAA2B5e,MAAO4H,EAAOsiB,EAAW9K,WAAaliB,OAAOmiB,eAAe6K,IAAa/f,KAAKmV,MAAM1X,EAAM,CAAC5H,MAAMuf,OAAOrU,KAAiB1K,EAAMqgB,MAAQ,WACjM,OAAOrgB,EAAM6H,MAAMwY,SACjBrgB,EAAM2pB,WAAa,SAAUxJ,GAC/B,OAAOngB,EAAM6H,MAAQsY,GACnBngB,EAAMkB,OAAS,SAAUrE,GAC3B,IAAIqiB,EAAclf,EAAMzC,MACpBa,EAAU8gB,EAAY9gB,QACtBC,EAAW6gB,EAAY7gB,SAG3B,OAAO,EAAIorB,EAAoBtqB,SAAStC,EAAOuB,EAASC,IAC9C+f,EAA2Bpe,EAAnCye,GAkBJ,OAjDD,SAAmBiB,EAAUC,GAAc,GAA0B,mBAAfA,GAA4C,OAAfA,EAAuB,MAAM,IAAIrgB,UAAU,kEAAoEqgB,GAAeD,EAASviB,UAAYT,OAAOkV,OAAO+N,GAAcA,EAAWxiB,UAAW,CAAED,YAAa,CAAEL,MAAO6iB,EAAU/hB,YAAY,EAAOE,UAAU,EAAMD,cAAc,KAAe+hB,IAAYjjB,OAAOkjB,eAAiBljB,OAAOkjB,eAAeF,EAAUC,GAAcD,EAASd,UAAYe,GAOheE,CAAU6J,EA2CTxG,EAAOpG,WAhBR1f,EAAassB,EAAY,CAAC,CACzB5rB,IAAK,SACLjB,MAAO,WACN,IAAIijB,EAAStgB,KAAKjC,MAGdyiB,GAFUF,EAAO1hB,QACN0hB,EAAOzhB,SA7CzB,SAAkCpB,EAAK2E,GAAQ,IAAItE,EAAS,GAAI,IAAK,IAAIE,KAAKP,EAAW2E,EAAKiB,QAAQrF,IAAM,GAAkBd,OAAOS,UAAUuM,eAAeC,KAAK1M,EAAKO,KAAcF,EAAOE,GAAKP,EAAIO,IAAM,OAAOF,EA8CrM2iB,CAAyBH,EAAQ,CAAC,UAAW,cAExD,OAAO9B,EAAQ7e,QAAQ+gB,cAAcqJ,EAAahL,WAAYhV,EAAS,GAAIyW,EAAM,CAChFG,IAAK3gB,KAAKmqB,WACVhd,MAAO6c,EAAQ5b,0BACf1M,OAAQ1B,KAAK0B,cAITwoB,EA3CS,GA8CjB9sB,EAAQuC,QAAUuqB,G,iCCnFlB,ulB,iCCEAhtB,OAAOC,eAAeC,EAAS,aAAc,CAC5CC,OAAO,IAERD,EAAQuC,QAIR,SAAsByX,EAAmBjG,GACxC,IAAIC,EAAcpO,UAAU/E,OAAS,QAAsBqB,IAAjB0D,UAAU,GAAmBA,UAAU,GAAK,IAClFonB,EAAoBpnB,UAAU/E,OAAS,QAAsBqB,IAAjB0D,UAAU,GAAmBA,UAAU,GAAK,IAExFmU,EAAaC,EAAkBnZ,OAE/BoZ,GAAiB,EAAI9F,EAASP,kBAAkB,IAAKoG,GACrDE,GAAiB,EAAI/F,EAASP,kBAAkB,IAAKoG,GAErDG,EAAkBF,EAAiBC,EAEvC,KAAOC,EAAkB,GAAKJ,EAAahG,EAASlT,QACnDmZ,GAAqBjG,EAASgG,GAAYnV,QAAQoP,EAAagZ,GAElC,MAAzBjZ,EAASgG,IACZI,IAGDJ,IAGD,OAAOC,GAvBR,IAAI7F,EAAW,EAAQ,M,iCCLvBrU,OAAOC,eAAeC,EAAS,aAAc,CAC5CC,OAAO,IAERD,EAAQuC,QAiBR,SAActC,EAAOuM,EAAOX,GAC3B,OAAQA,GACP,IAAK,YAGAW,EAAQ,IAEXvM,EAAQA,EAAMuJ,MAAM,EAAGgD,EAAQ,GAAKvM,EAAMuJ,MAAMgD,GAEhDA,KAED,MAED,IAAK,SAEJvM,EAAQA,EAAMuJ,MAAM,EAAGgD,GAASvM,EAAMuJ,MAAMgD,EAAQ,GAItD,MAAO,CAAEvM,MAAOA,EAAOuM,MAAOA,K,iCCvC/B1M,OAAOC,eAAeC,EAAS,aAAc,CAC5CC,OAAO,IAERD,EAAQyL,aAKR,SAAsB2D,GAErB,GAAIA,EAAQ6d,iBAAmB7d,EAAQ8d,aACtC,OAGD,MAAO,CAAE/gB,MAAOiD,EAAQ6d,eAAgB7gB,IAAKgD,EAAQ8d,eAVtDltB,EAAQ8L,aAoBN,SAAsBd,GACvB,OAAQA,EAAMmiB,SACb,KAAKC,EAAKC,UACT,MAAO,YAER,KAAKD,EAAKE,OACT,MAAO,WAzBVttB,EAAQuM,iBA8BR,SAA0B6C,GACzB,OAAOA,EAAQ6d,gBA9BhBjtB,EAAQqM,iBAkCR,SAA0B+C,EAASE,GAElC,QAAuBpN,IAAnBoN,EACH,OAIDF,EAAQme,kBAAkBje,EAAgBA,IA7B3C,IAAI8d,EAAOptB,EAAQotB,KAAO,CACzBC,UAAW,EACXC,OAAQ,K,iCCpBTxtB,OAAOC,eAAeC,EAAS,aAAc,CACzCC,OAAO,IAEXD,EAAQuC,QAMR,SAAa0M,EAAGC,GAGZ,IAFA,IAAIse,EAAKve,EAAEoD,MAAM,KACbob,EAAKve,EAAEmD,MAAM,KACRzR,EAAI,EAAGA,EAAI,EAAGA,IAAK,CACxB,IAAI8sB,EAAKpV,OAAOkV,EAAG5sB,IACf+sB,EAAKrV,OAAOmV,EAAG7sB,IACnB,GAAI8sB,EAAKC,EAAI,OAAO,EACpB,GAAIA,EAAKD,EAAI,OAAQ,EACrB,IAAKE,MAAMF,IAAOE,MAAMD,GAAK,OAAO,EACpC,GAAIC,MAAMF,KAAQE,MAAMD,GAAK,OAAQ,EAEzC,OAAO,I,iCCpBX7tB,OAAOC,eAAeC,EAAS,aAAc,CAC5CC,OAAO,IAERD,EAAQuC,QAUR,WACC,IAAImL,GAAsB,EAAI4W,EAAkB3W,oBAAoB/H,WAChEF,EAAOgI,EAAoBhI,KAC3BC,EAAU+H,EAAoB/H,QAC9BlE,EAAWiM,EAAoBjM,SAEnC,OAAO,EAAIosB,EAA8BtrB,SAASmD,EAAMC,EAASlE,IAdlE,IAMgCpB,EAN5BikB,EAAoB,EAAQ,KAE5BwJ,EAA+B,EAAQ,KAEvCD,GAE4BxtB,EAF2BytB,IAENztB,EAAIiC,WAAajC,EAAM,CAAEkC,QAASlC,I,iCCXvFP,OAAOC,eAAeC,EAAS,aAAc,CAC5CC,OAAO,IAGR,IAAI0M,EAAW7M,OAAO8M,QAAU,SAAUlM,GAAU,IAAK,IAAIE,EAAI,EAAGA,EAAIgF,UAAU/E,OAAQD,IAAK,CAAE,IAAIiM,EAASjH,UAAUhF,GAAI,IAAK,IAAIM,KAAO2L,EAAc/M,OAAOS,UAAUuM,eAAeC,KAAKF,EAAQ3L,KAAQR,EAAOQ,GAAO2L,EAAO3L,IAAY,OAAOR,GAEvPV,EAAQuC,QAcR,SAAoCmD,EAAMC,EAASlE,GAE9CkE,GAAWA,EAAQG,kBAAmB,EAAIiJ,EAAU9M,oBAAoB0D,EAAQG,eAAgBrE,KACnGkE,EAAUgH,EAAS,GAAIhH,EAAS,CAC/BG,oBAAgB5D,KAIlB,IACC,OAAO,EAAI0L,EAAoBrL,SAASmD,EAAMC,EAASlE,GACtD,MAAO2nB,GAER,KAAIA,aAAiBrjB,EAAaxD,SAGjC,MAAM6mB,IA3BT,IAEIxb,EAAsB7E,EAFD,EAAQ,MAM7BhD,EAAegD,EAFD,EAAQ,MAItBgG,EAAY,EAAQ,KAExB,SAAShG,EAAuB1I,GAAO,OAAOA,GAAOA,EAAIiC,WAAajC,EAAM,CAAEkC,QAASlC,K,iCClBvFP,OAAOC,eAAeC,EAAS,aAAc,CAC5CC,OAAO,IAERD,EAAQuC,QAQR,SAA0Bf,EAASusB,EAAUtsB,GAC5C,GAAIssB,EAASvsB,GACZ,OAAO,IAAI+G,EAAchG,QAAQf,EAASusB,EAASvsB,GAAUC,IAR/D,IAIgCpB,EAJ5B2tB,EAAe,EAAQ,KAEvBzlB,GAE4BlI,EAFW2tB,IAEU3tB,EAAIiC,WAAajC,EAAM,CAAEkC,QAASlC,I,iCCTvFP,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQuC,QAwBR,WACE,IAAImL,GAAsB,EAAIugB,EAAetgB,oBAAoB/H,WAC7DqF,EAAQyC,EAAoBzC,MAC5BtF,EAAU+H,EAAoB/H,QAC9BlE,EAAWiM,EAAoBjM,SAEnC,OAAO,EAAIsR,EAAoBxQ,SAAS0I,EAAOtF,EAASlE,IA5B1D,IAMgCpB,EAN5B4tB,EAAiB,EAAQ,KAEzBplB,EAAqB,EAAQ,KAE7BkK,GAE4B1S,EAFiBwI,IAEIxI,EAAIiC,WAAajC,EAAM,CAAEkC,QAASlC,I,iCCXvFP,OAAOC,eAAeC,EAAS,aAAc,CAC5CC,OAAO,IAERD,EAAQuC,QAWR,WACC,IAAImL,GAAsB,EAAIugB,EAAetgB,oBAAoB/H,WAC7DqF,EAAQyC,EAAoBzC,MAC5BtF,EAAU+H,EAAoB/H,QAC9BlE,EAAWiM,EAAoBjM,SAEnC,OAAO,EAAIuR,EAAYzQ,SAAS0I,EAAOtF,EAASlE,IAfjD,IAMgCpB,EAN5BgkB,EAAa,EAAQ,KAErBrR,GAI4B3S,EAJSgkB,IAIYhkB,EAAIiC,WAAajC,EAAM,CAAEkC,QAASlC,GAFnF4tB,EAAiB,EAAQ,M,iCCT7BnuB,OAAOC,eAAeC,EAAS,aAAc,CAC5CC,OAAO,IAERD,EAAQuC,QAgBR,SAAgC6D,EAAQ5E,EAASC,GAChD,GAAsB,iBAAX2E,EACV,MAAM,IAAI1D,UAAU,2BAGrB,GAAuB,iBAAZlB,EACV,MAAM,IAAIkB,UAAU,4BAQrB,IAAIuI,OAAQ,EAEXA,GADG,EAAI3E,EAAsB/D,SAAS6D,IAC9B,EAAI0Q,EAASvU,SAAS6D,EAAQ,CAAEN,eAAgBtE,GAAWC,GAE3D,GAGT,OAAO,EAAIysB,EAA0B3rB,SAAS0I,EAAOzJ,OAASU,EAAWT,IAnC1E,IAEI6E,EAAwByC,EAFD,EAAQ,MAM/B+N,EAAW/N,EAFD,EAAQ,MAMlBmlB,EAA4BnlB,EAFD,EAAQ,MAIvC,SAASA,EAAuB1I,GAAO,OAAOA,GAAOA,EAAIiC,WAAajC,EAAM,CAAEkC,QAASlC,K,iCCjBvFP,OAAOC,eAAeC,EAAS,aAAc,CAC5CC,OAAO,IAERD,EAAQuC,QAUR,WACC,IAAImL,GAAsB,EAAI4W,EAAkB3W,oBAAoB/H,WAChEF,EAAOgI,EAAoBhI,KAC3BC,EAAU+H,EAAoB/H,QAC9BlE,EAAWiM,EAAoBjM,SAEnC,OAAO,EAAI0sB,EAAe5rB,SAASmD,EAAMC,EAASlE,IAdnD,IAMgCpB,EAN5B+tB,EAAgB,EAAQ,KAExBD,GAI4B9tB,EAJY+tB,IAIS/tB,EAAIiC,WAAajC,EAAM,CAAEkC,QAASlC,GAFnFikB,EAAoB,EAAQ,M,iCCThCxkB,OAAOC,eAAeC,EAAS,aAAc,CAC5CC,OAAO,IAERD,EAAQuC,QAQR,SAAqBmD,EAAMC,EAASlE,GACnC,IAAI4sB,EAAU,IAAIC,EAAqB/rB,QAAQmD,EAAMC,EAASlE,GAC1D8sB,EAAU,GACd,KAAOF,EAAQ1U,WACd4U,EAAQhhB,KAAK8gB,EAAQ5jB,QAEtB,OAAO8jB,GAZR,IAIgCluB,EAJ5BmuB,EAAsB,EAAQ,KAE9BF,GAE4BjuB,EAFkBmuB,IAEGnuB,EAAIiC,WAAajC,EAAM,CAAEkC,QAASlC,I,iCCTvFP,OAAOC,eAAeC,EAAS,aAAc,CAC5CC,OAAO,IAGR,IAMgCI,EAN5BG,EAAe,WAAc,SAASC,EAAiBC,EAAQC,GAAS,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAME,OAAQD,IAAK,CAAE,IAAIE,EAAaH,EAAMC,GAAIE,EAAWC,WAAaD,EAAWC,aAAc,EAAOD,EAAWE,cAAe,EAAU,UAAWF,IAAYA,EAAWG,UAAW,GAAMnB,OAAOC,eAAeW,EAAQI,EAAWI,IAAKJ,IAAiB,OAAO,SAAUK,EAAaC,EAAYC,GAAiJ,OAA9HD,GAAYX,EAAiBU,EAAYZ,UAAWa,GAAiBC,GAAaZ,EAAiBU,EAAaE,GAAqBF,GAA7gB,GAEfstB,EAAY,EAAQ,KAEpBC,GAE4BruB,EAFQouB,IAEapuB,EAAIiC,WAAajC,EAAM,CAAEkC,QAASlC,GAQvF,IAAIsuB,EAAc,WACjB,SAASA,EAAYC,IAPtB,SAAyBnsB,EAAUtB,GAAe,KAAMsB,aAAoBtB,GAAgB,MAAM,IAAIuB,UAAU,qCAQ9GF,CAAgBI,KAAM+rB,GAEtB/rB,KAAKisB,MAAQ,IAAIH,EAAWnsB,QAAQqsB,GAerC,OAZApuB,EAAamuB,EAAa,CAAC,CAC1BztB,IAAK,sBACLjB,MAAO,SAA6BsO,GACnC,IAAIugB,EAASlsB,KAAKisB,MAAM/K,IAAIvV,GAK5B,OAJKugB,IACJA,EAAS,IAAI1lB,OAAO,IAAMmF,GAC1B3L,KAAKisB,MAAME,IAAIxgB,EAASugB,IAElBA,MAIFH,EAnBU,GAsBlB3uB,EAAQuC,QAAUosB,G,iCCxClB7uB,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAGT,IAAIO,EAAe,WAAc,SAASC,EAAiBC,EAAQC,GAAS,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAME,OAAQD,IAAK,CAAE,IAAIE,EAAaH,EAAMC,GAAIE,EAAWC,WAAaD,EAAWC,aAAc,EAAOD,EAAWE,cAAe,EAAU,UAAWF,IAAYA,EAAWG,UAAW,GAAMnB,OAAOC,eAAeW,EAAQI,EAAWI,IAAKJ,IAAiB,OAAO,SAAUK,EAAaC,EAAYC,GAAiJ,OAA9HD,GAAYX,EAAiBU,EAAYZ,UAAWa,GAAiBC,GAAaZ,EAAiBU,EAAaE,GAAqBF,GAA7gB,GAEnB,SAASqB,EAAgBC,EAAUtB,GAAe,KAAMsB,aAAoBtB,GAAgB,MAAM,IAAIuB,UAAU,qCAIhH,IAAIssB,EAAO,SAASA,EAAK9tB,EAAKjB,GAC5B,IAAIwK,EAAO7E,UAAU/E,OAAS,QAAsBqB,IAAjB0D,UAAU,GAAmBA,UAAU,GAAK,KAC3EqpB,EAAOrpB,UAAU/E,OAAS,QAAsBqB,IAAjB0D,UAAU,GAAmBA,UAAU,GAAK,KAE/EpD,EAAgBI,KAAMosB,GAEtBpsB,KAAK1B,IAAMA,EACX0B,KAAK3C,MAAQA,EACb2C,KAAK6H,KAAOA,EACZ7H,KAAKqsB,KAAOA,GAGVC,EAAW,WAEb,SAASA,IACP,IAAI9b,EAAQxN,UAAU/E,OAAS,QAAsBqB,IAAjB0D,UAAU,GAAmBA,UAAU,GAAK,GAEhFpD,EAAgBI,KAAMssB,GAEtBtsB,KAAKgsB,KAAO,EACZhsB,KAAKwQ,MAAQA,EACbxQ,KAAKusB,KAAO,KACZvsB,KAAKwsB,KAAO,KACZxsB,KAAKisB,MAAQ,GAqGf,OA9FAruB,EAAa0uB,EAAU,CAAC,CACtBhuB,IAAK,MACLjB,MAAO,SAAaiB,EAAKjB,GAGvB,GAFA2C,KAAKysB,cAEAzsB,KAAKusB,KAEH,CACL,IAAI9D,EAAO,IAAI2D,EAAK9tB,EAAKjB,EAAO2C,KAAKusB,MACrCvsB,KAAKusB,KAAKF,KAAO5D,EACjBzoB,KAAKusB,KAAO9D,OAJZzoB,KAAKusB,KAAOvsB,KAAKwsB,KAAO,IAAIJ,EAAK9tB,EAAKjB,GAQxC2C,KAAKisB,MAAM3tB,GAAO0B,KAAKusB,KACvBvsB,KAAKgsB,SAKN,CACD1tB,IAAK,MACLjB,MAAO,SAAaiB,GAClB,GAAI0B,KAAKisB,MAAM3tB,GAAM,CACnB,IAAIjB,EAAQ2C,KAAKisB,MAAM3tB,GAAKjB,MAO5B,OAJA2C,KAAK0sB,OAAOpuB,GAEZ0B,KAAKmsB,IAAI7tB,EAAKjB,GAEPA,EAGTsvB,QAAQC,IAAI,uCAAyCtuB,KAEtD,CACDA,IAAK,cACLjB,MAAO,WACD2C,KAAKgsB,OAAShsB,KAAKwQ,OACrBxQ,KAAK0sB,OAAO1sB,KAAKwsB,KAAKluB,OAGzB,CACDA,IAAK,SACLjB,MAAO,SAAgBiB,GACrB,IAAImqB,EAAOzoB,KAAKisB,MAAM3tB,GAEJ,OAAdmqB,EAAK4D,KACP5D,EAAK4D,KAAKxkB,KAAO4gB,EAAK5gB,KAEtB7H,KAAKusB,KAAO9D,EAAK5gB,KAGD,OAAd4gB,EAAK5gB,KACP4gB,EAAK5gB,KAAKwkB,KAAO5D,EAAK4D,KAEtBrsB,KAAKwsB,KAAO/D,EAAK4D,YAGZrsB,KAAKisB,MAAM3tB,GAClB0B,KAAKgsB,SAEN,CACD1tB,IAAK,QACLjB,MAAO,WACL2C,KAAKusB,KAAO,KACZvsB,KAAKwsB,KAAO,KACZxsB,KAAKgsB,KAAO,EACZhsB,KAAKisB,MAAQ,OAyBVK,EAhHM,GAmHflvB,EAAQuC,QAAU2sB,G,iCCzIlBpvB,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQyvB,yCAA2CA,EAEnD,IAEIzc,EAAcjK,EAFD,EAAQ,MAMrB2mB,EAAgB3mB,EAFD,EAAQ,MAIvBnB,EAAQ,EAAQ,KAEpB,SAASmB,EAAuB1I,GAAO,OAAOA,GAAOA,EAAIiC,WAAajC,EAAM,CAAEkC,QAASlC,GA6EvF,SAASsvB,EAAwBvpB,EAAQ0S,EAAWrX,GAMlD,IAAK,IAAIgO,EAAQ,EAAGA,EAAQqJ,EAAUjY,OAAS,EAAG4O,IAAS,CACzD,IAAImgB,EAAc9W,EAAU+W,OAAOpgB,GAEnC,GAAoB,MAAhBmgB,GAAuC,MAAhBA,EAAqB,CAC9C,IAAIE,EAAkBhX,EAAU+W,OAAOpgB,EAAQ,GAE/C,GAAwB,MAApBqgB,GAA+C,MAApBA,GAI7B,GADArgB,IACIsgB,KAAKC,cAAc5pB,EAAQ0S,EAAUpF,UAAUjE,KAAWwgB,UAAUC,UACtE,OAAO,OAIJ,IAAI,EAAIR,EAAcntB,SAASuW,EAAUpF,UAAUjE,MAAYrJ,EAAOxE,IAC3E,OAAO,GAKb,OAAO,EAGT,SAASuuB,EAAkC/pB,EAAQ2I,GAGjD,GAAqC,wBAAjC3I,EAAOgqB,uBACT,OAAO,EAGT,IAAIC,EAAoBN,KAAKO,4BAA4BlqB,EAAOmqB,kBAE5D9uB,EAAWsuB,KAAKS,qBAAqBH,GACzC,GAAgB,MAAZ5uB,EACF,OAAO,EAIT,IAAI0G,EAAiB4nB,KAAKU,6BAA6BrqB,GACnDsqB,EAAaX,KAAKY,iCAAiClvB,EAASmvB,gBAAiBzoB,GAIjF,GAAIuoB,GAAcA,EAAWG,kCAAkChwB,OAAS,EAAG,CACzE,GAAI6vB,EAAWI,0CAGb,OAAO,EAGT,GAAIC,gBAAgBC,gCAAgCN,EAAWG,mCAE7D,OAAO,EAIT,IAAII,EAAeF,gBAAgBG,oBAAoB9qB,EAAO+qB,eAI9D,OAAOpB,KAAKqB,uCAAuCH,EAAcxvB,EAAU,MAG7E,OAAO,EAGT,SAASguB,EAAyCrpB,EAAQ0S,GACxD,IAAIuY,EAAwBvY,EAAU7S,QAAQ,KAC9C,GAAIorB,EAAwB,EAE1B,OAAO,EAIT,IAAIC,EAAyBxY,EAAU7S,QAAQ,IAAKorB,EAAwB,GAC5E,QAAIC,EAAyB,OAMClrB,EAAOgqB,yBAA2BmB,kBAAkBC,4BAA8BprB,EAAOgqB,yBAA2BmB,kBAAkBE,gCAErIV,gBAAgBG,oBAAoBpY,EAAUpF,UAAU,EAAG2d,MAA4BK,OAAOtrB,EAAOmqB,mBAE3HzX,EAAUtP,MAAM8nB,EAAyB,GAAGrrB,QAAQ,MAAQ,GAMvE,SAAS0rB,EAA2BvrB,EAAQ0S,EAAWrX,EAAUmwB,EAAajZ,GAC5E,IAAIkZ,EAAsBC,gBAAgBhZ,GAAW,GACjDiZ,EAAwBC,EAAwBvwB,EAAU2E,EAAQ,MACtE,GAAIwrB,EAAYnwB,EAAU2E,EAAQyrB,EAAqBE,GACrD,OAAO,EAIT,IAAIE,EAAmBC,gBAAgBC,8BAA8B/rB,EAAOmqB,kBACxE6B,EAA4BrC,KAAKU,6BAA6BrqB,GAElE,GAAI6rB,EACG,KAAI9nB,EAAY8nB,EAAiBrB,gBAAiBxmB,EAAWC,MAAMC,QAAQH,GAAYI,EAAK,EAAjG,IAAoGJ,EAAYC,EAAWD,EAAYA,EAAUhK,OAAOC,cAAe,CACrK,IAAIoK,EAEJ,GAAIJ,EAAU,CACZ,GAAIG,GAAMJ,EAAUtJ,OAAQ,MAC5B2J,EAAOL,EAAUI,SACZ,CAEL,IADAA,EAAKJ,EAAUM,QACRC,KAAM,MACbF,EAAOD,EAAGtK,MAGZ,IAAIoyB,EAAkB7nB,EAEtB,GAAI6nB,EAAgB9b,wBAAwB1V,OAAS,EAGnD,IAD0B8X,EAAY2Z,oBAAoB,IAAMD,EAAgB9b,wBAAwB,IAC/E5R,KAAKytB,GAE5B,SAIJ,GAAIR,EAAYnwB,EAAU2E,EAAQyrB,EADlCE,EAAwBC,EAAwBvwB,EAAU2E,EAAQisB,IAEhE,OAAO,GAKb,OAAO,EAQT,SAASL,EAAwBvwB,EAAU2E,EAAQmsB,GACjD,GAAIA,EAAmB,CAErB,IAAIH,EAA4BrC,KAAKU,6BAA6BrqB,GAClE,OAAO2pB,KAAKyC,sBAAsBJ,EAA2BG,EAAmB,UAAW9wB,GAAU4Q,MAAM,KAI7G,IAAIogB,EAAgBxiB,aAAa7J,EAAQ,UAAW3E,GAIhDixB,EAAWD,EAAcxsB,QAAQ,KACjCysB,EAAW,IACbA,EAAWD,EAAc5xB,QAI3B,IAAI8xB,EAAaF,EAAcxsB,QAAQ,KAAO,EAC9C,OAAOwsB,EAAcjpB,MAAMmpB,EAAYD,GAAUrgB,MAAM,KAGzD,SAASugB,EAAiCnxB,EAAU2E,EAAQyrB,EAAqBE,GAC/E,IAAIc,EAAkBhB,EAAoBxf,MAAMygB,oBAG5CC,EAA4B3sB,EAAO4sB,eAAiBH,EAAgBhyB,OAAS,EAAIgyB,EAAgBhyB,OAAS,EAK9G,GAA8B,GAA1BgyB,EAAgBhyB,QAAegyB,EAAgBE,GAA2BE,SAASlD,KAAKU,6BAA6BrqB,IACvH,OAAO,EAMT,IADA,IAAI8sB,EAA4BnB,EAAsBlxB,OAAS,EACxDqyB,EAA4B,GAAKH,GAA6B,GAAG,CACtE,GAAIF,EAAgBE,KAA+BhB,EAAsBmB,GACvE,OAAO,EAETA,IACAH,IAKF,OAAOA,GAA6B,IAAK,EAAInrB,EAAM+L,UAAUkf,EAAgBE,GAA4BhB,EAAsB,IAGjI,SAASoB,EAA6B1xB,EAAU2E,EAAQyrB,EAAqBE,GAC3E,IAAIqB,EAAY,EAChB,GAAIhtB,EAAOgqB,yBAA2BmB,kBAAkB8B,qBAAsB,CAE5E,IAAIC,EAAc5B,OAAOtrB,EAAOmqB,kBAChC6C,EAAYvB,EAAoB5rB,QAAQqtB,GAAeA,EAAYzyB,SAKrE,IAAK,IAAID,EAAI,EAAGA,EAAImxB,EAAsBlxB,OAAQD,IAAK,CAIrD,IADAwyB,EAAYvB,EAAoB5rB,QAAQ8rB,EAAsBnxB,GAAIwyB,IAClD,EACd,OAAO,EAIT,GADAA,GAAarB,EAAsBnxB,GAAGC,SAC7B,GAALD,GAAUwyB,EAAYvB,EAAoBhxB,SAAU,CAKtD,IAAI0yB,EAASxD,KAAKO,4BAA4BlqB,EAAOmqB,kBACrD,GAAgD,MAA5CR,KAAKyD,sBAAsBD,GAAQ,IAAiBE,UAAUC,QAAQ7B,EAAoBhC,OAAOuD,IAAa,CAIhH,IAAIhB,EAA4BrC,KAAKU,6BAA6BrqB,GAClE,OAAO,EAAIwB,EAAM6L,YAAYoe,EAAoBroB,MAAM4pB,EAAYrB,EAAsBnxB,GAAGC,QAASuxB,KAQ3G,OAAOP,EAAoBroB,MAAM4pB,GAAWH,SAAS7sB,EAAOutB,gBAnT9D3zB,EAAQuC,QAAU,CAIhBqxB,SAAU,SAAkBxtB,EAAQ0S,EAAWrX,GAC7C,OAAO,GASToyB,MAAO,SAAeztB,EAAQ0S,EAAWrX,GACvC,UAAK,EAAIuR,EAAYzQ,SAAS6D,OAAQlE,EAAWT,KAAckuB,EAAwBvpB,EAAQ0S,EAAUgb,WAAYryB,KAsBvHsyB,gBAAiB,SAAyB3tB,EAAQ0S,EAAWrX,EAAUkX,GACrE,IAAIqb,EAAkBlb,EAAUgb,WAEhC,UAAK,EAAI9gB,EAAYzQ,SAAS6D,OAAQlE,EAAWT,KAAckuB,EAAwBvpB,EAAQ4tB,EAAiBvyB,IAAaguB,EAAyCrpB,EAAQ4tB,KAAqB7D,EAAkC/pB,EAAQ3E,KAItOkwB,EAA2BvrB,EAAQ0S,EAAWrX,EAAU0xB,EAA8Bxa,IAe/Fsb,eAAgB,SAAwB7tB,EAAQ0S,EAAWrX,EAAUkX,GACnE,IAAIqb,EAAkBlb,EAAUgb,WAEhC,UAAK,EAAI9gB,EAAYzQ,SAAS6D,OAAQlE,EAAWT,KAAckuB,EAAwBvpB,EAAQ4tB,EAAiBvyB,IAAaguB,EAAyCrpB,EAAQ4tB,KAAqB7D,EAAkC/pB,EAAQ3E,KAItOkwB,EAA2BvrB,EAAQ0S,EAAWrX,EAAUmxB,EAAkCja,M,iCCvFrG7Y,OAAOC,eAAeC,EAAS,aAAc,CAC5CC,OAAO,IAERD,EAAQuC,QAeR,WACC,IAAImL,GAAsB,EAAI4W,EAAkB3W,oBAAoB/H,WAChEF,EAAOgI,EAAoBhI,KAC3BC,EAAU+H,EAAoB/H,QAC9BlE,EAAWiM,EAAoBjM,SAE/B4sB,EAAU,IAAIC,EAAqB/rB,QAAQmD,EAAMC,EAASlE,GAE9D,OAbD,SAAyBpB,EAAKa,EAAKjB,GAAaiB,KAAOb,EAAOP,OAAOC,eAAeM,EAAKa,EAAK,CAAEjB,MAAOA,EAAOc,YAAY,EAAMC,cAAc,EAAMC,UAAU,IAAkBZ,EAAIa,GAAOjB,EAAS,OAAOI,EAanM2lB,CAAgB,GAAI7lB,OAAOC,SAAU,WAC3C,MAAO,CACNqK,KAAM,WACL,OAAI4jB,EAAQ1U,UACJ,CACNjP,MAAM,EACNzK,MAAOouB,EAAQ5jB,QAGV,CACNC,MAAM,QA/BX,IAMgCrK,EAN5BikB,EAAoB,EAAQ,KAE5BkK,EAAsB,EAAQ,KAE9BF,GAE4BjuB,EAFkBmuB,IAEGnuB,EAAIiC,WAAajC,EAAM,CAAEkC,QAASlC,I,iCCXvFP,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQuC,QAgBR,SAAqCtC,EAAOuB,EAASC,GAC9CA,IACHA,EAAWD,EACXA,OAAUU,GAEZ,OAAO,IAAIgyB,EAAY3xB,QAAQf,EAASC,GAAUwJ,MAAMhL,IAnB1D,IAIgCI,EAJ5B8zB,EAAa,EAAQ,KAErBD,GAE4B7zB,EAFS8zB,IAEY9zB,EAAIiC,WAAajC,EAAM,CAAEkC,QAASlC,I,iCCTvFP,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQuC,QAcR,SAA2BtC,EAAOuB,EAASC,GAEzC,IAAI+S,EAAY,IAAIoY,EAAQ/b,UAAUrP,EAASC,GAK/C,MAAO,CAAEiE,KAFE8O,EAAUvJ,MAAMhL,GAEN8T,SAAUS,EAAUT,WAnB3C,IAAI6Y,EAAU,EAAQ,M,iCCLtB9sB,OAAOC,eAAeC,EAAS,aAAc,CAC5CC,OAAO,IAERD,EAAQuC,aAAUL,EAElB,IAIIgf,EAAQmG,EAASlG,EAJjBxU,EAAW7M,OAAO8M,QAAU,SAAUlM,GAAU,IAAK,IAAIE,EAAI,EAAGA,EAAIgF,UAAU/E,OAAQD,IAAK,CAAE,IAAIiM,EAASjH,UAAUhF,GAAI,IAAK,IAAIM,KAAO2L,EAAc/M,OAAOS,UAAUuM,eAAeC,KAAKF,EAAQ3L,KAAQR,EAAOQ,GAAO2L,EAAO3L,IAAY,OAAOR,GAEnPF,EAAe,WAAc,SAASC,EAAiBC,EAAQC,GAAS,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAME,OAAQD,IAAK,CAAE,IAAIE,EAAaH,EAAMC,GAAIE,EAAWC,WAAaD,EAAWC,aAAc,EAAOD,EAAWE,cAAe,EAAU,UAAWF,IAAYA,EAAWG,UAAW,GAAMnB,OAAOC,eAAeW,EAAQI,EAAWI,IAAKJ,IAAiB,OAAO,SAAUK,EAAaC,EAAYC,GAAiJ,OAA9HD,GAAYX,EAAiBU,EAAYZ,UAAWa,GAAiBC,GAAaZ,EAAiBU,EAAaE,GAAqBF,GAA7gB,GAIfmlB,EAAS,EAAQ,IAEjBlF,EAAUrY,EAAuBud,GAIjCjF,EAActY,EAFD,EAAQ,MAIrBwe,EAAyB,EAAQ,KAEjCqF,EAAU,EAAQ,KAEtB,SAAS7jB,EAAuB1I,GAAO,OAAOA,GAAOA,EAAIiC,WAAajC,EAAM,CAAEkC,QAASlC,GAMvF,SAASmhB,EAA2BC,EAAM1U,GAAQ,IAAK0U,EAAQ,MAAM,IAAIC,eAAe,6DAAgE,OAAO3U,GAAyB,iBAATA,GAAqC,mBAATA,EAA8B0U,EAAP1U,EAUlO,IAAIqnB,GAAa,EAAI7M,EAAuBtH,WAAoBkB,EAASkG,EAAU,SAAUU,GAG5F,SAASqM,IACR,IAAI5pB,EAEAqX,EAAOze,GAlBb,SAAyBX,EAAUtB,GAAe,KAAMsB,aAAoBtB,GAAgB,MAAM,IAAIuB,UAAU,qCAoB9GF,CAAgBI,KAAMwxB,GAEtB,IAAK,IAAItS,EAAOlc,UAAU/E,OAAQiN,EAAOzD,MAAMyX,GAAOC,EAAO,EAAGA,EAAOD,EAAMC,IAC5EjU,EAAKiU,GAAQnc,UAAUmc,GAGxB,OAAeF,EAASze,EAAQoe,EAA2B5e,MAAO4H,EAAO4pB,EAAWpS,WAAaliB,OAAOmiB,eAAemS,IAAarnB,KAAKmV,MAAM1X,EAAM,CAAC5H,MAAMuf,OAAOrU,KAAiB1K,EAAMqV,MAAQ,GAAIrV,EAAMuI,SAAW,SAAUX,GAChO,IAAIW,EAAWvI,EAAMzC,MAAMgL,SACvB1L,EAAQmD,EAAMqV,MAAMxY,MAGpBo0B,GAAW,EAAIzH,EAAQ7b,4BAA4B/F,EAAMtK,OAAOT,OAShEo0B,IAAap0B,GAC2C,IAAvDmD,EAAMkB,OAAO+vB,GAAUpuB,QAAQ+E,EAAMtK,OAAOT,SAE/Co0B,EAAWA,EAAS7qB,MAAM,GAAI,IAOhCpG,EAAMkc,SAAS,CAAErf,MAAOo0B,GAAY,WACnC,OAAO1oB,EAAS0oB,MAEfjxB,EAAMqf,OAAS,SAAUzX,GAC3B,IAAIyX,EAASrf,EAAMzC,MAAM8hB,OACrBxiB,EAAQmD,EAAMqV,MAAMxY,MAGxB,GAAIwiB,EAAQ,CAGX,IAAIE,EAAShW,EAAS,GAAI3B,EAAO,CAChCtK,OAAQiM,EAAS,GAAI3B,EAAMtK,OAAQ,CAClCT,MAAOA,MAQT,OAHG0iB,EAAOC,gBAAkB5X,EAAM4X,gBAClCD,EAAO5W,eAAiBf,EAAMe,eAEvB0W,EAAOE,KAEbvf,EAAMqgB,MAAQ,WAChB,OAAOrgB,EAAM6H,MAAMwY,SACjBrgB,EAAM2pB,WAAa,SAAUxJ,GAC/B,OAAOngB,EAAM6H,MAAQsY,GACX/B,EAA2Bpe,EAAnCye,GAoEJ,OA7ID,SAAmBiB,EAAUC,GAAc,GAA0B,mBAAfA,GAA4C,OAAfA,EAAuB,MAAM,IAAIrgB,UAAU,kEAAoEqgB,GAAeD,EAASviB,UAAYT,OAAOkV,OAAO+N,GAAcA,EAAWxiB,UAAW,CAAED,YAAa,CAAEL,MAAO6iB,EAAU/hB,YAAY,EAAOE,UAAU,EAAMD,cAAc,KAAe+hB,IAAYjjB,OAAOkjB,eAAiBljB,OAAOkjB,eAAeF,EAAUC,GAAcD,EAASd,UAAYe,GASheE,CAAUmR,EAqIT9N,EAAOqC,eAlERnoB,EAAa4zB,EAAY,CAAC,CACzBlzB,IAAK,SACLjB,MAAO,SAAgBA,GACtB,IAAIijB,EAAStgB,KAAKjC,MACda,EAAU0hB,EAAO1hB,QACjBC,EAAWyhB,EAAOzhB,SAGtB,OAAO,EAAImrB,EAAQ9b,6BAA6B7Q,EAAOuB,EAASC,KAE/D,CACFP,IAAK,SACLjB,MAAO,WACN,IAAIurB,EAAU5oB,KAAKjC,MAIfyiB,GAHWoI,EAAQ7f,SACT6f,EAAQhqB,QACPgqB,EAAQ/pB,SAlG1B,SAAkCpB,EAAK2E,GAAQ,IAAItE,EAAS,GAAI,IAAK,IAAIE,KAAKP,EAAW2E,EAAKiB,QAAQrF,IAAM,GAAkBd,OAAOS,UAAUuM,eAAeC,KAAK1M,EAAKO,KAAcF,EAAOE,GAAKP,EAAIO,IAAM,OAAOF,EAmGrM2iB,CAAyBmI,EAAS,CAAC,WAAY,UAAW,cAOjEvrB,EAAQ2C,KAAK6V,MAAMxY,MAGvB,OAAOmhB,EAAQ7e,QAAQ+gB,cAAc,QAAS3W,EAAS,CACtD9H,KAAM,MACNikB,aAAc,OACZ1F,EAAM,CACRG,IAAK3gB,KAAKmqB,WACV9sB,MAAO2C,KAAK0B,OAAOrE,GACnB0L,SAAU/I,KAAK+I,SACf8W,OAAQ7f,KAAK6f,aAEZ,CAAC,CACJvhB,IAAK,2BAMLjB,MAAO,SAAkC2S,GAGxC,MAAO,CAAE3S,MAFG2S,EAAM3S,WAqBbm0B,EArI2E,GAsI1D/M,EAAQ3D,UAAY,CAG5CzjB,MAAOohB,EAAY9e,QAAQ6P,OAAOwR,WAGlCjY,SAAU0V,EAAY9e,QAAQohB,KAAKC,WAGnCnB,OAAQpB,EAAY9e,QAAQohB,KAQ5BniB,QAAS6f,EAAY9e,QAAQ6P,OAG7B3Q,SAAU4f,EAAY9e,QAAQ6oB,OAAOxH,YA1JgB1C,EA0JFC,KAAYD,EAEhElhB,EAAQuC,QAAU6xB,G,iCCnMlBt0B,OAAOC,eAAeC,EAAS,aAAc,CAC5CC,OAAO,IAERD,EAAQuC,QAQR,WACC,OAAO6e,EAAQ7e,QAAQ+gB,cACtB,MACA,CAAExgB,QAAS,MAAOwxB,MAAO,6BAA8BC,WAAY,+BAClEC,QAAS,uBACVpT,EAAQ7e,QAAQ+gB,cACf,IACA,KACAlC,EAAQ7e,QAAQ+gB,cACf,IACA,KACAlC,EAAQ7e,QAAQ+gB,cAAc,OAAQ,CAAEmR,EAAG,gVAC3CrT,EAAQ7e,QAAQ+gB,cACf,IACA,KACAlC,EAAQ7e,QAAQ+gB,cAAc,UAAW,CAAEoR,OAAQ,0OACnDtT,EAAQ7e,QAAQ+gB,cAAc,UAAW,CAAEoR,OAAQ,+GACnDtT,EAAQ7e,QAAQ+gB,cAAc,OAAQ,CAAEmR,EAAG,yKAC3CrT,EAAQ7e,QAAQ+gB,cAAc,UAAW,CAAEoR,OAAQ,0FACnDtT,EAAQ7e,QAAQ+gB,cAAc,OAAQ,CAAEmR,EAAG,6gLAC3CrT,EAAQ7e,QAAQ+gB,cAAc,OAAQ,CAAEmR,EAAG,oFA1BhD,IAIgCp0B,EAJ5BimB,EAAS,EAAQ,IAEjBlF,GAE4B/gB,EAFKimB,IAEgBjmB,EAAIiC,WAAajC,EAAM,CAAEkC,QAASlC,I,iCCTvFP,OAAOC,eAAeC,EAAS,aAAc,CAC5CC,OAAO,IAGR,IAEImhB,EAAUrY,EAFD,EAAQ,KAMjBsY,EAActY,EAFD,EAAQ,MAMrB4d,EAAe5d,EAFD,EAAQ,KAI1B,SAASA,EAAuB1I,GAAO,OAAOA,GAAOA,EAAIiC,WAAajC,EAAM,CAAEkC,QAASlC,GAKvF,IAAImsB,EAAgB,SAAuBhiB,GAC1C,IAAIhJ,EAAUgJ,EAAKhJ,QACfgoB,EAAQhf,EAAKgf,MACbE,EAAYlf,EAAKkf,UACjBR,EAAY1e,EAAK0e,UAErB,OAAIM,GAASA,EAAMhoB,GACX4f,EAAQ7e,QAAQkoB,aAAajB,EAAMhoB,KAAY,CACrD0nB,WAAW,EAAIvC,EAAapkB,SAAS,iCAAkC2mB,KAIlE9H,EAAQ7e,QAAQ+gB,cACtB,MACA,CAAE4F,WAAW,EAAIvC,EAAapkB,SAAS,iCAAkC2mB,IACzE9H,EAAQ7e,QAAQ+gB,cAAc,MAAO,CACpCqR,IAAKnzB,EACL0nB,UAAW,uCACX0L,IAAK,GAAKlL,EAAYloB,EAAQqzB,cAAgB,WAIjDrI,EAAc9I,UAAY,CAGzBliB,QAAS6f,EAAY9e,QAAQ6P,OAAOwR,WASpC4F,MAAOnI,EAAY9e,QAAQ4oB,SAAS9J,EAAY9e,QAAQohB,MAIxD+F,UAAWrI,EAAY9e,QAAQ6P,OAAOwR,YAGvC5jB,EAAQuC,QAAUiqB,G,iCC9DlB1sB,OAAOC,eAAeC,EAAS,aAAc,CAC5CC,OAAO,IAERD,EAAQqoB,sBA0BR,SAA+BF,EAAe3mB,EAASW,EAAW2yB,EAA4BrzB,GAGzF0mB,EAAc3mB,UAEjBA,EAAU2mB,EAAc3mB,SAIrBW,GAAaA,EAAU8D,QAAQzE,GAAW,IAC7CA,OAAUU,IAONV,IAAYuzB,EAAyB5yB,EAAW2yB,IAA+B3yB,GAAaA,EAAUtB,OAAS,IACnHW,EAAUW,EAAU,IAGrB,OAAOX,GA9CRxB,EAAQosB,wBAyDR,SAAiCjqB,EAAW6yB,EAAeF,EAA4BG,GAEtF,IAAI1M,EAAyBpmB,EAAUqB,IAAI,SAAUhC,GACpD,MAAO,CACNvB,MAAOuB,EAEP6qB,MAAO2I,GAAiBA,EAAcxzB,IAAYyzB,EAAsBzzB,MAK1E+mB,EAAuBlZ,KAAK,SAAUJ,EAAGC,GACxC,OAAOgmB,EAAgBjmB,EAAEod,MAAOnd,EAAEmd,SAI/B0I,EAAyB5yB,EAAW2yB,IACvCvM,EAAuB4M,QAAQ,CAC9B9I,MAAO2I,GAAiBA,EAAcI,IAAMH,EAAsBG,KAIpE,OAAO7M,GA9ERvoB,EAAQ6P,iBAyFR,SAA0B5P,EAAOwB,GAChC,OAAO,EAAImrB,EAAQ5c,aAAa/P,GAAS,GAAIwB,IAzF9CzB,EAAQ0sB,6BAsGR,SAAsC2I,EAAc5zB,GACnD,OAAO,EAAImrB,EAAQ3c,cAAcolB,EAAc,WAAY5zB,GAAUmD,QAAQ,MAAO,KAtGrF5E,EAAQ6rB,gCAiHR,SAAyC5rB,EAAOq1B,EAAkB1M,EAAannB,GAG9E,IAAKxB,EACJ,OAAOA,EAOR,GAAI2oB,GAMH,GAAiB,MAAb3oB,EAAM,GAWT,OAJAA,EAAQs1B,EAA2Bt1B,EAAOq1B,EAAkB7zB,GAIrD,KAAM,EAAImrB,EAAQ9qB,uBAAuB8mB,EAAannB,GAAYxB,OAMzE,GAAiB,MAAbA,EAAM,GAAY,CAMrB,IAAIu1B,EAAsCC,EAAqCx1B,EAAOq1B,EAAkB7zB,GACxG,OAAO,EAAImrB,EAAQ3c,cAAculB,EAAqCF,EAAkB,QAAS7zB,GAIpG,OAAOxB,GA7JRD,EAAQ8rB,KAuKR,SAAc1lB,EAAQ5E,EAASC,GAC9B,IAAK2E,EACJ,OAID,GAAkB,MAAdA,EAAO,GAAY,CAEtB,GAAe,MAAXA,EACH,OAID,OAAOA,EAKR,IAAK5E,EACJ,OAGD,IAAIg0B,EAAsCC,EAAqCrvB,EAAQ5E,EAASC,GAEhG,IAAK+zB,EACJ,OAGD,OAAO,EAAI5I,EAAQ3c,cAAculB,EAAqCh0B,EAAS,QAASC,IAlMzFzB,EAAQgsB,yBAgNR,SAAkCvD,EAAcjnB,EAASW,EAAW2yB,EAA4BrzB,GAC/F,GAAqB,MAAjBgnB,EAEH,OAAOjnB,EAGR,IAAIk0B,EAAkBC,EAAgElN,EAAchnB,GAKpG,GAAIi0B,KAAqBvzB,GAAaA,EAAU8D,QAAQyvB,IAAoB,GAC3E,OAAOA,EAKH,GAAIl0B,GAAWuzB,EAAyB5yB,EAAW2yB,KAAgCc,EAA+BnN,EAAcjnB,EAASC,GAC5I,OAIF,OAAOD,GArORxB,EAAQ21B,gEAAkEA,EAC1E31B,EAAQk1B,gBAAkBA,EAC1Bl1B,EAAQ+0B,yBAA2BA,EACnC/0B,EAAQu1B,2BAA6BA,EACrCv1B,EAAQy1B,qCAAuCA,EAC/Cz1B,EAAQ41B,+BAAiCA,EAEzC,IAAIhJ,EAAU,EAAQ,KAuOtB,SAAS+I,EAAgEvvB,EAAQ3E,GAChF,IAAI+S,EAAY,IAAIoY,EAAQ/b,UAAU,KAAMpP,GAI5C,GAHA+S,EAAUvJ,MAAM7E,GAGU,QAAtBoO,EAAUhT,QAGd,OAAOgT,EAAUhT,QAOlB,SAAS0zB,EAAgBjmB,EAAGC,GAM3B,OAAIwiB,OAAOnxB,UAAUs1B,cACb5mB,EAAE4mB,cAAc3mB,GAGjBD,EAAIC,GAAK,EAAID,EAAIC,EAAI,EAAI,EAMjC,SAAS6lB,EAAyB5yB,EAAW2yB,GAI5C,YAAmC5yB,IAA/B4yB,EACIA,GAMH3yB,GAiBEA,EAAUtB,QAAU,IAU5B,SAAS00B,EAA2BnvB,EAAQ5E,EAASC,GAGpD,GAAID,EAAS,CACZ,IAAIs0B,EAAyB,KAAM,EAAIlJ,EAAQ9qB,uBAAuBN,EAASC,GAG/E,GAAI2E,EAAOvF,OAASi1B,EAAuBj1B,QAC1C,GAA+C,IAA3Ci1B,EAAuB7vB,QAAQG,GAClC,MAAO,QAGR,GAA+C,IAA3CA,EAAOH,QAAQ6vB,GAClB,OAAO1vB,EAAOoD,MAAMssB,EAAuBj1B,QAOzC,IAAIsJ,EAAYrK,OAAOkF,KAAKvD,EAAS2C,uBAAwBgG,EAAWC,MAAMC,QAAQH,GAAYI,EAAK,EAA5G,IAA+GJ,EAAYC,EAAWD,EAAYA,EAAUhK,OAAOC,cAAe,CACjL,IAAIoK,EAEJ,GAAIJ,EAAU,CACb,GAAIG,GAAMJ,EAAUtJ,OAAQ,MAC5B2J,EAAOL,EAAUI,SACX,CAEN,IADAA,EAAKJ,EAAUM,QACRC,KAAM,MACbF,EAAOD,EAAGtK,MAGX,IAAIoE,EAAuBmG,EAE3B,GAAIpE,EAAOH,QAAQ5B,KAA0B,IAAIxD,OAChD,OAAOuF,EAAOoD,MAAM,IAAI3I,OAASwD,EAAqBxD,QAIxD,MAAO,GAYR,SAAS40B,EAAqCrvB,EAAQ5E,EAASC,GAE9D,IAAI+S,EAAY,IAAIoY,EAAQ/b,UAAUrP,EAASC,GAM/C,OAHA+S,EAAUvJ,MAAM7E,GAGToO,EAAUuhB,oBASlB,SAASH,EAA+BxvB,EAAQ5E,EAASC,GAIxD,IAHA,IAAI4C,GAAuB,EAAIuoB,EAAQ9qB,uBAAuBN,EAASC,GAEnEb,EAAI,EACDA,EAAI,EAAIwF,EAAOvF,QAAUD,EAAIyD,EAAqBxD,QAAQ,CAChE,GAAIuF,EAAOxF,EAAI,KAAOyD,EAAqBzD,GAC1C,OAAO,EAERA,IAGD,OAAO,I,++LC5YRd,OAAOC,eAAeC,EAAS,aAAc,CAC5CC,OAAO,IAERD,EAAQsoB,gBACR,SAAyBN,GAaxB,OAAOloB,OAAOkF,KAAKgjB,GAAQrL,OAAO,SAAUzb,GAC3C,OAAsB,IAAfA,EAAIL,QAAgBK,EAAI80B,gBAAkB90B,GAAe,OAARA,M,iCClB1DpB,OAAOC,eAAeC,EAAS,aAAc,CAC5CC,OAAO,IAERD,EAAQuC,aAAUL,EAElB,IAEIgf,EAAQC,EAFR3gB,EAAe,WAAc,SAASC,EAAiBC,EAAQC,GAAS,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAME,OAAQD,IAAK,CAAE,IAAIE,EAAaH,EAAMC,GAAIE,EAAWC,WAAaD,EAAWC,aAAc,EAAOD,EAAWE,cAAe,EAAU,UAAWF,IAAYA,EAAWG,UAAW,GAAMnB,OAAOC,eAAeW,EAAQI,EAAWI,IAAKJ,IAAiB,OAAO,SAAUK,EAAaC,EAAYC,GAAiJ,OAA9HD,GAAYX,EAAiBU,EAAYZ,UAAWa,GAAiBC,GAAaZ,EAAiBU,EAAaE,GAAqBF,GAA7gB,GAIfmlB,EAAS,EAAQ,IAEjBlF,EAAUrY,EAAuBud,GAIjCjF,EAActY,EAFD,EAAQ,MAMrB4d,EAAe5d,EAFD,EAAQ,KAI1B,SAASA,EAAuB1I,GAAO,OAAOA,GAAOA,EAAIiC,WAAajC,EAAM,CAAEkC,QAASlC,GAIvF,SAASmhB,EAA2BC,EAAM1U,GAAQ,IAAK0U,EAAQ,MAAM,IAAIC,eAAe,6DAAgE,OAAO3U,GAAyB,iBAATA,GAAqC,mBAATA,EAA8B0U,EAAP1U,EAIlO,IAAIkpB,GAAuB9U,EAASD,EAAS,SAAUuF,GAGtD,SAASwP,IACR,IAAIzrB,EAEAqX,EAAOze,GAZb,SAAyBX,EAAUtB,GAAe,KAAMsB,aAAoBtB,GAAgB,MAAM,IAAIuB,UAAU,qCAc9GF,CAAgBI,KAAMqzB,GAEtB,IAAK,IAAInU,EAAOlc,UAAU/E,OAAQiN,EAAOzD,MAAMyX,GAAOC,EAAO,EAAGA,EAAOD,EAAMC,IAC5EjU,EAAKiU,GAAQnc,UAAUmc,GAGxB,OAAeF,EAASze,EAAQoe,EAA2B5e,MAAO4H,EAAOyrB,EAAoBjU,WAAaliB,OAAOmiB,eAAegU,IAAsBlpB,KAAKmV,MAAM1X,EAAM,CAAC5H,MAAMuf,OAAOrU,KAAiB1K,EAAMuI,SAAW,SAAUX,IAGhOW,EAFevI,EAAMzC,MAAMgL,UAElBX,EAAMtK,OAAOT,QACZuhB,EAA2Bpe,EAAnCye,GA0DJ,OA9ED,SAAmBiB,EAAUC,GAAc,GAA0B,mBAAfA,GAA4C,OAAfA,EAAuB,MAAM,IAAIrgB,UAAU,kEAAoEqgB,GAAeD,EAASviB,UAAYT,OAAOkV,OAAO+N,GAAcA,EAAWxiB,UAAW,CAAED,YAAa,CAAEL,MAAO6iB,EAAU/hB,YAAY,EAAOE,UAAU,EAAMD,cAAc,KAAe+hB,IAAYjjB,OAAOkjB,eAAiBljB,OAAOkjB,eAAeF,EAAUC,GAAcD,EAASd,UAAYe,GAGheE,CAAUgT,EA4ET3P,EAAOpG,WArDR1f,EAAay1B,EAAqB,CAAC,CAClC/0B,IAAK,SACLjB,MAAO,WACN,IAAIijB,EAAStgB,KAAKjC,MACdgS,EAAOuQ,EAAOvQ,KACd1S,EAAQijB,EAAOjjB,MACf0F,EAAUud,EAAOvd,QACjBqhB,EAAW9D,EAAO8D,SAClBqD,EAAWnH,EAAOmH,SAClBnB,EAAYhG,EAAOgG,UACnBgN,EAAchT,EAAOiT,qBAMrBC,GAHiBzwB,EAAQgX,OAAO,SAAU0Z,GAC7C,OAAOA,EAAOp2B,QAAUA,IACtB,IAAM0F,EAAQ,IACwB2mB,KAEzC,OAAOlL,EAAQ7e,QAAQ+gB,cACtB,MACA,CAAE4F,WAAW,EAAIvC,EAAapkB,SAAS2mB,EAAW,8CAClD9H,EAAQ7e,QAAQ+gB,cAAc8S,EAAqB,MACnDhV,EAAQ7e,QAAQ+gB,cACf,SACA,CACC3Q,KAAMA,EACN1S,MAAOA,EACP0L,SAAU/I,KAAK+I,SACfqb,SAAUA,EACVqD,SAAUA,EACVnB,UAAW,4CACZvjB,EAAQnC,IAAI,SAAUoP,GACrB,IAAI3S,EAAQ2S,EAAM3S,MACdosB,EAAQzZ,EAAMyZ,MAClB,OAAOjL,EAAQ7e,QAAQ+gB,cACtB,SACA,CAAEpiB,IAAKjB,GAAS,IAAKA,MAAOA,GAC5BosB,MAIHjL,EAAQ7e,QAAQ+gB,cAAc4S,EAAa,WAWvCD,EA5EqC,GA6ExB/U,EAAOwC,UAAY,CACvCyS,qBAAsB9U,EAAY9e,QAAQohB,KAAKC,YAC7C1C,EAAO2C,aAAe,CACxBsS,qBAAsB,WACrB,OAAO/U,EAAQ7e,QAAQ+gB,cAAc,MAAO,CAAE4F,UAAW,qDACrD/H,GACNnhB,EAAQuC,QAAU0zB","file":"onfido.vendors~crossDevice.min.js","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nexports.validateMetadata = validateMetadata;\nexports.getExtPrefix = getExtPrefix;\nexports.getCountryCallingCode = getCountryCallingCode;\nexports.isSupportedCountry = isSupportedCountry;\n\nvar _semverCompare = require('./tools/semver-compare');\n\nvar _semverCompare2 = _interopRequireDefault(_semverCompare);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n// Added \"possibleLengths\" and renamed\n// \"country_phone_code_to_countries\" to \"country_calling_codes\".\nvar V2 = '1.0.18';\n\n// Added \"idd_prefix\" and \"default_idd_prefix\".\nvar V3 = '1.2.0';\n\nvar DEFAULT_EXT_PREFIX = ' ext. ';\n\nvar Metadata = function () {\n\tfunction Metadata(metadata) {\n\t\t_classCallCheck(this, Metadata);\n\n\t\tvalidateMetadata(metadata);\n\n\t\tthis.metadata = metadata;\n\n\t\tthis.v1 = !metadata.version;\n\t\tthis.v2 = metadata.version !== undefined && (0, _semverCompare2.default)(metadata.version, V3) === -1;\n\t\tthis.v3 = metadata.version !== undefined; // && compare(metadata.version, V4) === -1\n\t}\n\n\t_createClass(Metadata, [{\n\t\tkey: 'hasCountry',\n\t\tvalue: function hasCountry(country) {\n\t\t\treturn this.metadata.countries[country] !== undefined;\n\t\t}\n\t}, {\n\t\tkey: 'country',\n\t\tvalue: function country(_country) {\n\t\t\tif (!_country) {\n\t\t\t\tthis._country = undefined;\n\t\t\t\tthis.country_metadata = undefined;\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tif (!this.hasCountry(_country)) {\n\t\t\t\tthrow new Error('Unknown country: ' + _country);\n\t\t\t}\n\n\t\t\tthis._country = _country;\n\t\t\tthis.country_metadata = this.metadata.countries[_country];\n\t\t\treturn this;\n\t\t}\n\t}, {\n\t\tkey: 'getDefaultCountryMetadataForRegion',\n\t\tvalue: function getDefaultCountryMetadataForRegion() {\n\t\t\treturn this.metadata.countries[this.countryCallingCodes()[this.countryCallingCode()][0]];\n\t\t}\n\t}, {\n\t\tkey: 'countryCallingCode',\n\t\tvalue: function countryCallingCode() {\n\t\t\treturn this.country_metadata[0];\n\t\t}\n\t}, {\n\t\tkey: 'IDDPrefix',\n\t\tvalue: function IDDPrefix() {\n\t\t\tif (this.v1 || this.v2) return;\n\t\t\treturn this.country_metadata[1];\n\t\t}\n\t}, {\n\t\tkey: 'defaultIDDPrefix',\n\t\tvalue: function defaultIDDPrefix() {\n\t\t\tif (this.v1 || this.v2) return;\n\t\t\treturn this.country_metadata[12];\n\t\t}\n\t}, {\n\t\tkey: 'nationalNumberPattern',\n\t\tvalue: function nationalNumberPattern() {\n\t\t\tif (this.v1 || this.v2) return this.country_metadata[1];\n\t\t\treturn this.country_metadata[2];\n\t\t}\n\t}, {\n\t\tkey: 'possibleLengths',\n\t\tvalue: function possibleLengths() {\n\t\t\tif (this.v1) return;\n\t\t\treturn this.country_metadata[this.v2 ? 2 : 3];\n\t\t}\n\t}, {\n\t\tkey: '_getFormats',\n\t\tvalue: function _getFormats(country_metadata) {\n\t\t\treturn country_metadata[this.v1 ? 2 : this.v2 ? 3 : 4];\n\t\t}\n\n\t\t// For countries of the same region (e.g. NANPA)\n\t\t// formats are all stored in the \"main\" country for that region.\n\t\t// E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\n\n\t}, {\n\t\tkey: 'formats',\n\t\tvalue: function formats() {\n\t\t\tvar _this = this;\n\n\t\t\tvar formats = this._getFormats(this.country_metadata) || this._getFormats(this.getDefaultCountryMetadataForRegion()) || [];\n\t\t\treturn formats.map(function (_) {\n\t\t\t\treturn new Format(_, _this);\n\t\t\t});\n\t\t}\n\t}, {\n\t\tkey: 'nationalPrefix',\n\t\tvalue: function nationalPrefix() {\n\t\t\treturn this.country_metadata[this.v1 ? 3 : this.v2 ? 4 : 5];\n\t\t}\n\t}, {\n\t\tkey: '_getNationalPrefixFormattingRule',\n\t\tvalue: function _getNationalPrefixFormattingRule(country_metadata) {\n\t\t\treturn country_metadata[this.v1 ? 4 : this.v2 ? 5 : 6];\n\t\t}\n\n\t\t// For countries of the same region (e.g. NANPA)\n\t\t// national prefix formatting rule is stored in the \"main\" country for that region.\n\t\t// E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\n\n\t}, {\n\t\tkey: 'nationalPrefixFormattingRule',\n\t\tvalue: function nationalPrefixFormattingRule() {\n\t\t\treturn this._getNationalPrefixFormattingRule(this.country_metadata) || this._getNationalPrefixFormattingRule(this.getDefaultCountryMetadataForRegion());\n\t\t}\n\t}, {\n\t\tkey: 'nationalPrefixForParsing',\n\t\tvalue: function nationalPrefixForParsing() {\n\t\t\t// If `national_prefix_for_parsing` is not set explicitly,\n\t\t\t// then infer it from `national_prefix` (if any)\n\t\t\treturn this.country_metadata[this.v1 ? 5 : this.v2 ? 6 : 7] || this.nationalPrefix();\n\t\t}\n\t}, {\n\t\tkey: 'nationalPrefixTransformRule',\n\t\tvalue: function nationalPrefixTransformRule() {\n\t\t\treturn this.country_metadata[this.v1 ? 6 : this.v2 ? 7 : 8];\n\t\t}\n\t}, {\n\t\tkey: '_getNationalPrefixIsOptionalWhenFormatting',\n\t\tvalue: function _getNationalPrefixIsOptionalWhenFormatting() {\n\t\t\treturn !!this.country_metadata[this.v1 ? 7 : this.v2 ? 8 : 9];\n\t\t}\n\n\t\t// For countries of the same region (e.g. NANPA)\n\t\t// \"national prefix is optional when parsing\" flag is\n\t\t// stored in the \"main\" country for that region.\n\t\t// E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\n\n\t}, {\n\t\tkey: 'nationalPrefixIsOptionalWhenFormatting',\n\t\tvalue: function nationalPrefixIsOptionalWhenFormatting() {\n\t\t\treturn this._getNationalPrefixIsOptionalWhenFormatting(this.country_metadata) || this._getNationalPrefixIsOptionalWhenFormatting(this.getDefaultCountryMetadataForRegion());\n\t\t}\n\t}, {\n\t\tkey: 'leadingDigits',\n\t\tvalue: function leadingDigits() {\n\t\t\treturn this.country_metadata[this.v1 ? 8 : this.v2 ? 9 : 10];\n\t\t}\n\t}, {\n\t\tkey: 'types',\n\t\tvalue: function types() {\n\t\t\treturn this.country_metadata[this.v1 ? 9 : this.v2 ? 10 : 11];\n\t\t}\n\t}, {\n\t\tkey: 'hasTypes',\n\t\tvalue: function hasTypes() {\n\t\t\t// Versions 1.2.0 - 1.2.4: can be `[]`.\n\t\t\t/* istanbul ignore next */\n\t\t\tif (this.types() && this.types().length === 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t// Versions <= 1.2.4: can be `undefined`.\n\t\t\t// Version >= 1.2.5: can be `0`.\n\t\t\treturn !!this.types();\n\t\t}\n\t}, {\n\t\tkey: 'type',\n\t\tvalue: function type(_type) {\n\t\t\tif (this.hasTypes() && getType(this.types(), _type)) {\n\t\t\t\treturn new Type(getType(this.types(), _type), this);\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: 'ext',\n\t\tvalue: function ext() {\n\t\t\tif (this.v1 || this.v2) return DEFAULT_EXT_PREFIX;\n\t\t\treturn this.country_metadata[13] || DEFAULT_EXT_PREFIX;\n\t\t}\n\t}, {\n\t\tkey: 'countryCallingCodes',\n\t\tvalue: function countryCallingCodes() {\n\t\t\tif (this.v1) return this.metadata.country_phone_code_to_countries;\n\t\t\treturn this.metadata.country_calling_codes;\n\t\t}\n\n\t\t// Formatting information for regions which share\n\t\t// a country calling code is contained by only one region\n\t\t// for performance reasons. For example, for NANPA region\n\t\t// (\"North American Numbering Plan Administration\",\n\t\t//  which includes USA, Canada, Cayman Islands, Bahamas, etc)\n\t\t// it will be contained in the metadata for `US`.\n\t\t//\n\t\t// `country_calling_code` is always valid.\n\t\t// But the actual country may not necessarily be part of the metadata.\n\t\t//\n\n\t}, {\n\t\tkey: 'chooseCountryByCountryCallingCode',\n\t\tvalue: function chooseCountryByCountryCallingCode(country_calling_code) {\n\t\t\tvar country = this.countryCallingCodes()[country_calling_code][0];\n\n\t\t\t// Do not want to test this case.\n\t\t\t// (custom metadata, not all countries).\n\t\t\t/* istanbul ignore else */\n\t\t\tif (this.hasCountry(country)) {\n\t\t\t\tthis.country(country);\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: 'selectedCountry',\n\t\tvalue: function selectedCountry() {\n\t\t\treturn this._country;\n\t\t}\n\t}]);\n\n\treturn Metadata;\n}();\n\nexports.default = Metadata;\n\nvar Format = function () {\n\tfunction Format(format, metadata) {\n\t\t_classCallCheck(this, Format);\n\n\t\tthis._format = format;\n\t\tthis.metadata = metadata;\n\t}\n\n\t_createClass(Format, [{\n\t\tkey: 'pattern',\n\t\tvalue: function pattern() {\n\t\t\treturn this._format[0];\n\t\t}\n\t}, {\n\t\tkey: 'format',\n\t\tvalue: function format() {\n\t\t\treturn this._format[1];\n\t\t}\n\t}, {\n\t\tkey: 'leadingDigitsPatterns',\n\t\tvalue: function leadingDigitsPatterns() {\n\t\t\treturn this._format[2] || [];\n\t\t}\n\t}, {\n\t\tkey: 'nationalPrefixFormattingRule',\n\t\tvalue: function nationalPrefixFormattingRule() {\n\t\t\treturn this._format[3] || this.metadata.nationalPrefixFormattingRule();\n\t\t}\n\t}, {\n\t\tkey: 'nationalPrefixIsOptionalWhenFormatting',\n\t\tvalue: function nationalPrefixIsOptionalWhenFormatting() {\n\t\t\treturn !!this._format[4] || this.metadata.nationalPrefixIsOptionalWhenFormatting();\n\t\t}\n\t}, {\n\t\tkey: 'nationalPrefixIsMandatoryWhenFormatting',\n\t\tvalue: function nationalPrefixIsMandatoryWhenFormatting() {\n\t\t\t// National prefix is omitted if there's no national prefix formatting rule\n\t\t\t// set for this country, or when the national prefix formatting rule\n\t\t\t// contains no national prefix itself, or when this rule is set but\n\t\t\t// national prefix is optional for this phone number format\n\t\t\t// (and it is not enforced explicitly)\n\t\t\treturn this.usesNationalPrefix() && !this.nationalPrefixIsOptionalWhenFormatting();\n\t\t}\n\n\t\t// Checks whether national prefix formatting rule contains national prefix.\n\n\t}, {\n\t\tkey: 'usesNationalPrefix',\n\t\tvalue: function usesNationalPrefix() {\n\t\t\treturn this.nationalPrefixFormattingRule() &&\n\t\t\t// Check that national prefix formatting rule is not a dummy one.\n\t\t\tthis.nationalPrefixFormattingRule() !== '$1' &&\n\t\t\t// Check that national prefix formatting rule actually has national prefix digit(s).\n\t\t\t/\\d/.test(this.nationalPrefixFormattingRule().replace('$1', ''));\n\t\t}\n\t}, {\n\t\tkey: 'internationalFormat',\n\t\tvalue: function internationalFormat() {\n\t\t\treturn this._format[5] || this.format();\n\t\t}\n\t}]);\n\n\treturn Format;\n}();\n\nvar Type = function () {\n\tfunction Type(type, metadata) {\n\t\t_classCallCheck(this, Type);\n\n\t\tthis.type = type;\n\t\tthis.metadata = metadata;\n\t}\n\n\t_createClass(Type, [{\n\t\tkey: 'pattern',\n\t\tvalue: function pattern() {\n\t\t\tif (this.metadata.v1) return this.type;\n\t\t\treturn this.type[0];\n\t\t}\n\t}, {\n\t\tkey: 'possibleLengths',\n\t\tvalue: function possibleLengths() {\n\t\t\tif (this.metadata.v1) return;\n\t\t\treturn this.type[1] || this.metadata.possibleLengths();\n\t\t}\n\t}]);\n\n\treturn Type;\n}();\n\nfunction getType(types, type) {\n\tswitch (type) {\n\t\tcase 'FIXED_LINE':\n\t\t\treturn types[0];\n\t\tcase 'MOBILE':\n\t\t\treturn types[1];\n\t\tcase 'TOLL_FREE':\n\t\t\treturn types[2];\n\t\tcase 'PREMIUM_RATE':\n\t\t\treturn types[3];\n\t\tcase 'PERSONAL_NUMBER':\n\t\t\treturn types[4];\n\t\tcase 'VOICEMAIL':\n\t\t\treturn types[5];\n\t\tcase 'UAN':\n\t\t\treturn types[6];\n\t\tcase 'PAGER':\n\t\t\treturn types[7];\n\t\tcase 'VOIP':\n\t\t\treturn types[8];\n\t\tcase 'SHARED_COST':\n\t\t\treturn types[9];\n\t}\n}\n\nfunction validateMetadata(metadata) {\n\tif (!metadata) {\n\t\tthrow new Error('[libphonenumber-js] `metadata` argument not passed. Check your arguments.');\n\t}\n\n\t// `country_phone_code_to_countries` was renamed to\n\t// `country_calling_codes` in `1.0.18`.\n\tif (!is_object(metadata) || !is_object(metadata.countries) || !is_object(metadata.country_calling_codes) && !is_object(metadata.country_phone_code_to_countries)) {\n\t\tthrow new Error('[libphonenumber-js] `metadata` argument was passed but it\\'s not a valid metadata. Must be an object having `.countries` and `.country_calling_codes` child object properties. Got ' + (is_object(metadata) ? 'an object of shape: { ' + Object.keys(metadata).join(', ') + ' }' : 'a ' + type_of(metadata) + ': ' + metadata) + '.');\n\t}\n}\n\n// Babel transforms `typeof` into some \"branches\"\n// so istanbul will show this as \"branch not covered\".\n/* istanbul ignore next */\nvar is_object = function is_object(_) {\n\treturn (typeof _ === 'undefined' ? 'undefined' : _typeof(_)) === 'object';\n};\n\n// Babel transforms `typeof` into some \"branches\"\n// so istanbul will show this as \"branch not covered\".\n/* istanbul ignore next */\nvar type_of = function type_of(_) {\n\treturn typeof _ === 'undefined' ? 'undefined' : _typeof(_);\n};\n\n/**\r\n * Returns extension prefix for a country.\r\n * @param  {string} country\r\n * @param  {object} metadata\r\n * @return {string?}\r\n * @example\r\n * // Returns \" ext. \"\r\n * getExtPrefix(\"US\")\r\n */\nfunction getExtPrefix(country, metadata) {\n\tmetadata = new Metadata(metadata);\n\tif (metadata.hasCountry(country)) {\n\t\treturn metadata.country(country).ext();\n\t}\n\treturn DEFAULT_EXT_PREFIX;\n}\n\n/**\r\n * Returns \"country calling code\" for a country.\r\n * Throws an error if the country doesn't exist or isn't supported by this library.\r\n * @param  {string} country\r\n * @param  {object} metadata\r\n * @return {string}\r\n * @example\r\n * // Returns \"44\"\r\n * getCountryCallingCode(\"GB\")\r\n */\nfunction getCountryCallingCode(country, metadata) {\n\tmetadata = new Metadata(metadata);\n\tif (metadata.hasCountry(country)) {\n\t\treturn metadata.country(country).countryCallingCode();\n\t}\n\tthrow new Error('Unknown country: ' + country);\n}\n\nfunction isSupportedCountry(country, metadata) {\n\t// metadata = new Metadata(metadata)\n\t// return metadata.hasCountry(country)\n\treturn metadata.countries[country] !== undefined;\n}\n//# sourceMappingURL=metadata.js.map","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n// The minimum length of the national significant number.\nvar MIN_LENGTH_FOR_NSN = exports.MIN_LENGTH_FOR_NSN = 2;\n\n// The ITU says the maximum length should be 15,\n// but one can find longer numbers in Germany.\nvar MAX_LENGTH_FOR_NSN = exports.MAX_LENGTH_FOR_NSN = 17;\n\n// The maximum length of the country calling code.\nvar MAX_LENGTH_COUNTRY_CODE = exports.MAX_LENGTH_COUNTRY_CODE = 3;\n\n// Digits accepted in phone numbers\n// (ascii, fullwidth, arabic-indic, and eastern arabic digits).\nvar VALID_DIGITS = exports.VALID_DIGITS = '0-9\\uFF10-\\uFF19\\u0660-\\u0669\\u06F0-\\u06F9';\n\n// `DASHES` will be right after the opening square bracket of the \"character class\"\nvar DASHES = '-\\u2010-\\u2015\\u2212\\u30FC\\uFF0D';\nvar SLASHES = '\\uFF0F/';\nvar DOTS = '\\uFF0E.';\nvar WHITESPACE = exports.WHITESPACE = ' \\xA0\\xAD\\u200B\\u2060\\u3000';\nvar BRACKETS = '()\\uFF08\\uFF09\\uFF3B\\uFF3D\\\\[\\\\]';\n// export const OPENING_BRACKETS = '(\\uFF08\\uFF3B\\\\\\['\nvar TILDES = '~\\u2053\\u223C\\uFF5E';\n\n// Regular expression of acceptable punctuation found in phone numbers. This\n// excludes punctuation found as a leading character only. This consists of dash\n// characters, white space characters, full stops, slashes, square brackets,\n// parentheses and tildes. Full-width variants are also present.\nvar VALID_PUNCTUATION = exports.VALID_PUNCTUATION = '' + DASHES + SLASHES + DOTS + WHITESPACE + BRACKETS + TILDES;\n\nvar PLUS_CHARS = exports.PLUS_CHARS = '+\\uFF0B';\n// const LEADING_PLUS_CHARS_PATTERN = new RegExp('^[' + PLUS_CHARS + ']+')\n//# sourceMappingURL=constants.js.map","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\nexports.default = parse;\nexports.extract_formatted_phone_number = extract_formatted_phone_number;\nexports.strip_national_prefix_and_carrier_code = strip_national_prefix_and_carrier_code;\nexports.find_country_code = find_country_code;\nexports.extractCountryCallingCode = extractCountryCallingCode;\n\nvar _constants = require('./constants');\n\nvar _util = require('./util');\n\nvar _ParseError = require('./ParseError');\n\nvar _ParseError2 = _interopRequireDefault(_ParseError);\n\nvar _metadata = require('./metadata');\n\nvar _metadata2 = _interopRequireDefault(_metadata);\n\nvar _isViablePhoneNumber = require('./isViablePhoneNumber');\n\nvar _isViablePhoneNumber2 = _interopRequireDefault(_isViablePhoneNumber);\n\nvar _extension = require('./extension');\n\nvar _parseIncompletePhoneNumber = require('./parseIncompletePhoneNumber');\n\nvar _parseIncompletePhoneNumber2 = _interopRequireDefault(_parseIncompletePhoneNumber);\n\nvar _getCountryCallingCode = require('./getCountryCallingCode');\n\nvar _getCountryCallingCode2 = _interopRequireDefault(_getCountryCallingCode);\n\nvar _getNumberType_ = require('./getNumberType_');\n\nvar _getNumberType_2 = _interopRequireDefault(_getNumberType_);\n\nvar _isPossibleNumber_ = require('./isPossibleNumber_');\n\nvar _IDD = require('./IDD');\n\nvar _RFC = require('./RFC3966');\n\nvar _PhoneNumber = require('./PhoneNumber');\n\nvar _PhoneNumber2 = _interopRequireDefault(_PhoneNumber);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// We don't allow input strings for parsing to be longer than 250 chars.\n// This prevents malicious input from consuming CPU.\nvar MAX_INPUT_STRING_LENGTH = 250;\n\n// This consists of the plus symbol, digits, and arabic-indic digits.\n// This is a port of Google Android `libphonenumber`'s\n// `phonenumberutil.js` of December 31th, 2018.\n//\n// https://github.com/googlei18n/libphonenumber/commits/master/javascript/i18n/phonenumbers/phonenumberutil.js\n\nvar PHONE_NUMBER_START_PATTERN = new RegExp('[' + _constants.PLUS_CHARS + _constants.VALID_DIGITS + ']');\n\n// Regular expression of trailing characters that we want to remove.\nvar AFTER_PHONE_NUMBER_END_PATTERN = new RegExp('[^' + _constants.VALID_DIGITS + ']+$');\n\n// `options`:\n//  {\n//    country:\n//    {\n//      restrict - (a two-letter country code)\n//                 the phone number must be in this country\n//\n//      default - (a two-letter country code)\n//                default country to use for phone number parsing and validation\n//                (if no country code could be derived from the phone number)\n//    }\n//  }\n//\n// Returns `{ country, number }`\n//\n// Example use cases:\n//\n// ```js\n// parse('8 (800) 555-35-35', 'RU')\n// parse('8 (800) 555-35-35', 'RU', metadata)\n// parse('8 (800) 555-35-35', { country: { default: 'RU' } })\n// parse('8 (800) 555-35-35', { country: { default: 'RU' } }, metadata)\n// parse('+7 800 555 35 35')\n// parse('+7 800 555 35 35', metadata)\n// ```\n//\nfunction parse(text) {\n\tvar options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\tvar metadata = arguments[2];\n\n\tmetadata = new _metadata2.default(metadata);\n\n\t// Validate `defaultCountry`.\n\tif (options.defaultCountry && !metadata.hasCountry(options.defaultCountry)) {\n\t\tif (options.v2) {\n\t\t\tthrow new _ParseError2.default('INVALID_COUNTRY');\n\t\t}\n\t\tthrow new Error('Unknown country: ' + options.defaultCountry);\n\t}\n\n\t// Parse the phone number.\n\n\tvar _parse_input = parse_input(text, options.v2),\n\t    formatted_phone_number = _parse_input.number,\n\t    ext = _parse_input.ext;\n\n\t// If the phone number is not viable then return nothing.\n\n\n\tif (!formatted_phone_number) {\n\t\tif (options.v2) {\n\t\t\tthrow new _ParseError2.default('NOT_A_NUMBER');\n\t\t}\n\t\treturn {};\n\t}\n\n\tvar _parse_phone_number = parse_phone_number(formatted_phone_number, options.defaultCountry, metadata),\n\t    country = _parse_phone_number.country,\n\t    nationalNumber = _parse_phone_number.national_number,\n\t    countryCallingCode = _parse_phone_number.countryCallingCode,\n\t    carrierCode = _parse_phone_number.carrierCode;\n\n\tif (!metadata.selectedCountry()) {\n\t\tif (options.v2) {\n\t\t\tthrow new _ParseError2.default('INVALID_COUNTRY');\n\t\t}\n\t\treturn {};\n\t}\n\n\t// Validate national (significant) number length.\n\tif (nationalNumber.length < _constants.MIN_LENGTH_FOR_NSN) {\n\t\t// Won't throw here because the regexp already demands length > 1.\n\t\t/* istanbul ignore if */\n\t\tif (options.v2) {\n\t\t\tthrow new _ParseError2.default('TOO_SHORT');\n\t\t}\n\t\t// Google's demo just throws an error in this case.\n\t\treturn {};\n\t}\n\n\t// Validate national (significant) number length.\n\t//\n\t// A sidenote:\n\t//\n\t// They say that sometimes national (significant) numbers\n\t// can be longer than `MAX_LENGTH_FOR_NSN` (e.g. in Germany).\n\t// https://github.com/googlei18n/libphonenumber/blob/7e1748645552da39c4e1ba731e47969d97bdb539/resources/phonenumber.proto#L36\n\t// Such numbers will just be discarded.\n\t//\n\tif (nationalNumber.length > _constants.MAX_LENGTH_FOR_NSN) {\n\t\tif (options.v2) {\n\t\t\tthrow new _ParseError2.default('TOO_LONG');\n\t\t}\n\t\t// Google's demo just throws an error in this case.\n\t\treturn {};\n\t}\n\n\tif (options.v2) {\n\t\tvar phoneNumber = new _PhoneNumber2.default(countryCallingCode, nationalNumber, metadata.metadata);\n\n\t\tif (country) {\n\t\t\tphoneNumber.country = country;\n\t\t}\n\t\tif (carrierCode) {\n\t\t\tphoneNumber.carrierCode = carrierCode;\n\t\t}\n\t\tif (ext) {\n\t\t\tphoneNumber.ext = ext;\n\t\t}\n\n\t\treturn phoneNumber;\n\t}\n\n\t// Check if national phone number pattern matches the number.\n\t// National number pattern is different for each country,\n\t// even for those ones which are part of the \"NANPA\" group.\n\tvar valid = country && (0, _util.matchesEntirely)(nationalNumber, metadata.nationalNumberPattern()) ? true : false;\n\n\tif (!options.extended) {\n\t\treturn valid ? result(country, nationalNumber, ext) : {};\n\t}\n\n\treturn {\n\t\tcountry: country,\n\t\tcountryCallingCode: countryCallingCode,\n\t\tcarrierCode: carrierCode,\n\t\tvalid: valid,\n\t\tpossible: valid ? true : options.extended === true && metadata.possibleLengths() && (0, _isPossibleNumber_.is_possible_number)(nationalNumber, countryCallingCode !== undefined, metadata),\n\t\tphone: nationalNumber,\n\t\text: ext\n\t};\n}\n\n/**\r\n * Extracts a parseable phone number.\r\n * @param  {string} text - Input.\r\n * @return {string}.\r\n */\nfunction extract_formatted_phone_number(text, v2) {\n\tif (!text) {\n\t\treturn;\n\t}\n\n\tif (text.length > MAX_INPUT_STRING_LENGTH) {\n\t\tif (v2) {\n\t\t\tthrow new _ParseError2.default('TOO_LONG');\n\t\t}\n\t\treturn;\n\t}\n\n\t// Attempt to extract a possible number from the string passed in\n\n\tvar starts_at = text.search(PHONE_NUMBER_START_PATTERN);\n\n\tif (starts_at < 0) {\n\t\treturn;\n\t}\n\n\treturn text\n\t// Trim everything to the left of the phone number\n\t.slice(starts_at)\n\t// Remove trailing non-numerical characters\n\t.replace(AFTER_PHONE_NUMBER_END_PATTERN, '');\n}\n\n// Strips any national prefix (such as 0, 1) present in the number provided.\n// \"Carrier codes\" are only used  in Colombia and Brazil,\n// and only when dialing within those countries from a mobile phone to a fixed line number.\nfunction strip_national_prefix_and_carrier_code(number, metadata) {\n\tif (!number || !metadata.nationalPrefixForParsing()) {\n\t\treturn { number: number };\n\t}\n\n\t// In many countries the national prefix\n\t// is not just a constant digit (like `0` in UK)\n\t// but can be different depending on the phone number\n\t// (and can be also absent for some phone numbers).\n\t//\n\t// So `national_prefix_for_parsing` is used when parsing\n\t// a national-prefixed (local) phone number\n\t// into a national significant phone number\n\t// extracting that possible national prefix out of it.\n\t//\n\t// Example `national_prefix_for_parsing` for Australia (AU) is `0|(183[12])`.\n\t// Which means that in Australia the national prefix can be: `0`, `1831`, `1832`.\n\n\t// Attempt to parse the first digits as a national prefix\n\tvar national_prefix_pattern = new RegExp('^(?:' + metadata.nationalPrefixForParsing() + ')');\n\tvar national_prefix_matcher = national_prefix_pattern.exec(number);\n\n\t// If no national prefix is present in the phone number,\n\t// but the national prefix is optional for this country,\n\t// then consider this phone number valid.\n\t//\n\t// Google's reference `libphonenumber` implementation\n\t// wouldn't recognize such phone numbers as valid,\n\t// but I think it would perfectly make sense\n\t// to consider such phone numbers as valid\n\t// because if a national phone number was originally\n\t// formatted without the national prefix\n\t// then it must be parseable back into the original national number.\n\t// In other words, `parse(format(number))`\n\t// must always be equal to `number`.\n\t//\n\tif (!national_prefix_matcher) {\n\t\treturn { number: number };\n\t}\n\n\tvar national_significant_number = void 0;\n\n\t// In more complex cases just `national_prefix_for_parsing` regexp\n\t// is not enough to extract the national number and then strip it\n\t// like `number.slice(national_prefix.length)` because when parsing\n\t// national numbers it's not always clear whether the first digits\n\t// are a national prefix or part of the national significant number.\n\t// For such cases `national_prefix_transform_rule` regexp is present\n\t// which contains \"capturing groups\" that are later used in such\n\t// `national_prefix_transform_rule` to transform the national number\n\t// being parsed into the national significant number.\n\t//\n\t// Example.\n\t// Country: U.S. Virgin Islands (VI).\n\t// Country calling code: +1.\n\t// Leading digits: 340.\n\t// Phone number format: +1 (340) xxx-xxxx.\n\t// National prefix: 1.\n\t// National prefix for parsing: 1|([2-9]\\d{6})$.\n\t// National prefix transform rule: 340$1.\n\t//\n\t// So for input \"13401234567\" \"national prefix for parsing\" regexp\n\t// will return \"1\" and the national significant number will be\n\t// \"13401234567\".slice(\"1\".length) === \"(340) 123-4567\".\n\t//\n\t// And for input \"3401234567\" \"national prefix for parsing\" regexp\n\t// the \"captured group\" will be \"3401234567\" and the national significant\n\t// number will be \"3401234567\".replace(\"340123\", \"340340123\") === \"(340) 3401234567\".\n\t//\n\t// `national_prefix_matcher[captured_groups_count]` means that\n\t// the corresponding \"captured group\" is not empty.\n\t// It can be empty if the regexp either doesn't have any \"capturing groups\"\n\t// or if the \"capturing groups\" are defined as optional.\n\t// Example: \"0?(?:...)?\" for Argentina.\n\t//\n\tvar captured_groups_count = national_prefix_matcher.length - 1;\n\tif (metadata.nationalPrefixTransformRule() && national_prefix_matcher[captured_groups_count]) {\n\t\tnational_significant_number = number.replace(national_prefix_pattern, metadata.nationalPrefixTransformRule());\n\t}\n\t// If it's a simple-enough case then just strip the national prefix from the number.\n\telse {\n\t\t\t// National prefix is the whole substring matched by\n\t\t\t// the `national_prefix_for_parsing` regexp.\n\t\t\tvar national_prefix = national_prefix_matcher[0];\n\t\t\tnational_significant_number = number.slice(national_prefix.length);\n\t\t}\n\n\tvar carrierCode = void 0;\n\tif (captured_groups_count > 0) {\n\t\tcarrierCode = national_prefix_matcher[1];\n\t}\n\n\t// The following is done in `get_country_and_national_number_for_local_number()` instead.\n\t//\n\t// // Verify the parsed national (significant) number for this country\n\t// const national_number_rule = new RegExp(metadata.nationalNumberPattern())\n\t// //\n\t// // If the original number (before stripping national prefix) was viable,\n\t// // and the resultant number is not, then prefer the original phone number.\n\t// // This is because for some countries (e.g. Russia) the same digit could be both\n\t// // a national prefix and a leading digit of a valid national phone number,\n\t// // like `8` is the national prefix for Russia and both\n\t// // `8 800 555 35 35` and `800 555 35 35` are valid numbers.\n\t// if (matchesEntirely(number, national_number_rule) &&\n\t// \t\t!matchesEntirely(national_significant_number, national_number_rule))\n\t// {\n\t// \treturn number\n\t// }\n\n\t// Return the parsed national (significant) number\n\treturn {\n\t\tnumber: national_significant_number,\n\t\tcarrierCode: carrierCode\n\t};\n}\n\nfunction find_country_code(country_calling_code, national_phone_number, metadata) {\n\t// Is always non-empty, because `country_calling_code` is always valid\n\tvar possible_countries = metadata.countryCallingCodes()[country_calling_code];\n\n\t// If there's just one country corresponding to the country code,\n\t// then just return it, without further phone number digits validation.\n\tif (possible_countries.length === 1) {\n\t\treturn possible_countries[0];\n\t}\n\n\treturn _find_country_code(possible_countries, national_phone_number, metadata.metadata);\n}\n\n// Changes `metadata` `country`.\nfunction _find_country_code(possible_countries, national_phone_number, metadata) {\n\tmetadata = new _metadata2.default(metadata);\n\n\tfor (var _iterator = possible_countries, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n\t\tvar _ref;\n\n\t\tif (_isArray) {\n\t\t\tif (_i >= _iterator.length) break;\n\t\t\t_ref = _iterator[_i++];\n\t\t} else {\n\t\t\t_i = _iterator.next();\n\t\t\tif (_i.done) break;\n\t\t\t_ref = _i.value;\n\t\t}\n\n\t\tvar country = _ref;\n\n\t\tmetadata.country(country);\n\n\t\t// Leading digits check would be the simplest one\n\t\tif (metadata.leadingDigits()) {\n\t\t\tif (national_phone_number && national_phone_number.search(metadata.leadingDigits()) === 0) {\n\t\t\t\treturn country;\n\t\t\t}\n\t\t}\n\t\t// Else perform full validation with all of those\n\t\t// fixed-line/mobile/etc regular expressions.\n\t\telse if ((0, _getNumberType_2.default)({ phone: national_phone_number, country: country }, undefined, metadata.metadata)) {\n\t\t\t\treturn country;\n\t\t\t}\n\t}\n}\n\n/**\r\n * @param  {string} text - Input.\r\n * @return {object} `{ ?number, ?ext }`.\r\n */\nfunction parse_input(text, v2) {\n\t// Parse RFC 3966 phone number URI.\n\tif (text && text.indexOf('tel:') === 0) {\n\t\treturn (0, _RFC.parseRFC3966)(text);\n\t}\n\n\tvar number = extract_formatted_phone_number(text, v2);\n\n\t// If the phone number is not viable, then abort.\n\tif (!number || !(0, _isViablePhoneNumber2.default)(number)) {\n\t\treturn {};\n\t}\n\n\t// Attempt to parse extension first, since it doesn't require region-specific\n\t// data and we want to have the non-normalised number here.\n\tvar with_extension_stripped = (0, _extension.extractExtension)(number);\n\tif (with_extension_stripped.ext) {\n\t\treturn with_extension_stripped;\n\t}\n\n\treturn { number: number };\n}\n\n/**\r\n * Creates `parse()` result object.\r\n */\nfunction result(country, national_number, ext) {\n\tvar result = {\n\t\tcountry: country,\n\t\tphone: national_number\n\t};\n\n\tif (ext) {\n\t\tresult.ext = ext;\n\t}\n\n\treturn result;\n}\n\n/**\r\n * Parses a viable phone number.\r\n * Returns `{ country, countryCallingCode, national_number }`.\r\n */\nfunction parse_phone_number(formatted_phone_number, default_country, metadata) {\n\tvar _extractCountryCallin = extractCountryCallingCode(formatted_phone_number, default_country, metadata.metadata),\n\t    countryCallingCode = _extractCountryCallin.countryCallingCode,\n\t    number = _extractCountryCallin.number;\n\n\tif (!number) {\n\t\treturn { countryCallingCode: countryCallingCode };\n\t}\n\n\tvar country = void 0;\n\n\tif (countryCallingCode) {\n\t\tmetadata.chooseCountryByCountryCallingCode(countryCallingCode);\n\t} else if (default_country) {\n\t\tmetadata.country(default_country);\n\t\tcountry = default_country;\n\t\tcountryCallingCode = (0, _getCountryCallingCode2.default)(default_country, metadata.metadata);\n\t} else return {};\n\n\tvar _parse_national_numbe = parse_national_number(number, metadata),\n\t    national_number = _parse_national_numbe.national_number,\n\t    carrier_code = _parse_national_numbe.carrier_code;\n\n\t// Sometimes there are several countries\n\t// corresponding to the same country phone code\n\t// (e.g. NANPA countries all having `1` country phone code).\n\t// Therefore, to reliably determine the exact country,\n\t// national (significant) number should have been parsed first.\n\t//\n\t// When `metadata.json` is generated, all \"ambiguous\" country phone codes\n\t// get their countries populated with the full set of\n\t// \"phone number type\" regular expressions.\n\t//\n\n\n\tvar exactCountry = find_country_code(countryCallingCode, national_number, metadata);\n\tif (exactCountry) {\n\t\tcountry = exactCountry;\n\t\tmetadata.country(country);\n\t}\n\n\treturn {\n\t\tcountry: country,\n\t\tcountryCallingCode: countryCallingCode,\n\t\tnational_number: national_number,\n\t\tcarrierCode: carrier_code\n\t};\n}\n\nfunction parse_national_number(number, metadata) {\n\tvar national_number = (0, _parseIncompletePhoneNumber2.default)(number);\n\tvar carrier_code = void 0;\n\n\t// Parsing national prefixes and carrier codes\n\t// is only required for local phone numbers\n\t// but some people don't understand that\n\t// and sometimes write international phone numbers\n\t// with national prefixes (or maybe even carrier codes).\n\t// http://ucken.blogspot.ru/2016/03/trunk-prefixes-in-skype4b.html\n\t// Google's original library forgives such mistakes\n\t// and so does this library, because it has been requested:\n\t// https://github.com/catamphetamine/libphonenumber-js/issues/127\n\n\tvar _strip_national_prefi = strip_national_prefix_and_carrier_code(national_number, metadata),\n\t    potential_national_number = _strip_national_prefi.number,\n\t    carrierCode = _strip_national_prefi.carrierCode;\n\n\t// If metadata has \"possible lengths\" then employ the new algorythm.\n\n\n\tif (metadata.possibleLengths()) {\n\t\t// We require that the NSN remaining after stripping the national prefix and\n\t\t// carrier code be long enough to be a possible length for the region.\n\t\t// Otherwise, we don't do the stripping, since the original number could be\n\t\t// a valid short number.\n\t\tswitch ((0, _getNumberType_.checkNumberLengthForType)(potential_national_number, undefined, metadata)) {\n\t\t\tcase 'TOO_SHORT':\n\t\t\t// case 'IS_POSSIBLE_LOCAL_ONLY':\n\t\t\tcase 'INVALID_LENGTH':\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tnational_number = potential_national_number;\n\t\t\t\tcarrier_code = carrierCode;\n\t\t}\n\t} else {\n\t\t// If the original number (before stripping national prefix) was viable,\n\t\t// and the resultant number is not, then prefer the original phone number.\n\t\t// This is because for some countries (e.g. Russia) the same digit could be both\n\t\t// a national prefix and a leading digit of a valid national phone number,\n\t\t// like `8` is the national prefix for Russia and both\n\t\t// `8 800 555 35 35` and `800 555 35 35` are valid numbers.\n\t\tif ((0, _util.matchesEntirely)(national_number, metadata.nationalNumberPattern()) && !(0, _util.matchesEntirely)(potential_national_number, metadata.nationalNumberPattern())) {\n\t\t\t// Keep the number without stripping national prefix.\n\t\t} else {\n\t\t\tnational_number = potential_national_number;\n\t\t\tcarrier_code = carrierCode;\n\t\t}\n\t}\n\n\treturn {\n\t\tnational_number: national_number,\n\t\tcarrier_code: carrier_code\n\t};\n}\n\n// Determines the country for a given (possibly incomplete) phone number.\n// export function get_country_from_phone_number(number, metadata)\n// {\n// \treturn parse_phone_number(number, null, metadata).country\n// }\n\n// Parses a formatted phone number\n// and returns `{ countryCallingCode, number }`\n// where `number` is just the \"number\" part\n// which is left after extracting `countryCallingCode`\n// and is not necessarily a \"national (significant) number\"\n// and might as well contain national prefix.\n//\nfunction extractCountryCallingCode(number, country, metadata) {\n\tnumber = (0, _parseIncompletePhoneNumber2.default)(number);\n\n\tif (!number) {\n\t\treturn {};\n\t}\n\n\t// If this is not an international phone number,\n\t// then don't extract country phone code.\n\tif (number[0] !== '+') {\n\t\t// Convert an \"out-of-country\" dialing phone number\n\t\t// to a proper international phone number.\n\t\tvar numberWithoutIDD = (0, _IDD.stripIDDPrefix)(number, country, metadata);\n\n\t\t// If an IDD prefix was stripped then\n\t\t// convert the number to international one\n\t\t// for subsequent parsing.\n\t\tif (numberWithoutIDD && numberWithoutIDD !== number) {\n\t\t\tnumber = '+' + numberWithoutIDD;\n\t\t} else {\n\t\t\treturn { number: number };\n\t\t}\n\t}\n\n\t// Fast abortion: country codes do not begin with a '0'\n\tif (number[1] === '0') {\n\t\treturn {};\n\t}\n\n\tmetadata = new _metadata2.default(metadata);\n\n\t// The thing with country phone codes\n\t// is that they are orthogonal to each other\n\t// i.e. there's no such country phone code A\n\t// for which country phone code B exists\n\t// where B starts with A.\n\t// Therefore, while scanning digits,\n\t// if a valid country code is found,\n\t// that means that it is the country code.\n\t//\n\tvar i = 2;\n\twhile (i - 1 <= _constants.MAX_LENGTH_COUNTRY_CODE && i <= number.length) {\n\t\tvar countryCallingCode = number.slice(1, i);\n\n\t\tif (metadata.countryCallingCodes()[countryCallingCode]) {\n\t\t\treturn {\n\t\t\t\tcountryCallingCode: countryCallingCode,\n\t\t\t\tnumber: number.slice(i)\n\t\t\t};\n\t\t}\n\n\t\ti++;\n\t}\n\n\treturn {};\n}\n//# sourceMappingURL=parse_.js.map","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\nexports.onCut = onCut;\nexports.onPaste = onPaste;\nexports.onChange = onChange;\nexports.onKeyDown = onKeyDown;\n\nvar _edit = require('./edit');\n\nvar _edit2 = _interopRequireDefault(_edit);\n\nvar _parse3 = require('./parse');\n\nvar _parse4 = _interopRequireDefault(_parse3);\n\nvar _format2 = require('./format');\n\nvar _format3 = _interopRequireDefault(_format2);\n\nvar _dom = require('./dom');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction onCut(event, input, _parse, _format, on_change) {\n\t// The actual cut hasn't happened just yet hence the timeout.\n\tsetTimeout(function () {\n\t\treturn format_input_text(input, _parse, _format, undefined, on_change);\n\t}, 0);\n}\n\nfunction onPaste(event, input, _parse, _format, on_change) {\n\tvar selection = (0, _dom.getSelection)(input);\n\n\t// If selection is made,\n\t// just erase the selected text\n\t// prior to pasting\n\tif (selection) {\n\t\terase_selection(input, selection);\n\t}\n\n\tformat_input_text(input, _parse, _format, undefined, on_change);\n}\n\nfunction onChange(event, input, _parse, _format, on_change) {\n\tformat_input_text(input, _parse, _format, undefined, on_change);\n}\n\n// Intercepts \"Delete\" and \"Backspace\" keys.\n// (hitting \"Delete\" or \"Backspace\" at any caret\n//  position should always result in rasing a digit)\nfunction onKeyDown(event, input, _parse, _format, on_change) {\n\tvar operation = (0, _dom.getOperation)(event);\n\n\tswitch (operation) {\n\t\tcase 'Delete':\n\t\tcase 'Backspace':\n\t\t\t// Intercept this operation and perform it manually.\n\t\t\tevent.preventDefault();\n\n\t\t\tvar selection = (0, _dom.getSelection)(input);\n\n\t\t\t// If selection is made,\n\t\t\t// just erase the selected text,\n\t\t\t// and don't apply any more operations to it.\n\t\t\tif (selection) {\n\t\t\t\terase_selection(input, selection);\n\t\t\t\treturn format_input_text(input, _parse, _format, undefined, on_change);\n\t\t\t}\n\n\t\t\t// Else, perform the (character erasing) operation manually\n\t\t\treturn format_input_text(input, _parse, _format, operation, on_change);\n\n\t\tdefault:\n\t\t// Will be handled when `onChange` fires.\n\t}\n}\n\n/**\r\n * Erases the selected text inside an `<input/>`.\r\n * @param  {DOMElement} input\r\n * @param  {Selection} selection\r\n */\nfunction erase_selection(input, selection) {\n\tvar text = input.value;\n\ttext = text.slice(0, selection.start) + text.slice(selection.end);\n\n\tinput.value = text;\n\t(0, _dom.setCaretPosition)(input, selection.start);\n}\n\n/**\r\n * Parses and re-formats `<input/>` textual value.\r\n * E.g. when a user enters something into the `<input/>`\r\n * that raw input must first be parsed and the re-formatted properly.\r\n * Is called either after some user input (e.g. entered a character, pasted something)\r\n * or after the user performed an `operation` (e.g. \"Backspace\", \"Delete\").\r\n * @param  {DOMElement} input\r\n * @param  {Function} parse\r\n * @param  {Function} format\r\n * @param  {string} [operation] - The operation that triggered `<input/>` textual value change. E.g. \"Backspace\", \"Delete\".\r\n * @param  {Function} onChange\r\n */\nfunction format_input_text(input, _parse, _format, operation, on_change) {\n\t// Parse `<input/>` textual value.\n\t// Get `value` and `caret` position.\n\tvar _parse2 = (0, _parse4.default)(input.value, (0, _dom.getCaretPosition)(input), _parse),\n\t    value = _parse2.value,\n\t    caret = _parse2.caret;\n\n\t// If a user performed an operation (e.g. \"Backspace\", \"Delete\")\n\t// then apply that operation and get new `value` and `caret` position.\n\n\n\tif (operation) {\n\t\tvar operation_applied = (0, _edit2.default)(value, caret, operation);\n\n\t\tvalue = operation_applied.value;\n\t\tcaret = operation_applied.caret;\n\t}\n\n\t// Format the `value`.\n\t// (and reposition the caret accordingly)\n\tvar formatted = (0, _format3.default)(value, caret, _format);\n\n\tvar text = formatted.text;\n\tcaret = formatted.caret;\n\n\t// Set `<input/>` textual value manually\n\t// to prevent React from resetting the caret position\n\t// later inside subsequent `render()`.\n\t// Doesn't work for custom `inputComponent`s for some reason.\n\tinput.value = text;\n\t// Position the caret properly.\n\t(0, _dom.setCaretPosition)(input, caret);\n\n\t// `<input/>` textual value may have changed,\n\t// so the parsed `value` may have changed too.\n\t// The `value` didn't neccessarily change\n\t// but it might have.\n\ton_change(value);\n}\n//# sourceMappingURL=input control.js.map","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nexports.default = parsePhoneNumber;\nexports.normalizeArguments = normalizeArguments;\n\nvar _parsePhoneNumber_ = require('./parsePhoneNumber_');\n\nvar _parsePhoneNumber_2 = _interopRequireDefault(_parsePhoneNumber_);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction parsePhoneNumber() {\n\tvar _normalizeArguments = normalizeArguments(arguments),\n\t    text = _normalizeArguments.text,\n\t    options = _normalizeArguments.options,\n\t    metadata = _normalizeArguments.metadata;\n\n\treturn (0, _parsePhoneNumber_2.default)(text, options, metadata);\n}\n\nfunction normalizeArguments(args) {\n\tvar _Array$prototype$slic = Array.prototype.slice.call(args),\n\t    _Array$prototype$slic2 = _slicedToArray(_Array$prototype$slic, 4),\n\t    arg_1 = _Array$prototype$slic2[0],\n\t    arg_2 = _Array$prototype$slic2[1],\n\t    arg_3 = _Array$prototype$slic2[2],\n\t    arg_4 = _Array$prototype$slic2[3];\n\n\tvar text = void 0;\n\tvar options = void 0;\n\tvar metadata = void 0;\n\n\t// If the phone number is passed as a string.\n\t// `parsePhoneNumber('88005553535', ...)`.\n\tif (typeof arg_1 === 'string') {\n\t\ttext = arg_1;\n\t} else throw new TypeError('A text for parsing must be a string.');\n\n\t// If \"default country\" argument is being passed then move it to `options`.\n\t// `parsePhoneNumber('88005553535', 'RU', [options], metadata)`.\n\tif (!arg_2 || typeof arg_2 === 'string') {\n\t\tif (arg_4) {\n\t\t\toptions = arg_3;\n\t\t\tmetadata = arg_4;\n\t\t} else {\n\t\t\toptions = undefined;\n\t\t\tmetadata = arg_3;\n\t\t}\n\n\t\tif (arg_2) {\n\t\t\toptions = _extends({ defaultCountry: arg_2 }, options);\n\t\t}\n\t}\n\t// `defaultCountry` is not passed.\n\t// Example: `parsePhoneNumber('+78005553535', [options], metadata)`.\n\telse if (isObject(arg_2)) {\n\t\t\tif (arg_3) {\n\t\t\t\toptions = arg_2;\n\t\t\t\tmetadata = arg_3;\n\t\t\t} else {\n\t\t\t\tmetadata = arg_2;\n\t\t\t}\n\t\t} else throw new Error('Invalid second argument: ' + arg_2);\n\n\treturn {\n\t\ttext: text,\n\t\toptions: options,\n\t\tmetadata: metadata\n\t};\n}\n\n// Otherwise istanbul would show this as \"branch not covered\".\n/* istanbul ignore next */\nvar isObject = function isObject(_) {\n\treturn (typeof _ === 'undefined' ? 'undefined' : _typeof(_)) === 'object';\n};\n//# sourceMappingURL=parsePhoneNumber.js.map","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\nexports.default = getNumberType;\nexports.is_of_type = is_of_type;\nexports.checkNumberLengthForType = checkNumberLengthForType;\n\nvar _metadata = require('./metadata');\n\nvar _metadata2 = _interopRequireDefault(_metadata);\n\nvar _util = require('./util');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar NON_FIXED_LINE_PHONE_TYPES = ['MOBILE', 'PREMIUM_RATE', 'TOLL_FREE', 'SHARED_COST', 'VOIP', 'PERSONAL_NUMBER', 'PAGER', 'UAN', 'VOICEMAIL'];\n\n// Finds out national phone number type (fixed line, mobile, etc)\nfunction getNumberType(input) {\n\tvar options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\tvar metadata = arguments[2];\n\n\t// When `parse()` returned `{}`\n\t// meaning that the phone number is not a valid one.\n\tif (!input.country) {\n\t\treturn;\n\t}\n\n\tmetadata = new _metadata2.default(metadata);\n\n\tif (!metadata.hasCountry(input.country)) {\n\t\tthrow new Error('Unknown country: ' + input.country);\n\t}\n\n\tvar nationalNumber = options.v2 ? input.nationalNumber : input.phone;\n\tmetadata.country(input.country);\n\n\t// The following is copy-pasted from the original function:\n\t// https://github.com/googlei18n/libphonenumber/blob/3ea547d4fbaa2d0b67588904dfa5d3f2557c27ff/javascript/i18n/phonenumbers/phonenumberutil.js#L2835\n\n\t// Is this national number even valid for this country\n\tif (!(0, _util.matchesEntirely)(nationalNumber, metadata.nationalNumberPattern())) {\n\t\treturn;\n\t}\n\n\t// Is it fixed line number\n\tif (is_of_type(nationalNumber, 'FIXED_LINE', metadata)) {\n\t\t// Because duplicate regular expressions are removed\n\t\t// to reduce metadata size, if \"mobile\" pattern is \"\"\n\t\t// then it means it was removed due to being a duplicate of the fixed-line pattern.\n\t\t//\n\t\tif (metadata.type('MOBILE') && metadata.type('MOBILE').pattern() === '') {\n\t\t\treturn 'FIXED_LINE_OR_MOBILE';\n\t\t}\n\n\t\t// v1 metadata.\n\t\t// Legacy.\n\t\t// Deprecated.\n\t\tif (!metadata.type('MOBILE')) {\n\t\t\treturn 'FIXED_LINE_OR_MOBILE';\n\t\t}\n\n\t\t// Check if the number happens to qualify as both fixed line and mobile.\n\t\t// (no such country in the minimal metadata set)\n\t\t/* istanbul ignore if */\n\t\tif (is_of_type(nationalNumber, 'MOBILE', metadata)) {\n\t\t\treturn 'FIXED_LINE_OR_MOBILE';\n\t\t}\n\n\t\treturn 'FIXED_LINE';\n\t}\n\n\tfor (var _iterator = NON_FIXED_LINE_PHONE_TYPES, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n\t\tvar _ref;\n\n\t\tif (_isArray) {\n\t\t\tif (_i >= _iterator.length) break;\n\t\t\t_ref = _iterator[_i++];\n\t\t} else {\n\t\t\t_i = _iterator.next();\n\t\t\tif (_i.done) break;\n\t\t\t_ref = _i.value;\n\t\t}\n\n\t\tvar _type = _ref;\n\n\t\tif (is_of_type(nationalNumber, _type, metadata)) {\n\t\t\treturn _type;\n\t\t}\n\t}\n}\n\nfunction is_of_type(nationalNumber, type, metadata) {\n\ttype = metadata.type(type);\n\n\tif (!type || !type.pattern()) {\n\t\treturn false;\n\t}\n\n\t// Check if any possible number lengths are present;\n\t// if so, we use them to avoid checking\n\t// the validation pattern if they don't match.\n\t// If they are absent, this means they match\n\t// the general description, which we have\n\t// already checked before a specific number type.\n\tif (type.possibleLengths() && type.possibleLengths().indexOf(nationalNumber.length) < 0) {\n\t\treturn false;\n\t}\n\n\treturn (0, _util.matchesEntirely)(nationalNumber, type.pattern());\n}\n\n// Should only be called for the \"new\" metadata which has \"possible lengths\".\nfunction checkNumberLengthForType(nationalNumber, type, metadata) {\n\tvar type_info = metadata.type(type);\n\n\t// There should always be \"<possiblePengths/>\" set for every type element.\n\t// This is declared in the XML schema.\n\t// For size efficiency, where a sub-description (e.g. fixed-line)\n\t// has the same \"<possiblePengths/>\" as the \"general description\", this is missing,\n\t// so we fall back to the \"general description\". Where no numbers of the type\n\t// exist at all, there is one possible length (-1) which is guaranteed\n\t// not to match the length of any real phone number.\n\tvar possible_lengths = type_info && type_info.possibleLengths() || metadata.possibleLengths();\n\t// let local_lengths    = type_info && type.possibleLengthsLocal() || metadata.possibleLengthsLocal()\n\n\tif (type === 'FIXED_LINE_OR_MOBILE') {\n\t\t// No such country in metadata.\n\t\t/* istanbul ignore next */\n\t\tif (!metadata.type('FIXED_LINE')) {\n\t\t\t// The rare case has been encountered where no fixedLine data is available\n\t\t\t// (true for some non-geographical entities), so we just check mobile.\n\t\t\treturn checkNumberLengthForType(nationalNumber, 'MOBILE', metadata);\n\t\t}\n\n\t\tvar mobile_type = metadata.type('MOBILE');\n\n\t\tif (mobile_type) {\n\t\t\t// Merge the mobile data in if there was any. \"Concat\" creates a new\n\t\t\t// array, it doesn't edit possible_lengths in place, so we don't need a copy.\n\t\t\t// Note that when adding the possible lengths from mobile, we have\n\t\t\t// to again check they aren't empty since if they are this indicates\n\t\t\t// they are the same as the general desc and should be obtained from there.\n\t\t\tpossible_lengths = (0, _util.mergeArrays)(possible_lengths, mobile_type.possibleLengths());\n\t\t\t// The current list is sorted; we need to merge in the new list and\n\t\t\t// re-sort (duplicates are okay). Sorting isn't so expensive because\n\t\t\t// the lists are very small.\n\n\t\t\t// if (local_lengths)\n\t\t\t// {\n\t\t\t// \tlocal_lengths = mergeArrays(local_lengths, mobile_type.possibleLengthsLocal())\n\t\t\t// }\n\t\t\t// else\n\t\t\t// {\n\t\t\t// \tlocal_lengths = mobile_type.possibleLengthsLocal()\n\t\t\t// }\n\t\t}\n\t}\n\t// If the type doesn't exist then return 'INVALID_LENGTH'.\n\telse if (type && !type_info) {\n\t\t\treturn 'INVALID_LENGTH';\n\t\t}\n\n\tvar actual_length = nationalNumber.length;\n\n\t// In `libphonenumber-js` all \"local-only\" formats are dropped for simplicity.\n\t// // This is safe because there is never an overlap beween the possible lengths\n\t// // and the local-only lengths; this is checked at build time.\n\t// if (local_lengths && local_lengths.indexOf(nationalNumber.length) >= 0)\n\t// {\n\t// \treturn 'IS_POSSIBLE_LOCAL_ONLY'\n\t// }\n\n\tvar minimum_length = possible_lengths[0];\n\n\tif (minimum_length === actual_length) {\n\t\treturn 'IS_POSSIBLE';\n\t}\n\n\tif (minimum_length > actual_length) {\n\t\treturn 'TOO_SHORT';\n\t}\n\n\tif (possible_lengths[possible_lengths.length - 1] < actual_length) {\n\t\treturn 'TOO_LONG';\n\t}\n\n\t// We skip the first element since we've already checked it.\n\treturn possible_lengths.indexOf(actual_length, 1) >= 0 ? 'IS_POSSIBLE' : 'INVALID_LENGTH';\n}\n//# sourceMappingURL=getNumberType_.js.map","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\nexports.matchesEntirely = matchesEntirely;\nexports.mergeArrays = mergeArrays;\n// Checks whether the entire input sequence can be matched\n// against the regular expression.\nfunction matchesEntirely() {\n\tvar text = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n\tvar regular_expression = arguments[1];\n\n\treturn new RegExp('^(?:' + regular_expression + ')$').test(text);\n}\n\n/**\r\n * Merges two arrays.\r\n * @param  {*} a\r\n * @param  {*} b\r\n * @return {*}\r\n */\nfunction mergeArrays(a, b) {\n\tvar merged = a.slice();\n\n\tfor (var _iterator = b, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n\t\tvar _ref;\n\n\t\tif (_isArray) {\n\t\t\tif (_i >= _iterator.length) break;\n\t\t\t_ref = _iterator[_i++];\n\t\t} else {\n\t\t\t_i = _iterator.next();\n\t\t\tif (_i.done) break;\n\t\t\t_ref = _i.value;\n\t\t}\n\n\t\tvar element = _ref;\n\n\t\tif (a.indexOf(element) < 0) {\n\t\t\tmerged.push(element);\n\t\t}\n\t}\n\n\treturn merged.sort(function (a, b) {\n\t\treturn a - b;\n\t});\n\n\t// ES6 version, requires Set polyfill.\n\t// let merged = new Set(a)\n\t// for (const element of b)\n\t// {\n\t// \tmerged.add(i)\n\t// }\n\t// return Array.from(merged).sort((a, b) => a - b)\n}\n//# sourceMappingURL=util.js.map","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\nexports.default = parse;\n// Parses the `text`.\n//\n// Returns `{ value, caret }` where `caret` is\n// the caret position inside `value`\n// corresponding to the `caret_position` inside `text`.\n//\n// The `text` is parsed by feeding each character sequentially to\n// `parse_character(character, value)` function\n// and appending the result (if it's not `undefined`) to `value`.\n//\n// Example:\n//\n// `text` is `8 (800) 555-35-35`,\n// `caret_position` is `4` (before the first `0`).\n// `parse_character` is `(character, value) =>\n//   if (character >= '0' && character <= '9') { return character }`.\n//\n// then `parse()` outputs `{ value: '88005553535', caret: 2 }`.\n//\nfunction parse(text, caret_position, parse_character) {\n\tvar value = '';\n\n\tvar focused_input_character_index = 0;\n\n\tvar index = 0;\n\twhile (index < text.length) {\n\t\tvar character = parse_character(text[index], value);\n\n\t\tif (character !== undefined) {\n\t\t\tvalue += character;\n\n\t\t\tif (caret_position !== undefined) {\n\t\t\t\tif (caret_position === index) {\n\t\t\t\t\tfocused_input_character_index = value.length - 1;\n\t\t\t\t} else if (caret_position > index) {\n\t\t\t\t\tfocused_input_character_index = value.length;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tindex++;\n\t}\n\n\t// If caret position wasn't specified\n\tif (caret_position === undefined) {\n\t\t// Then set caret position to \"after the last input character\"\n\t\tfocused_input_character_index = value.length;\n\t}\n\n\tvar result = {\n\t\tvalue: value,\n\t\tcaret: focused_input_character_index\n\t};\n\n\treturn result;\n}\n//# sourceMappingURL=parse.js.map","// Deprecated.\r\n// Use `libphonenumber-js/min` or `libphonenumber-js/max` or `libphonenumber-js/core` instead.\r\n\r\n'use strict'\r\n\r\nexports = module.exports = {}\r\n\r\nexports.ParseError = require('./build/ParseError').default\r\nexports.parsePhoneNumber = require('./build/parsePhoneNumber').default\r\nexports.parsePhoneNumberFromString = require('./build/parsePhoneNumberFromString').default\r\n\r\n// Deprecated: remove `parse()` export in 2.0.0.\r\n// (renamed to `parseNumber()`)\r\nexports.parse              = require('./build/parse').default\r\nexports.parseNumber        = require('./build/parse').default\r\n// Deprecated: remove `format()` export in 2.0.0.\r\n// (renamed to `formatNumber()`)\r\nexports.format             = require('./build/format').default\r\nexports.formatNumber       = require('./build/format').default\r\nexports.getNumberType      = require('./build/getNumberType').default\r\nexports.getExampleNumber   = require('./build/getExampleNumber').default\r\nexports.isPossibleNumber   = require('./build/isPossibleNumber').default\r\nexports.isValidNumber      = require('./build/validate').default\r\nexports.isValidNumberForRegion = require('./build/isValidNumberForRegion').default\r\n\r\nexports.findNumbers        = require('./build/findNumbers').default\r\nexports.searchNumbers      = require('./build/searchNumbers').default\r\nexports.PhoneNumberMatcher = require('./build/PhoneNumberMatcher').default\r\n\r\n// Deprecated.\r\nexports.findPhoneNumbers   = require('./build/findPhoneNumbers').default\r\nexports.searchPhoneNumbers = require('./build/findPhoneNumbers').searchPhoneNumbers\r\nexports.PhoneNumberSearch  = require('./build/findPhoneNumbers_').PhoneNumberSearch\r\n\r\nexports.AsYouType = require('./build/AsYouType').default\r\n\r\nexports.formatIncompletePhoneNumber = require('./build/formatIncompletePhoneNumber').default\r\nexports.parseIncompletePhoneNumber  = require('./build/parseIncompletePhoneNumber').default\r\nexports.parsePhoneNumberCharacter   = require('./build/parseIncompletePhoneNumber').parsePhoneNumberCharacter\r\nexports.parseDigits   = require('./build/parseDigits').default\r\n\r\n// Deprecated: `DIGITS` were used by `react-phone-number-input`.\r\n// Replaced by `parseDigits()`.\r\n//\r\n// Deprecated: `DIGIT_PLACEHOLDER` was used by `react-phone-number-input`.\r\n// Not used anymore.\r\n//\r\nexports.DIGITS            = require('./build/parseDigits').DIGITS\r\nexports.DIGIT_PLACEHOLDER = require('./build/AsYouType').DIGIT_PLACEHOLDER\r\n\r\nexports.getCountryCallingCode = require('./build/getCountryCallingCode').default\r\n// `getPhoneCode` name is deprecated, use `getCountryCallingCode` instead.\r\nexports.getPhoneCode = exports.getCountryCallingCode\r\n\r\nexports.Metadata = require('./build/metadata').default\r\nexports.isSupportedCountry = require('./build/metadata').isSupportedCountry\r\nexports.getExtPrefix = require('./build/metadata').getExtPrefix\r\n\r\nexports.parseRFC3966 = require('./build/RFC3966').parseRFC3966\r\nexports.formatRFC3966 = require('./build/RFC3966').formatRFC3966\r\n\r\n// exports['default'] = ...","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\nexports.default = isViablePhoneNumber;\n\nvar _constants = require('./constants');\n\nvar _extension = require('./extension');\n\n//  Regular expression of viable phone numbers. This is location independent.\n//  Checks we have at least three leading digits, and only valid punctuation,\n//  alpha characters and digits in the phone number. Does not include extension\n//  data. The symbol 'x' is allowed here as valid punctuation since it is often\n//  used as a placeholder for carrier codes, for example in Brazilian phone\n//  numbers. We also allow multiple '+' characters at the start.\n//\n//  Corresponds to the following:\n//  [digits]{minLengthNsn}|\n//  plus_sign*\n//  (([punctuation]|[star])*[digits]){3,}([punctuation]|[star]|[digits]|[alpha])*\n//\n//  The first reg-ex is to allow short numbers (two digits long) to be parsed if\n//  they are entered as \"15\" etc, but only if there is no punctuation in them.\n//  The second expression restricts the number of digits to three or more, but\n//  then allows them to be in international form, and to have alpha-characters\n//  and punctuation. We split up the two reg-exes here and combine them when\n//  creating the reg-ex VALID_PHONE_NUMBER_PATTERN itself so we can prefix it\n//  with ^ and append $ to each branch.\n//\n//  \"Note VALID_PUNCTUATION starts with a -,\n//   so must be the first in the range\" (c) Google devs.\n//  (wtf did they mean by saying that; probably nothing)\n//\nvar MIN_LENGTH_PHONE_NUMBER_PATTERN = '[' + _constants.VALID_DIGITS + ']{' + _constants.MIN_LENGTH_FOR_NSN + '}';\n//\n// And this is the second reg-exp:\n// (see MIN_LENGTH_PHONE_NUMBER_PATTERN for a full description of this reg-exp)\n//\nvar VALID_PHONE_NUMBER = '[' + _constants.PLUS_CHARS + ']{0,1}' + '(?:' + '[' + _constants.VALID_PUNCTUATION + ']*' + '[' + _constants.VALID_DIGITS + ']' + '){3,}' + '[' + _constants.VALID_PUNCTUATION + _constants.VALID_DIGITS + ']*';\n\n// The combined regular expression for valid phone numbers:\n//\nvar VALID_PHONE_NUMBER_PATTERN = new RegExp(\n// Either a short two-digit-only phone number\n'^' + MIN_LENGTH_PHONE_NUMBER_PATTERN + '$' + '|' +\n// Or a longer fully parsed phone number (min 3 characters)\n'^' + VALID_PHONE_NUMBER +\n// Phone number extensions\n'(?:' + _extension.EXTN_PATTERNS_FOR_PARSING + ')?' + '$', 'i');\n\n// Checks to see if the string of characters could possibly be a phone number at\n// all. At the moment, checks to see that the string begins with at least 2\n// digits, ignoring any punctuation commonly found in phone numbers. This method\n// does not require the number to be normalized in advance - but does assume\n// that leading non-number symbols have been removed, such as by the method\n// `extract_possible_number`.\n//\nfunction isViablePhoneNumber(number) {\n\treturn number.length >= _constants.MIN_LENGTH_FOR_NSN && VALID_PHONE_NUMBER_PATTERN.test(number);\n}\n//# sourceMappingURL=isViablePhoneNumber.js.map","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\nexports.EXTN_PATTERNS_FOR_MATCHING = exports.EXTN_PATTERNS_FOR_PARSING = undefined;\nexports.extractExtension = extractExtension;\n\nvar _constants = require('./constants');\n\n// The RFC 3966 format for extensions.\nvar RFC3966_EXTN_PREFIX = ';ext=';\n\n// Pattern to capture digits used in an extension.\n// Places a maximum length of '7' for an extension.\nvar CAPTURING_EXTN_DIGITS = '([' + _constants.VALID_DIGITS + ']{1,7})';\n\n/**\r\n * Regexp of all possible ways to write extensions, for use when parsing. This\r\n * will be run as a case-insensitive regexp match. Wide character versions are\r\n * also provided after each ASCII version. There are three regular expressions\r\n * here. The first covers RFC 3966 format, where the extension is added using\r\n * ';ext='. The second more generic one starts with optional white space and\r\n * ends with an optional full stop (.), followed by zero or more spaces/tabs\r\n * /commas and then the numbers themselves. The other one covers the special\r\n * case of American numbers where the extension is written with a hash at the\r\n * end, such as '- 503#'. Note that the only capturing groups should be around\r\n * the digits that you want to capture as part of the extension, or else parsing\r\n * will fail! We allow two options for representing the accented o - the\r\n * character itself, and one in the unicode decomposed form with the combining\r\n * acute accent.\r\n */\nfunction create_extension_pattern(purpose) {\n\t// One-character symbols that can be used to indicate an extension.\n\tvar single_extension_characters = 'x\\uFF58#\\uFF03~\\uFF5E';\n\n\tswitch (purpose) {\n\t\t// For parsing, we are slightly more lenient in our interpretation than for matching. Here we\n\t\t// allow \"comma\" and \"semicolon\" as possible extension indicators. When matching, these are\n\t\tcase 'parsing':\n\t\t\tsingle_extension_characters = ',;' + single_extension_characters;\n\t}\n\n\treturn RFC3966_EXTN_PREFIX + CAPTURING_EXTN_DIGITS + '|' + '[ \\xA0\\\\t,]*' + '(?:e?xt(?:ensi(?:o\\u0301?|\\xF3))?n?|\\uFF45?\\uFF58\\uFF54\\uFF4E?|' +\n\t// \"доб.\"\n\t'\\u0434\\u043E\\u0431|' + '[' + single_extension_characters + ']|int|anexo|\\uFF49\\uFF4E\\uFF54)' + '[:\\\\.\\uFF0E]?[ \\xA0\\\\t,-]*' + CAPTURING_EXTN_DIGITS + '#?|' + '[- ]+([' + _constants.VALID_DIGITS + ']{1,5})#';\n}\n\n/**\r\n * Regexp of all possible ways to write extensions, for use when parsing. This\r\n * will be run as a case-insensitive regexp match. Wide character versions are\r\n * also provided after each ASCII version. There are three regular expressions\r\n * here. The first covers RFC 3966 format, where the extension is added using\r\n * ';ext='. The second more generic one starts with optional white space and\r\n * ends with an optional full stop (.), followed by zero or more spaces/tabs\r\n * /commas and then the numbers themselves. The other one covers the special\r\n * case of American numbers where the extension is written with a hash at the\r\n * end, such as '- 503#'. Note that the only capturing groups should be around\r\n * the digits that you want to capture as part of the extension, or else parsing\r\n * will fail! We allow two options for representing the accented o - the\r\n * character itself, and one in the unicode decomposed form with the combining\r\n * acute accent.\r\n */\nvar EXTN_PATTERNS_FOR_PARSING = exports.EXTN_PATTERNS_FOR_PARSING = create_extension_pattern('parsing');\n\nvar EXTN_PATTERNS_FOR_MATCHING = exports.EXTN_PATTERNS_FOR_MATCHING = create_extension_pattern('matching');\n\n// Regexp of all known extension prefixes used by different regions followed by\n// 1 or more valid digits, for use when parsing.\nvar EXTN_PATTERN = new RegExp('(?:' + EXTN_PATTERNS_FOR_PARSING + ')$', 'i');\n\n// Strips any extension (as in, the part of the number dialled after the call is\n// connected, usually indicated with extn, ext, x or similar) from the end of\n// the number, and returns it.\nfunction extractExtension(number) {\n\tvar start = number.search(EXTN_PATTERN);\n\tif (start < 0) {\n\t\treturn {};\n\t}\n\n\t// If we find a potential extension, and the number preceding this is a viable\n\t// number, we assume it is an extension.\n\tvar number_without_extension = number.slice(0, start);\n\n\tvar matches = number.match(EXTN_PATTERN);\n\tvar i = 1;\n\twhile (i < matches.length) {\n\t\tif (matches[i] != null && matches[i].length > 0) {\n\t\t\treturn {\n\t\t\t\tnumber: number_without_extension,\n\t\t\t\text: matches[i]\n\t\t\t};\n\t\t}\n\t\ti++;\n\t}\n}\n//# sourceMappingURL=extension.js.map","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\nexports.default = parseIncompletePhoneNumber;\nexports.parsePhoneNumberCharacter = parsePhoneNumberCharacter;\n\nvar _parseDigits = require('./parseDigits');\n\n/**\r\n * Parses phone number characters from a string.\r\n * Drops all punctuation leaving only digits and the leading `+` sign (if any).\r\n * Also converts wide-ascii and arabic-indic numerals to conventional numerals.\r\n * E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.\r\n * @param  {string} string\r\n * @return {string}\r\n * @example\r\n * ```js\r\n * parseIncompletePhoneNumber('8 (800) 555')\r\n * // Outputs '8800555'.\r\n * parseIncompletePhoneNumber('+7 800 555')\r\n * // Outputs '+7800555'.\r\n * ```\r\n */\nfunction parseIncompletePhoneNumber(string) {\n\tvar result = '';\n\n\t// Using `.split('')` here instead of normal `for ... of`\n\t// because the importing application doesn't neccessarily include an ES6 polyfill.\n\t// The `.split('')` approach discards \"exotic\" UTF-8 characters\n\t// (the ones consisting of four bytes) but digits\n\t// (including non-European ones) don't fall into that range\n\t// so such \"exotic\" characters would be discarded anyway.\n\tfor (var _iterator = string.split(''), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n\t\tvar _ref;\n\n\t\tif (_isArray) {\n\t\t\tif (_i >= _iterator.length) break;\n\t\t\t_ref = _iterator[_i++];\n\t\t} else {\n\t\t\t_i = _iterator.next();\n\t\t\tif (_i.done) break;\n\t\t\t_ref = _i.value;\n\t\t}\n\n\t\tvar character = _ref;\n\n\t\tresult += parsePhoneNumberCharacter(character, result) || '';\n\t}\n\n\treturn result;\n}\n\n/**\r\n * `input-format` `parse()` function.\r\n * https://github.com/catamphetamine/input-format\r\n * @param  {string} character - Yet another character from raw input string.\r\n * @param  {string} value - The value parsed so far.\r\n * @param  {object} meta - Optional custom use-case-specific metadata.\r\n * @return {string?} The parsed character.\r\n */\nfunction parsePhoneNumberCharacter(character, value) {\n\t// Only allow a leading `+`.\n\tif (character === '+') {\n\t\t// If this `+` is not the first parsed character\n\t\t// then discard it.\n\t\tif (value) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn '+';\n\t}\n\n\t// Allow digits.\n\treturn (0, _parseDigits.parseDigit)(character);\n}\n//# sourceMappingURL=parseIncompletePhoneNumber.js.map","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\nexports.parseDigit = parseDigit;\nexports.default = parseDigits;\n// These mappings map a character (key) to a specific digit that should\n// replace it for normalization purposes. Non-European digits that\n// may be used in phone numbers are mapped to a European equivalent.\n//\n// E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.\n//\nvar DIGITS = exports.DIGITS = {\n\t'0': '0',\n\t'1': '1',\n\t'2': '2',\n\t'3': '3',\n\t'4': '4',\n\t'5': '5',\n\t'6': '6',\n\t'7': '7',\n\t'8': '8',\n\t'9': '9',\n\t'\\uFF10': '0', // Fullwidth digit 0\n\t'\\uFF11': '1', // Fullwidth digit 1\n\t'\\uFF12': '2', // Fullwidth digit 2\n\t'\\uFF13': '3', // Fullwidth digit 3\n\t'\\uFF14': '4', // Fullwidth digit 4\n\t'\\uFF15': '5', // Fullwidth digit 5\n\t'\\uFF16': '6', // Fullwidth digit 6\n\t'\\uFF17': '7', // Fullwidth digit 7\n\t'\\uFF18': '8', // Fullwidth digit 8\n\t'\\uFF19': '9', // Fullwidth digit 9\n\t'\\u0660': '0', // Arabic-indic digit 0\n\t'\\u0661': '1', // Arabic-indic digit 1\n\t'\\u0662': '2', // Arabic-indic digit 2\n\t'\\u0663': '3', // Arabic-indic digit 3\n\t'\\u0664': '4', // Arabic-indic digit 4\n\t'\\u0665': '5', // Arabic-indic digit 5\n\t'\\u0666': '6', // Arabic-indic digit 6\n\t'\\u0667': '7', // Arabic-indic digit 7\n\t'\\u0668': '8', // Arabic-indic digit 8\n\t'\\u0669': '9', // Arabic-indic digit 9\n\t'\\u06F0': '0', // Eastern-Arabic digit 0\n\t'\\u06F1': '1', // Eastern-Arabic digit 1\n\t'\\u06F2': '2', // Eastern-Arabic digit 2\n\t'\\u06F3': '3', // Eastern-Arabic digit 3\n\t'\\u06F4': '4', // Eastern-Arabic digit 4\n\t'\\u06F5': '5', // Eastern-Arabic digit 5\n\t'\\u06F6': '6', // Eastern-Arabic digit 6\n\t'\\u06F7': '7', // Eastern-Arabic digit 7\n\t'\\u06F8': '8', // Eastern-Arabic digit 8\n\t'\\u06F9': '9' // Eastern-Arabic digit 9\n};\n\nfunction parseDigit(character) {\n\treturn DIGITS[character];\n}\n\n/**\r\n * Parses phone number digits from a string.\r\n * Drops all punctuation leaving only digits.\r\n * Also converts wide-ascii and arabic-indic numerals to conventional numerals.\r\n * E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.\r\n * @param  {string} string\r\n * @return {string}\r\n * @example\r\n * ```js\r\n * parseDigits('8 (800) 555')\r\n * // Outputs '8800555'.\r\n * ```\r\n */\nfunction parseDigits(string) {\n\tvar result = '';\n\n\t// Using `.split('')` here instead of normal `for ... of`\n\t// because the importing application doesn't neccessarily include an ES6 polyfill.\n\t// The `.split('')` approach discards \"exotic\" UTF-8 characters\n\t// (the ones consisting of four bytes) but digits\n\t// (including non-European ones) don't fall into that range\n\t// so such \"exotic\" characters would be discarded anyway.\n\tfor (var _iterator = string.split(''), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n\t\tvar _ref;\n\n\t\tif (_isArray) {\n\t\t\tif (_i >= _iterator.length) break;\n\t\t\t_ref = _iterator[_i++];\n\t\t} else {\n\t\t\t_i = _iterator.next();\n\t\t\tif (_i.done) break;\n\t\t\t_ref = _i.value;\n\t\t}\n\n\t\tvar character = _ref;\n\n\t\tvar digit = parseDigit(character);\n\t\tif (digit) {\n\t\t\tresult += digit;\n\t\t}\n\t}\n\n\treturn result;\n}\n//# sourceMappingURL=parseDigits.js.map","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nexports.parseRFC3966 = parseRFC3966;\nexports.formatRFC3966 = formatRFC3966;\n\nvar _isViablePhoneNumber = require('./isViablePhoneNumber');\n\nvar _isViablePhoneNumber2 = _interopRequireDefault(_isViablePhoneNumber);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// https://www.ietf.org/rfc/rfc3966.txt\n\n/**\r\n * @param  {string} text - Phone URI (RFC 3966).\r\n * @return {object} `{ ?number, ?ext }`.\r\n */\nfunction parseRFC3966(text) {\n\tvar number = void 0;\n\tvar ext = void 0;\n\n\t// Replace \"tel:\" with \"tel=\" for parsing convenience.\n\ttext = text.replace(/^tel:/, 'tel=');\n\n\tfor (var _iterator = text.split(';'), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n\t\tvar _ref;\n\n\t\tif (_isArray) {\n\t\t\tif (_i >= _iterator.length) break;\n\t\t\t_ref = _iterator[_i++];\n\t\t} else {\n\t\t\t_i = _iterator.next();\n\t\t\tif (_i.done) break;\n\t\t\t_ref = _i.value;\n\t\t}\n\n\t\tvar part = _ref;\n\n\t\tvar _part$split = part.split('='),\n\t\t    _part$split2 = _slicedToArray(_part$split, 2),\n\t\t    name = _part$split2[0],\n\t\t    value = _part$split2[1];\n\n\t\tswitch (name) {\n\t\t\tcase 'tel':\n\t\t\t\tnumber = value;\n\t\t\t\tbreak;\n\t\t\tcase 'ext':\n\t\t\t\text = value;\n\t\t\t\tbreak;\n\t\t\tcase 'phone-context':\n\t\t\t\t// Only \"country contexts\" are supported.\n\t\t\t\t// \"Domain contexts\" are ignored.\n\t\t\t\tif (value[0] === '+') {\n\t\t\t\t\tnumber = value + number;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\t// If the phone number is not viable, then abort.\n\tif (!(0, _isViablePhoneNumber2.default)(number)) {\n\t\treturn {};\n\t}\n\n\tvar result = { number: number };\n\tif (ext) {\n\t\tresult.ext = ext;\n\t}\n\treturn result;\n}\n\n/**\r\n * @param  {object} - `{ ?number, ?extension }`.\r\n * @return {string} Phone URI (RFC 3966).\r\n */\nfunction formatRFC3966(_ref2) {\n\tvar number = _ref2.number,\n\t    ext = _ref2.ext;\n\n\tif (!number) {\n\t\treturn '';\n\t}\n\n\tif (number[0] !== '+') {\n\t\tthrow new Error('\"formatRFC3966()\" expects \"number\" to be in E.164 format.');\n\t}\n\n\treturn 'tel:' + number + (ext ? ';ext=' + ext : '');\n}\n//# sourceMappingURL=RFC3966.js.map","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _metadata2 = require('./metadata');\n\nvar _metadata3 = _interopRequireDefault(_metadata2);\n\nvar _isPossibleNumber_ = require('./isPossibleNumber_');\n\nvar _isPossibleNumber_2 = _interopRequireDefault(_isPossibleNumber_);\n\nvar _validate_ = require('./validate_');\n\nvar _validate_2 = _interopRequireDefault(_validate_);\n\nvar _isValidNumberForRegion_ = require('./isValidNumberForRegion_');\n\nvar _isValidNumberForRegion_2 = _interopRequireDefault(_isValidNumberForRegion_);\n\nvar _getNumberType_ = require('./getNumberType_');\n\nvar _getNumberType_2 = _interopRequireDefault(_getNumberType_);\n\nvar _format_ = require('./format_');\n\nvar _format_2 = _interopRequireDefault(_format_);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar PhoneNumber = function () {\n\tfunction PhoneNumber(countryCallingCode, nationalNumber, metadata) {\n\t\t_classCallCheck(this, PhoneNumber);\n\n\t\tif (!countryCallingCode) {\n\t\t\tthrow new TypeError('`countryCallingCode` not passed');\n\t\t}\n\t\tif (!nationalNumber) {\n\t\t\tthrow new TypeError('`nationalNumber` not passed');\n\t\t}\n\t\t// If country code is passed then derive `countryCallingCode` from it.\n\t\t// Also store the country code as `.country`.\n\t\tif (isCountryCode(countryCallingCode)) {\n\t\t\tthis.country = countryCallingCode;\n\t\t\tvar _metadata = new _metadata3.default(metadata);\n\t\t\t_metadata.country(countryCallingCode);\n\t\t\tcountryCallingCode = _metadata.countryCallingCode();\n\t\t}\n\t\tthis.countryCallingCode = countryCallingCode;\n\t\tthis.nationalNumber = nationalNumber;\n\t\tthis.number = '+' + this.countryCallingCode + this.nationalNumber;\n\t\tthis.metadata = metadata;\n\t}\n\n\t_createClass(PhoneNumber, [{\n\t\tkey: 'isPossible',\n\t\tvalue: function isPossible() {\n\t\t\treturn (0, _isPossibleNumber_2.default)(this, { v2: true }, this.metadata);\n\t\t}\n\t}, {\n\t\tkey: 'isValid',\n\t\tvalue: function isValid() {\n\t\t\treturn (0, _validate_2.default)(this, { v2: true }, this.metadata);\n\t\t}\n\n\t\t// // Is just an alias for `this.isValid() && this.country === country`.\n\t\t// // https://github.com/googlei18n/libphonenumber/blob/master/FAQ.md#when-should-i-use-isvalidnumberforregion\n\t\t// isValidForRegion(country) {\n\t\t// \treturn isValidNumberForRegion(this, country, { v2: true }, this.metadata)\n\t\t// }\n\n\t}, {\n\t\tkey: 'getType',\n\t\tvalue: function getType() {\n\t\t\treturn (0, _getNumberType_2.default)(this, { v2: true }, this.metadata);\n\t\t}\n\t}, {\n\t\tkey: 'format',\n\t\tvalue: function format(_format, options) {\n\t\t\treturn (0, _format_2.default)(this, _format, options ? _extends({}, options, { v2: true }) : { v2: true }, this.metadata);\n\t\t}\n\t}, {\n\t\tkey: 'formatNational',\n\t\tvalue: function formatNational(options) {\n\t\t\treturn this.format('NATIONAL', options);\n\t\t}\n\t}, {\n\t\tkey: 'formatInternational',\n\t\tvalue: function formatInternational(options) {\n\t\t\treturn this.format('INTERNATIONAL', options);\n\t\t}\n\t}, {\n\t\tkey: 'getURI',\n\t\tvalue: function getURI(options) {\n\t\t\treturn this.format('RFC3966', options);\n\t\t}\n\t}]);\n\n\treturn PhoneNumber;\n}();\n\nexports.default = PhoneNumber;\n\n\nvar isCountryCode = function isCountryCode(value) {\n\treturn (/^[A-Z]{2}$/.test(value)\n\t);\n};\n//# sourceMappingURL=PhoneNumber.js.map","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isValidNumber;\n\nvar _metadata = require('./metadata');\n\nvar _metadata2 = _interopRequireDefault(_metadata);\n\nvar _util = require('./util');\n\nvar _getNumberType_ = require('./getNumberType_');\n\nvar _getNumberType_2 = _interopRequireDefault(_getNumberType_);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\r\n * Checks if a given phone number is valid.\r\n *\r\n * If the `number` is a string, it will be parsed to an object,\r\n * but only if it contains only valid phone number characters (including punctuation).\r\n * If the `number` is an object, it is used as is.\r\n *\r\n * The optional `defaultCountry` argument is the default country.\r\n * I.e. it does not restrict to just that country,\r\n * e.g. in those cases where several countries share\r\n * the same phone numbering rules (NANPA, Britain, etc).\r\n * For example, even though the number `07624 369230`\r\n * belongs to the Isle of Man (\"IM\" country code)\r\n * calling `isValidNumber('07624369230', 'GB', metadata)`\r\n * still returns `true` because the country is not restricted to `GB`,\r\n * it's just that `GB` is the default one for the phone numbering rules.\r\n * For restricting the country see `isValidNumberForRegion()`\r\n * though restricting a country might not be a good idea.\r\n * https://github.com/googlei18n/libphonenumber/blob/master/FAQ.md#when-should-i-use-isvalidnumberforregion\r\n *\r\n * Examples:\r\n *\r\n * ```js\r\n * isValidNumber('+78005553535', metadata)\r\n * isValidNumber('8005553535', 'RU', metadata)\r\n * isValidNumber('88005553535', 'RU', metadata)\r\n * isValidNumber({ phone: '8005553535', country: 'RU' }, metadata)\r\n * ```\r\n */\nfunction isValidNumber(input) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var metadata = arguments[2];\n\n  metadata = new _metadata2.default(metadata);\n\n  // This is just to support `isValidNumber({})`\n  // for cases when `parseNumber()` returns `{}`.\n  if (!input.country) {\n    return false;\n  }\n\n  if (!metadata.hasCountry(input.country)) {\n    throw new Error('Unknown country: ' + input.country);\n  }\n\n  metadata.country(input.country);\n\n  // By default, countries only have type regexps when it's required for\n  // distinguishing different countries having the same `countryCallingCode`.\n  if (metadata.hasTypes()) {\n    return (0, _getNumberType_2.default)(input, options, metadata.metadata) !== undefined;\n  }\n\n  // If there are no type regexps for this country in metadata then use\n  // `nationalNumberPattern` as a \"better than nothing\" replacement.\n  var national_number = options.v2 ? input.nationalNumber : input.phone;\n  return (0, _util.matchesEntirely)(national_number, metadata.nationalNumberPattern());\n}\n//# sourceMappingURL=validate_.js.map","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\nexports.limit = limit;\nexports.trimAfterFirstMatch = trimAfterFirstMatch;\nexports.startsWith = startsWith;\nexports.endsWith = endsWith;\n/** Returns a regular expression quantifier with an upper and lower limit. */\nfunction limit(lower, upper) {\n\tif (lower < 0 || upper <= 0 || upper < lower) {\n\t\tthrow new TypeError();\n\t}\n\treturn \"{\" + lower + \",\" + upper + \"}\";\n}\n\n/**\r\n * Trims away any characters after the first match of {@code pattern} in {@code candidate},\r\n * returning the trimmed version.\r\n */\nfunction trimAfterFirstMatch(regexp, string) {\n\tvar index = string.search(regexp);\n\n\tif (index >= 0) {\n\t\treturn string.slice(0, index);\n\t}\n\n\treturn string;\n}\n\nfunction startsWith(string, substring) {\n\treturn string.indexOf(substring) === 0;\n}\n\nfunction endsWith(string, substring) {\n\treturn string.indexOf(substring, string.length - substring.length) === string.length - substring.length;\n}\n//# sourceMappingURL=util.js.map","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\nexports.count_occurences = count_occurences;\n// Counts all occurences of a symbol in a string\nfunction count_occurences(symbol, string) {\n\tvar count = 0;\n\n\t// Using `.split('')` here instead of normal `for ... of`\n\t// because the importing application doesn't neccessarily include an ES6 polyfill.\n\t// The `.split('')` approach discards \"exotic\" UTF-8 characters\n\t// (the ones consisting of four bytes)\n\t// but template placeholder characters don't fall into that range\n\t// so skipping such miscellaneous \"exotic\" characters\n\t// won't matter here for just counting placeholder character occurrences.\n\tfor (var _iterator = string.split(''), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n\t\tvar _ref;\n\n\t\tif (_isArray) {\n\t\t\tif (_i >= _iterator.length) break;\n\t\t\t_ref = _iterator[_i++];\n\t\t} else {\n\t\t\t_i = _iterator.next();\n\t\t\tif (_i.done) break;\n\t\t\t_ref = _i.value;\n\t\t}\n\n\t\tvar character = _ref;\n\n\t\tif (character === symbol) {\n\t\t\tcount++;\n\t\t}\n\t}\n\n\treturn count;\n}\n//# sourceMappingURL=helpers.js.map","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nexports.default = function (template) {\n\tvar placeholder = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'x';\n\tvar should_close_braces = arguments[2];\n\n\tif (!template) {\n\t\treturn function (value) {\n\t\t\treturn { text: value };\n\t\t};\n\t}\n\n\tvar characters_in_template = (0, _helpers.count_occurences)(placeholder, template);\n\n\treturn function (value) {\n\t\tif (!value) {\n\t\t\treturn { text: '', template: template };\n\t\t}\n\n\t\tvar value_character_index = 0;\n\t\tvar filled_in_template = '';\n\n\t\t// Using `.split('')` here instead of normal `for ... of`\n\t\t// because the importing application doesn't neccessarily include an ES6 polyfill.\n\t\t// The `.split('')` approach discards \"exotic\" UTF-8 characters\n\t\t// (the ones consisting of four bytes)\n\t\t// but template placeholder characters don't fall into that range\n\t\t// and appending UTF-8 characters to a string in parts still works.\n\t\tfor (var _iterator = template.split(''), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n\t\t\tvar _ref;\n\n\t\t\tif (_isArray) {\n\t\t\t\tif (_i >= _iterator.length) break;\n\t\t\t\t_ref = _iterator[_i++];\n\t\t\t} else {\n\t\t\t\t_i = _iterator.next();\n\t\t\t\tif (_i.done) break;\n\t\t\t\t_ref = _i.value;\n\t\t\t}\n\n\t\t\tvar character = _ref;\n\n\t\t\tif (character !== placeholder) {\n\t\t\t\tfilled_in_template += character;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tfilled_in_template += value[value_character_index];\n\t\t\tvalue_character_index++;\n\n\t\t\t// If the last available value character has been filled in,\n\t\t\t// then return the filled in template\n\t\t\t// (either trim the right part or retain it,\n\t\t\t//  if no more character placeholders in there)\n\t\t\tif (value_character_index === value.length) {\n\t\t\t\t// If there are more character placeholders\n\t\t\t\t// in the right part of the template\n\t\t\t\t// then simply trim it.\n\t\t\t\tif (value.length < characters_in_template) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (should_close_braces) {\n\t\t\tfilled_in_template = (0, _closeBraces2.default)(filled_in_template, template);\n\t\t}\n\n\t\treturn { text: filled_in_template, template: template };\n\t};\n};\n\nvar _helpers = require('./helpers');\n\nvar _closeBraces = require('./close braces');\n\nvar _closeBraces2 = _interopRequireDefault(_closeBraces);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n//# sourceMappingURL=template formatter.js.map","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\nexports.default = format;\n\nvar _templateFormatter = require('./template formatter');\n\nvar _templateFormatter2 = _interopRequireDefault(_templateFormatter);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// Formats `value` value preserving `caret` at the same character.\n//\n// `{ value, caret }` attribute is the result of `parse()` function call.\n//\n// Returns `{ text, caret }` where the new `caret` is the caret position\n// inside `text` text corresponding to the original `caret` position inside `value`.\n//\n// `formatter(value)` is a function returning `{ text, template }`.\n//\n// `text` is the `value` value formatted using `template`.\n// It may either cut off the non-filled right part of the `template`\n// or it may fill the non-filled character placeholders\n// in the right part of the `template` with `spacer`\n// which is a space (' ') character by default.\n//\n// `template` is the template used to format the `value`.\n// It can be either a full-length template or a partial template.\n//\n// `formatter` can also be a string — a `template`\n// where character placeholders are denoted by 'x'es.\n// In this case `formatter` function is automatically created.\n//\n// Example:\n//\n// `value` is '880',\n// `caret` is `2` (before the first `0`)\n//\n// `formatter` is `'880' =>\n//   { text: '8 (80 )', template: 'x (xxx) xxx-xx-xx' }`\n//\n// The result is `{ text: '8 (80 )', caret: 4 }`.\n//\nfunction format(value, caret, formatter) {\n\tif (typeof formatter === 'string') {\n\t\tformatter = (0, _templateFormatter2.default)(formatter);\n\t}\n\n\tvar _ref = formatter(value) || {},\n\t    text = _ref.text,\n\t    template = _ref.template;\n\n\tif (text === undefined) {\n\t\ttext = value;\n\t}\n\n\tif (template) {\n\t\tif (caret === undefined) {\n\t\t\tcaret = text.length;\n\t\t} else {\n\t\t\tvar index = 0;\n\t\t\tvar found = false;\n\n\t\t\tvar possibly_last_input_character_index = -1;\n\n\t\t\twhile (index < text.length && index < template.length) {\n\t\t\t\t// Character placeholder found\n\t\t\t\tif (text[index] !== template[index]) {\n\t\t\t\t\tif (caret === 0) {\n\t\t\t\t\t\tfound = true;\n\t\t\t\t\t\tcaret = index;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tpossibly_last_input_character_index = index;\n\n\t\t\t\t\tcaret--;\n\t\t\t\t}\n\n\t\t\t\tindex++;\n\t\t\t}\n\n\t\t\t// If the caret was positioned after last input character,\n\t\t\t// then the text caret index is just after the last input character.\n\t\t\tif (!found) {\n\t\t\t\tcaret = possibly_last_input_character_index + 1;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn { text: text, caret: caret };\n}\n//# sourceMappingURL=format.js.map","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n// https://stackoverflow.com/a/46971044/970769\nvar ParseError = function ParseError(code) {\n  _classCallCheck(this, ParseError);\n\n  this.name = this.constructor.name;\n  this.message = code;\n  this.stack = new Error(code).stack;\n};\n\nexports.default = ParseError;\n\n\nParseError.prototype = Object.create(Error.prototype);\nParseError.prototype.constructor = ParseError;\n//# sourceMappingURL=ParseError.js.map","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\nexports.default = isPossibleNumber;\nexports.is_possible_number = is_possible_number;\n\nvar _metadata = require('./metadata');\n\nvar _metadata2 = _interopRequireDefault(_metadata);\n\nvar _getNumberType_ = require('./getNumberType_');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction isPossibleNumber(input, options, metadata) {\n\t/* istanbul ignore if */\n\tif (options === undefined) {\n\t\toptions = {};\n\t}\n\n\tmetadata = new _metadata2.default(metadata);\n\n\tif (options.v2) {\n\t\tif (!input.countryCallingCode) {\n\t\t\tthrow new Error('Invalid phone number object passed');\n\t\t}\n\t\tmetadata.chooseCountryByCountryCallingCode(input.countryCallingCode);\n\t} else {\n\t\tif (!input.phone) {\n\t\t\treturn false;\n\t\t}\n\t\tif (input.country) {\n\t\t\tif (!metadata.hasCountry(input.country)) {\n\t\t\t\tthrow new Error('Unknown country: ' + input.country);\n\t\t\t}\n\t\t\tmetadata.country(input.country);\n\t\t} else {\n\t\t\tif (!input.countryCallingCode) {\n\t\t\t\tthrow new Error('Invalid phone number object passed');\n\t\t\t}\n\t\t\tmetadata.chooseCountryByCountryCallingCode(input.countryCallingCode);\n\t\t}\n\t}\n\n\tif (!metadata.possibleLengths()) {\n\t\tthrow new Error('Metadata too old');\n\t}\n\n\treturn is_possible_number(input.phone || input.nationalNumber, undefined, metadata);\n}\n\nfunction is_possible_number(national_number, is_international, metadata) {\n\tswitch ((0, _getNumberType_.checkNumberLengthForType)(national_number, undefined, metadata)) {\n\t\tcase 'IS_POSSIBLE':\n\t\t\treturn true;\n\t\t// case 'IS_POSSIBLE_LOCAL_ONLY':\n\t\t// \treturn !is_international\n\t\tdefault:\n\t\t\treturn false;\n\t}\n}\n//# sourceMappingURL=isPossibleNumber_.js.map","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\nexports.FIRST_GROUP_PATTERN = undefined;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; // This is a port of Google Android `libphonenumber`'s\n// `phonenumberutil.js` of December 31th, 2018.\n//\n// https://github.com/googlei18n/libphonenumber/commits/master/javascript/i18n/phonenumbers/phonenumberutil.js\n\nexports.default = formatNumber;\nexports.format_national_number_using_format = format_national_number_using_format;\nexports.choose_format_for_number = choose_format_for_number;\nexports.changeInternationalFormatStyle = changeInternationalFormatStyle;\nexports.formatIDDSameCountryCallingCodeNumber = formatIDDSameCountryCallingCodeNumber;\n\nvar _constants = require('./constants');\n\nvar _util = require('./util');\n\nvar _metadata = require('./metadata');\n\nvar _metadata2 = _interopRequireDefault(_metadata);\n\nvar _IDD = require('./IDD');\n\nvar _RFC = require('./RFC3966');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar defaultOptions = {\n\tformatExtension: function formatExtension(formattedNumber, extension, metadata) {\n\t\treturn '' + formattedNumber + metadata.ext() + extension;\n\t}\n\n\t// Formats a phone number\n\t//\n\t// Example use cases:\n\t//\n\t// ```js\n\t// formatNumber('8005553535', 'RU', 'INTERNATIONAL')\n\t// formatNumber('8005553535', 'RU', 'INTERNATIONAL', metadata)\n\t// formatNumber({ phone: '8005553535', country: 'RU' }, 'INTERNATIONAL')\n\t// formatNumber({ phone: '8005553535', country: 'RU' }, 'INTERNATIONAL', metadata)\n\t// formatNumber('+78005553535', 'NATIONAL')\n\t// formatNumber('+78005553535', 'NATIONAL', metadata)\n\t// ```\n\t//\n};function formatNumber(input, format, options, metadata) {\n\t// Apply default options.\n\tif (options) {\n\t\toptions = _extends({}, defaultOptions, options);\n\t} else {\n\t\toptions = defaultOptions;\n\t}\n\n\tmetadata = new _metadata2.default(metadata);\n\n\tif (input.country) {\n\t\t// Validate `input.country`.\n\t\tif (!metadata.hasCountry(input.country)) {\n\t\t\tthrow new Error('Unknown country: ' + input.country);\n\t\t}\n\t\tmetadata.country(input.country);\n\t} else if (input.countryCallingCode) {\n\t\tmetadata.chooseCountryByCountryCallingCode(input.countryCallingCode);\n\t} else return input.phone || '';\n\n\tvar countryCallingCode = metadata.countryCallingCode();\n\n\tvar nationalNumber = options.v2 ? input.nationalNumber : input.phone;\n\n\t// This variable should have been declared inside `case`s\n\t// but Babel has a bug and it says \"duplicate variable declaration\".\n\tvar number = void 0;\n\n\tswitch (format) {\n\t\tcase 'NATIONAL':\n\t\t\t// Legacy argument support.\n\t\t\t// (`{ country: ..., phone: '' }`)\n\t\t\tif (!nationalNumber) {\n\t\t\t\treturn '';\n\t\t\t}\n\t\t\tnumber = format_national_number(nationalNumber, 'NATIONAL', metadata);\n\t\t\treturn addExtension(number, input.ext, metadata, options.formatExtension);\n\n\t\tcase 'INTERNATIONAL':\n\t\t\t// Legacy argument support.\n\t\t\t// (`{ country: ..., phone: '' }`)\n\t\t\tif (!nationalNumber) {\n\t\t\t\treturn '+' + countryCallingCode;\n\t\t\t}\n\t\t\tnumber = format_national_number(nationalNumber, 'INTERNATIONAL', metadata);\n\t\t\tnumber = '+' + countryCallingCode + ' ' + number;\n\t\t\treturn addExtension(number, input.ext, metadata, options.formatExtension);\n\n\t\tcase 'E.164':\n\t\t\t// `E.164` doesn't define \"phone number extensions\".\n\t\t\treturn '+' + countryCallingCode + nationalNumber;\n\n\t\tcase 'RFC3966':\n\t\t\treturn (0, _RFC.formatRFC3966)({\n\t\t\t\tnumber: '+' + countryCallingCode + nationalNumber,\n\t\t\t\text: input.ext\n\t\t\t});\n\n\t\tcase 'IDD':\n\t\t\tif (!options.fromCountry) {\n\t\t\t\treturn;\n\t\t\t\t// throw new Error('`fromCountry` option not passed for IDD-prefixed formatting.')\n\t\t\t}\n\t\t\tvar IDDPrefix = (0, _IDD.getIDDPrefix)(options.fromCountry, metadata.metadata);\n\t\t\tif (!IDDPrefix) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (options.humanReadable) {\n\t\t\t\tvar formattedForSameCountryCallingCode = countryCallingCode && formatIDDSameCountryCallingCodeNumber(nationalNumber, metadata.countryCallingCode(), options.fromCountry, metadata);\n\t\t\t\tif (formattedForSameCountryCallingCode) {\n\t\t\t\t\tnumber = formattedForSameCountryCallingCode;\n\t\t\t\t} else {\n\t\t\t\t\tnumber = IDDPrefix + ' ' + countryCallingCode + ' ' + format_national_number(nationalNumber, 'INTERNATIONAL', metadata);\n\t\t\t\t}\n\t\t\t\treturn addExtension(number, input.ext, metadata, options.formatExtension);\n\t\t\t}\n\t\t\treturn '' + IDDPrefix + countryCallingCode + nationalNumber;\n\n\t\tdefault:\n\t\t\tthrow new Error('Unknown \"format\" argument passed to \"formatNumber()\": \"' + format + '\"');\n\t}\n}\n\n// This was originally set to $1 but there are some countries for which the\n// first group is not used in the national pattern (e.g. Argentina) so the $1\n// group does not match correctly.  Therefore, we use \\d, so that the first\n// group actually used in the pattern will be matched.\nvar FIRST_GROUP_PATTERN = exports.FIRST_GROUP_PATTERN = /(\\$\\d)/;\n\nfunction format_national_number_using_format(number, format, useInternationalFormat, includeNationalPrefixForNationalFormat, metadata) {\n\tvar formattedNumber = number.replace(new RegExp(format.pattern()), useInternationalFormat ? format.internationalFormat() : format.nationalPrefixFormattingRule() && (!format.nationalPrefixIsOptionalWhenFormatting() || includeNationalPrefixForNationalFormat) ? format.format().replace(FIRST_GROUP_PATTERN, format.nationalPrefixFormattingRule()) : format.format());\n\n\tif (useInternationalFormat) {\n\t\treturn changeInternationalFormatStyle(formattedNumber);\n\t}\n\n\treturn formattedNumber;\n}\n\nfunction format_national_number(number, format_as, metadata) {\n\tvar format = choose_format_for_number(metadata.formats(), number);\n\tif (!format) {\n\t\treturn number;\n\t}\n\treturn format_national_number_using_format(number, format, format_as === 'INTERNATIONAL', true, metadata);\n}\n\nfunction choose_format_for_number(available_formats, national_number) {\n\tfor (var _iterator = available_formats, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n\t\tvar _ref;\n\n\t\tif (_isArray) {\n\t\t\tif (_i >= _iterator.length) break;\n\t\t\t_ref = _iterator[_i++];\n\t\t} else {\n\t\t\t_i = _iterator.next();\n\t\t\tif (_i.done) break;\n\t\t\t_ref = _i.value;\n\t\t}\n\n\t\tvar format = _ref;\n\n\t\t// Validate leading digits\n\t\tif (format.leadingDigitsPatterns().length > 0) {\n\t\t\t// The last leading_digits_pattern is used here, as it is the most detailed\n\t\t\tvar last_leading_digits_pattern = format.leadingDigitsPatterns()[format.leadingDigitsPatterns().length - 1];\n\n\t\t\t// If leading digits don't match then move on to the next phone number format\n\t\t\tif (national_number.search(last_leading_digits_pattern) !== 0) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\n\t\t// Check that the national number matches the phone number format regular expression\n\t\tif ((0, _util.matchesEntirely)(national_number, format.pattern())) {\n\t\t\treturn format;\n\t\t}\n\t}\n}\n\n// Removes brackets and replaces dashes with spaces.\n//\n// E.g. \"(999) 111-22-33\" -> \"999 111 22 33\"\n//\n// For some reason Google's metadata contains `<intlFormat/>`s with brackets and dashes.\n// Meanwhile, there's no single opinion about using punctuation in international phone numbers.\n//\n// For example, Google's `<intlFormat/>` for USA is `+1 213-373-4253`.\n// And here's a quote from WikiPedia's \"North American Numbering Plan\" page:\n// https://en.wikipedia.org/wiki/North_American_Numbering_Plan\n//\n// \"The country calling code for all countries participating in the NANP is 1.\n// In international format, an NANP number should be listed as +1 301 555 01 00,\n// where 301 is an area code (Maryland).\"\n//\n// I personally prefer the international format without any punctuation.\n// For example, brackets are remnants of the old age, meaning that the\n// phone number part in brackets (so called \"area code\") can be omitted\n// if dialing within the same \"area\".\n// And hyphens were clearly introduced for splitting local numbers into memorizable groups.\n// For example, remembering \"5553535\" is difficult but \"555-35-35\" is much simpler.\n// Imagine a man taking a bus from home to work and seeing an ad with a phone number.\n// He has a couple of seconds to memorize that number until it passes by.\n// If it were spaces instead of hyphens the man wouldn't necessarily get it,\n// but with hyphens instead of spaces the grouping is more explicit.\n// I personally think that hyphens introduce visual clutter,\n// so I prefer replacing them with spaces in international numbers.\n// In the modern age all output is done on displays where spaces are clearly distinguishable\n// so hyphens can be safely replaced with spaces without losing any legibility.\n//\nfunction changeInternationalFormatStyle(local) {\n\treturn local.replace(new RegExp('[' + _constants.VALID_PUNCTUATION + ']+', 'g'), ' ').trim();\n}\n\nfunction addExtension(formattedNumber, ext, metadata, formatExtension) {\n\treturn ext ? formatExtension(formattedNumber, ext, metadata) : formattedNumber;\n}\n\nfunction formatIDDSameCountryCallingCodeNumber(number, toCountryCallingCode, fromCountry, toCountryMetadata) {\n\tvar fromCountryMetadata = new _metadata2.default(toCountryMetadata.metadata);\n\tfromCountryMetadata.country(fromCountry);\n\n\t// If calling within the same country calling code.\n\tif (toCountryCallingCode === fromCountryMetadata.countryCallingCode()) {\n\t\t// For NANPA regions, return the national format for these regions\n\t\t// but prefix it with the country calling code.\n\t\tif (toCountryCallingCode === '1') {\n\t\t\treturn toCountryCallingCode + ' ' + format_national_number(number, 'NATIONAL', toCountryMetadata);\n\t\t}\n\n\t\t// If regions share a country calling code, the country calling code need\n\t\t// not be dialled. This also applies when dialling within a region, so this\n\t\t// if clause covers both these cases. Technically this is the case for\n\t\t// dialling from La Reunion to other overseas departments of France (French\n\t\t// Guiana, Martinique, Guadeloupe), but not vice versa - so we don't cover\n\t\t// this edge case for now and for those cases return the version including\n\t\t// country calling code. Details here:\n\t\t// http://www.petitfute.com/voyage/225-info-pratiques-reunion\n\t\t//\n\t\treturn format_national_number(number, 'NATIONAL', toCountryMetadata);\n\t}\n}\n//# sourceMappingURL=format_.js.map","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nexports.default = getNumberType;\nexports.normalizeArguments = normalizeArguments;\n\nvar _isViablePhoneNumber = require('./isViablePhoneNumber');\n\nvar _isViablePhoneNumber2 = _interopRequireDefault(_isViablePhoneNumber);\n\nvar _getNumberType_ = require('./getNumberType_');\n\nvar _getNumberType_2 = _interopRequireDefault(_getNumberType_);\n\nvar _parse_ = require('./parse_');\n\nvar _parse_2 = _interopRequireDefault(_parse_);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// Finds out national phone number type (fixed line, mobile, etc)\nfunction getNumberType() {\n\tvar _normalizeArguments = normalizeArguments(arguments),\n\t    input = _normalizeArguments.input,\n\t    options = _normalizeArguments.options,\n\t    metadata = _normalizeArguments.metadata;\n\n\treturn (0, _getNumberType_2.default)(input, options, metadata);\n}\n\n// Sort out arguments\nfunction normalizeArguments(args) {\n\tvar _Array$prototype$slic = Array.prototype.slice.call(args),\n\t    _Array$prototype$slic2 = _slicedToArray(_Array$prototype$slic, 4),\n\t    arg_1 = _Array$prototype$slic2[0],\n\t    arg_2 = _Array$prototype$slic2[1],\n\t    arg_3 = _Array$prototype$slic2[2],\n\t    arg_4 = _Array$prototype$slic2[3];\n\n\tvar input = void 0;\n\tvar options = {};\n\tvar metadata = void 0;\n\n\t// If the phone number is passed as a string.\n\t// `getNumberType('88005553535', ...)`.\n\tif (typeof arg_1 === 'string') {\n\t\t// If \"default country\" argument is being passed\n\t\t// then convert it to an `options` object.\n\t\t// `getNumberType('88005553535', 'RU', metadata)`.\n\t\tif ((typeof arg_2 === 'undefined' ? 'undefined' : _typeof(arg_2)) !== 'object') {\n\t\t\tif (arg_4) {\n\t\t\t\toptions = arg_3;\n\t\t\t\tmetadata = arg_4;\n\t\t\t} else {\n\t\t\t\tmetadata = arg_3;\n\t\t\t}\n\n\t\t\t// `parse` extracts phone numbers from raw text,\n\t\t\t// therefore it will cut off all \"garbage\" characters,\n\t\t\t// while this `validate` function needs to verify\n\t\t\t// that the phone number contains no \"garbage\"\n\t\t\t// therefore the explicit `isViablePhoneNumber` check.\n\t\t\tif ((0, _isViablePhoneNumber2.default)(arg_1)) {\n\t\t\t\tinput = (0, _parse_2.default)(arg_1, { defaultCountry: arg_2 }, metadata);\n\t\t\t} else {\n\t\t\t\tinput = {};\n\t\t\t}\n\t\t}\n\t\t// No \"resrict country\" argument is being passed.\n\t\t// International phone number is passed.\n\t\t// `getNumberType('+78005553535', metadata)`.\n\t\telse {\n\t\t\t\tif (arg_3) {\n\t\t\t\t\toptions = arg_2;\n\t\t\t\t\tmetadata = arg_3;\n\t\t\t\t} else {\n\t\t\t\t\tmetadata = arg_2;\n\t\t\t\t}\n\n\t\t\t\t// `parse` extracts phone numbers from raw text,\n\t\t\t\t// therefore it will cut off all \"garbage\" characters,\n\t\t\t\t// while this `validate` function needs to verify\n\t\t\t\t// that the phone number contains no \"garbage\"\n\t\t\t\t// therefore the explicit `isViablePhoneNumber` check.\n\t\t\t\tif ((0, _isViablePhoneNumber2.default)(arg_1)) {\n\t\t\t\t\tinput = (0, _parse_2.default)(arg_1, undefined, metadata);\n\t\t\t\t} else {\n\t\t\t\t\tinput = {};\n\t\t\t\t}\n\t\t\t}\n\t}\n\t// If the phone number is passed as a parsed phone number.\n\t// `getNumberType({ phone: '88005553535', country: 'RU' }, ...)`.\n\telse if (is_object(arg_1)) {\n\t\t\tinput = arg_1;\n\n\t\t\tif (arg_3) {\n\t\t\t\toptions = arg_2;\n\t\t\t\tmetadata = arg_3;\n\t\t\t} else {\n\t\t\t\tmetadata = arg_2;\n\t\t\t}\n\t\t} else throw new TypeError('A phone number must either be a string or an object of shape { phone, [country] }.');\n\n\treturn {\n\t\tinput: input,\n\t\toptions: options,\n\t\tmetadata: metadata\n\t};\n}\n\n// Babel transforms `typeof` into some \"branches\"\n// so istanbul will show this as \"branch not covered\".\n/* istanbul ignore next */\nvar is_object = function is_object(_) {\n\treturn (typeof _ === 'undefined' ? 'undefined' : _typeof(_)) === 'object';\n};\n//# sourceMappingURL=getNumberType.js.map","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**\r\nport of Google's `PhoneNumberMatcher.java`.\r\nhttps://github.com/googlei18n/libphonenumber/blob/master/java/libphonenumber/src/com/google/i18n/phonenumbers/PhoneNumberMatcher.java\r\nate: 08.03.2018.\r\nn\nvar _PhoneNumber = require('./PhoneNumber');\n\nvar _PhoneNumber2 = _interopRequireDefault(_PhoneNumber);\n\nvar _constants = require('./constants');\n\nvar _extension = require('./extension');\n\nvar _RegExpCache = require('./findNumbers/RegExpCache');\n\nvar _RegExpCache2 = _interopRequireDefault(_RegExpCache);\n\nvar _util = require('./findNumbers/util');\n\nvar _utf = require('./findNumbers/utf-8');\n\nvar _Leniency = require('./findNumbers/Leniency');\n\nvar _Leniency2 = _interopRequireDefault(_Leniency);\n\nvar _parsePreCandidate = require('./findNumbers/parsePreCandidate');\n\nvar _parsePreCandidate2 = _interopRequireDefault(_parsePreCandidate);\n\nvar _isValidPreCandidate = require('./findNumbers/isValidPreCandidate');\n\nvar _isValidPreCandidate2 = _interopRequireDefault(_isValidPreCandidate);\n\nvar _isValidCandidate = require('./findNumbers/isValidCandidate');\n\nvar _isValidCandidate2 = _interopRequireDefault(_isValidCandidate);\n\nvar _metadata = require('./metadata');\n\nvar _parse_ = require('./parse_');\n\nvar _parse_2 = _interopRequireDefault(_parse_);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\r\n * Patterns used to extract phone numbers from a larger phone-number-like pattern. These are\r\n * ordered according to specificity. For example, white-space is last since that is frequently\r\n * used in numbers, not just to separate two numbers. We have separate patterns since we don't\r\n * want to break up the phone-number-like text on more than one different kind of symbol at one\r\n * time, although symbols of the same type (e.g. space) can be safely grouped together.\r\n *\r\n * Note that if there is a match, we will always check any text found up to the first match as\r\n * well.\r\n */\nvar INNER_MATCHES = [\n// Breaks on the slash - e.g. \"651-234-2345/332-445-1234\"\n'\\\\/+(.*)/',\n\n// Note that the bracket here is inside the capturing group, since we consider it part of the\n// phone number. Will match a pattern like \"(650) 223 3345 (754) 223 3321\".\n'(\\\\([^(]*)',\n\n// Breaks on a hyphen - e.g. \"12345 - 332-445-1234 is my number.\"\n// We require a space on either side of the hyphen for it to be considered a separator.\n'(?:' + _utf.pZ + '-|-' + _utf.pZ + ')' + _utf.pZ + '*(.+)',\n\n// Various types of wide hyphens. Note we have decided not to enforce a space here, since it's\n// possible that it's supposed to be used to break two numbers without spaces, and we haven't\n// seen many instances of it used within a number.\n'[\\u2012-\\u2015\\uFF0D]' + _utf.pZ + '*(.+)',\n\n// Breaks on a full stop - e.g. \"12345. 332-445-1234 is my number.\"\n'\\\\.+' + _utf.pZ + '*([^.]+)',\n\n// Breaks on space - e.g. \"3324451234 8002341234\"\n_utf.pZ + '+(' + _utf.PZ + '+)'];\n\n// Limit on the number of leading (plus) characters.\nvar leadLimit = (0, _util.limit)(0, 2);\n\n// Limit on the number of consecutive punctuation characters.\nvar punctuationLimit = (0, _util.limit)(0, 4);\n\n/* The maximum number of digits allowed in a digit-separated block. As we allow all digits in a\r\n * single block, set high enough to accommodate the entire national number and the international\r\n * country code. */\nvar digitBlockLimit = _constants.MAX_LENGTH_FOR_NSN + _constants.MAX_LENGTH_COUNTRY_CODE;\n\n// Limit on the number of blocks separated by punctuation.\n// Uses digitBlockLimit since some formats use spaces to separate each digit.\nvar blockLimit = (0, _util.limit)(0, digitBlockLimit);\n\n/* A punctuation sequence allowing white space. */\nvar punctuation = '[' + _constants.VALID_PUNCTUATION + ']' + punctuationLimit;\n\n// A digits block without punctuation.\nvar digitSequence = _utf.pNd + (0, _util.limit)(1, digitBlockLimit);\n\n/**\r\n * Phone number pattern allowing optional punctuation.\r\n * The phone number pattern used by `find()`, similar to\r\n * VALID_PHONE_NUMBER, but with the following differences:\r\n * <ul>\r\n *   <li>All captures are limited in order to place an upper bound to the text matched by the\r\n *       pattern.\r\n * <ul>\r\n *   <li>Leading punctuation / plus signs are limited.\r\n *   <li>Consecutive occurrences of punctuation are limited.\r\n *   <li>Number of digits is limited.\r\n * </ul>\r\n *   <li>No whitespace is allowed at the start or end.\r\n *   <li>No alpha digits (vanity numbers such as 1-800-SIX-FLAGS) are currently supported.\r\n * </ul>\r\n */\nvar PATTERN = '(?:' + _isValidCandidate.LEAD_CLASS + punctuation + ')' + leadLimit + digitSequence + '(?:' + punctuation + digitSequence + ')' + blockLimit + '(?:' + _extension.EXTN_PATTERNS_FOR_MATCHING + ')?';\n\n// Regular expression of trailing characters that we want to remove.\n// We remove all characters that are not alpha or numerical characters.\n// The hash character is retained here, as it may signify\n// the previous block was an extension.\n//\n// // Don't know what does '&&' mean here.\n// const UNWANTED_END_CHAR_PATTERN = new RegExp(`[[\\\\P{N}&&\\\\P{L}]&&[^#]]+$`)\n//\nvar UNWANTED_END_CHAR_PATTERN = new RegExp('[^' + _utf._pN + _utf._pL + '#]+$');\n\nvar NON_DIGITS_PATTERN = /(\\D+)/;\n\nvar MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || Math.pow(2, 53) - 1;\n\n/**\r\n * A stateful class that finds and extracts telephone numbers from {@linkplain CharSequence text}.\r\n * Instances can be created using the {@linkplain PhoneNumberUtil#findNumbers factory methods} in\r\n * {@link PhoneNumberUtil}.\r\n *\r\n * <p>Vanity numbers (phone numbers using alphabetic digits such as <tt>1-800-SIX-FLAGS</tt> are\r\n * not found.\r\n *\r\n * <p>This class is not thread-safe.\r\n */\n\nvar PhoneNumberMatcher = function () {\n\n  /**\r\n   * Creates a new instance. See the factory methods in {@link PhoneNumberUtil} on how to obtain a\r\n   * new instance.\r\n   *\r\n   * @param util  the phone number util to use\r\n   * @param text  the character sequence that we will search, null for no text\r\n   * @param country  the country to assume for phone numbers not written in international format\r\n   *     (with a leading plus, or with the international dialing prefix of the specified region).\r\n   *     May be null or \"ZZ\" if only numbers with a leading plus should be\r\n   *     considered.\r\n   * @param leniency  the leniency to use when evaluating candidate phone numbers\r\n   * @param maxTries  the maximum number of invalid numbers to try before giving up on the text.\r\n   *     This is to cover degenerate cases where the text has a lot of false positives in it. Must\r\n   *     be {@code >= 0}.\r\n   */\n\n\n  /** The next index to start searching at. Undefined in {@link State#DONE}. */\n  function PhoneNumberMatcher() {\n    var text = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var metadata = arguments[2];\n\n    _classCallCheck(this, PhoneNumberMatcher);\n\n    this.state = 'NOT_READY';\n    this.searchIndex = 0;\n    this.regExpCache = new _RegExpCache2.default(32);\n\n    options = _extends({}, options, {\n      defaultCountry: options.defaultCountry && (0, _metadata.isSupportedCountry)(options.defaultCountry, metadata) ? options.defaultCountry : undefined,\n      leniency: options.leniency || options.extended ? 'POSSIBLE' : 'VALID',\n      maxTries: options.maxTries || MAX_SAFE_INTEGER\n    });\n\n    if (!options.leniency) {\n      throw new TypeError('`Leniency` not supplied');\n    }\n\n    if (options.maxTries < 0) {\n      throw new TypeError('`maxTries` not supplied');\n    }\n\n    this.text = text;\n    this.options = options;\n    this.metadata = metadata;\n\n    /** The degree of validation requested. */\n    this.leniency = _Leniency2.default[options.leniency];\n\n    if (!this.leniency) {\n      throw new TypeError('Unknown leniency: ' + options.leniency + '.');\n    }\n\n    /** The maximum number of retries after matching an invalid number. */\n    this.maxTries = options.maxTries;\n\n    this.PATTERN = new RegExp(PATTERN, 'ig');\n  }\n\n  /**\r\n   * Attempts to find the next subsequence in the searched sequence on or after {@code searchIndex}\r\n   * that represents a phone number. Returns the next match, null if none was found.\r\n   *\r\n   * @param index  the search index to start searching at\r\n   * @return  the phone number match found, null if none can be found\r\n   */\n\n\n  // A cache for frequently used country-specific regular expressions. Set to 32 to cover ~2-3\n  // countries being used for the same doc with ~10 patterns for each country. Some pages will have\n  // a lot more countries in use, but typically fewer numbers for each so expanding the cache for\n  // that use-case won't have a lot of benefit.\n\n  /** The iteration tristate. */\n\n\n  _createClass(PhoneNumberMatcher, [{\n    key: 'find',\n    value: function find() // (index)\n    {\n      // // Reset the regular expression.\n      // this.PATTERN.lastIndex = index\n\n      var matches = void 0;\n      while (this.maxTries > 0 && (matches = this.PATTERN.exec(this.text)) !== null) {\n        var candidate = matches[0];\n        var offset = matches.index;\n\n        candidate = (0, _parsePreCandidate2.default)(candidate);\n\n        if ((0, _isValidPreCandidate2.default)(candidate, offset, this.text)) {\n          var match =\n          // Try to come up with a valid match given the entire candidate.\n          this.parseAndVerify(candidate, offset, this.text)\n          // If that failed, try to find an \"inner match\" -\n          // there might be a phone number within this candidate.\n          || this.extractInnerMatch(candidate, offset, this.text);\n\n          if (match) {\n            if (this.options.v2) {\n              var phoneNumber = new _PhoneNumber2.default(match.country, match.phone, this.metadata);\n              if (match.ext) {\n                phoneNumber.ext = match.ext;\n              }\n              return {\n                startsAt: match.startsAt,\n                endsAt: match.endsAt,\n                number: phoneNumber\n              };\n            }\n            return match;\n          }\n        }\n\n        this.maxTries--;\n      }\n    }\n\n    /**\r\n     * Attempts to extract a match from `candidate`\r\n     * if the whole candidate does not qualify as a match.\r\n     */\n\n  }, {\n    key: 'extractInnerMatch',\n    value: function extractInnerMatch(candidate, offset, text) {\n      for (var _iterator = INNER_MATCHES, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n        var _ref;\n\n        if (_isArray) {\n          if (_i >= _iterator.length) break;\n          _ref = _iterator[_i++];\n        } else {\n          _i = _iterator.next();\n          if (_i.done) break;\n          _ref = _i.value;\n        }\n\n        var innerMatchPattern = _ref;\n\n        var isFirstMatch = true;\n        var matches = void 0;\n        var possibleInnerMatch = new RegExp(innerMatchPattern, 'g');\n        while ((matches = possibleInnerMatch.exec(candidate)) !== null && this.maxTries > 0) {\n          if (isFirstMatch) {\n            // We should handle any group before this one too.\n            var _group = (0, _util.trimAfterFirstMatch)(UNWANTED_END_CHAR_PATTERN, candidate.slice(0, matches.index));\n\n            var _match = this.parseAndVerify(_group, offset, text);\n            if (_match) {\n              return _match;\n            }\n\n            this.maxTries--;\n            isFirstMatch = false;\n          }\n\n          var group = (0, _util.trimAfterFirstMatch)(UNWANTED_END_CHAR_PATTERN, matches[1]);\n\n          // Java code does `groupMatcher.start(1)` here,\n          // but there's no way in javascript to get a group match start index,\n          // therefore using the overall match start index `matches.index`.\n          var match = this.parseAndVerify(group, offset + matches.index, text);\n          if (match) {\n            return match;\n          }\n\n          this.maxTries--;\n        }\n      }\n    }\n\n    /**\r\n     * Parses a phone number from the `candidate` using `parseNumber` and\r\n     * verifies it matches the requested `leniency`. If parsing and verification succeed,\r\n     * a corresponding `PhoneNumberMatch` is returned, otherwise this method returns `null`.\r\n     *\r\n     * @param candidate  the candidate match\r\n     * @param offset  the offset of {@code candidate} within {@link #text}\r\n     * @return  the parsed and validated phone number match, or null\r\n     */\n\n  }, {\n    key: 'parseAndVerify',\n    value: function parseAndVerify(candidate, offset, text) {\n      if (!(0, _isValidCandidate2.default)(candidate, offset, text, this.options.leniency)) {\n        return;\n      }\n\n      var number = (0, _parse_2.default)(candidate, {\n        extended: true,\n        defaultCountry: this.options.defaultCountry\n      }, this.metadata);\n\n      if (!number.possible) {\n        return;\n      }\n\n      if (this.leniency(number, candidate, this.metadata, this.regExpCache)) {\n        // // We used parseAndKeepRawInput to create this number,\n        // // but for now we don't return the extra values parsed.\n        // // TODO: stop clearing all values here and switch all users over\n        // // to using rawInput() rather than the rawString() of PhoneNumberMatch.\n        // number.clearCountryCodeSource()\n        // number.clearRawInput()\n        // number.clearPreferredDomesticCarrierCode()\n\n        var result = {\n          startsAt: offset,\n          endsAt: offset + candidate.length,\n          country: number.country,\n          phone: number.phone\n        };\n\n        if (number.ext) {\n          result.ext = number.ext;\n        }\n\n        return result;\n      }\n    }\n  }, {\n    key: 'hasNext',\n    value: function hasNext() {\n      if (this.state === 'NOT_READY') {\n        this.lastMatch = this.find(); // (this.searchIndex)\n\n        if (this.lastMatch) {\n          // this.searchIndex = this.lastMatch.endsAt\n          this.state = 'READY';\n        } else {\n          this.state = 'DONE';\n        }\n      }\n\n      return this.state === 'READY';\n    }\n  }, {\n    key: 'next',\n    value: function next() {\n      // Check the state and find the next match as a side-effect if necessary.\n      if (!this.hasNext()) {\n        throw new Error('No next element');\n      }\n\n      // Don't retain that memory any longer than necessary.\n      var result = this.lastMatch;\n      this.lastMatch = null;\n      this.state = 'NOT_READY';\n      return result;\n    }\n  }]);\n\n  return PhoneNumberMatcher;\n}();\n\nexports.default = PhoneNumberMatcher;\n//# sourceMappingURL=PhoneNumberMatcher.js.map","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\nexports.DIGIT_PLACEHOLDER = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // This is an enhanced port of Google Android `libphonenumber`'s\n// `asyoutypeformatter.js` of December 31th, 2018.\n//\n// https://github.com/googlei18n/libphonenumber/blob/8d21a365061de2ba0675c878a710a7b24f74d2ae/javascript/i18n/phonenumbers/asyoutypeformatter.js\n//\n// Simplified: does not differentiate between \"local-only\" numbers\n// and \"internationally dialable\" numbers.\n// For example, doesn't include changes like this:\n// https://github.com/googlei18n/libphonenumber/commit/865da605da12b01053c4f053310bac7c5fbb7935\n\nexports.strip_dangling_braces = strip_dangling_braces;\nexports.cut_stripping_dangling_braces = cut_stripping_dangling_braces;\nexports.close_dangling_braces = close_dangling_braces;\nexports.count_occurences = count_occurences;\nexports.repeat = repeat;\n\nvar _metadata = require('./metadata');\n\nvar _metadata2 = _interopRequireDefault(_metadata);\n\nvar _PhoneNumber = require('./PhoneNumber');\n\nvar _PhoneNumber2 = _interopRequireDefault(_PhoneNumber);\n\nvar _constants = require('./constants');\n\nvar _util = require('./util');\n\nvar _parse_ = require('./parse_');\n\nvar _format_ = require('./format_');\n\nvar _getNumberType_ = require('./getNumberType_');\n\nvar _parseIncompletePhoneNumber = require('./parseIncompletePhoneNumber');\n\nvar _parseIncompletePhoneNumber2 = _interopRequireDefault(_parseIncompletePhoneNumber);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n// Used in phone number format template creation.\n// Could be any digit, I guess.\nvar DUMMY_DIGIT = '9';\n// I don't know why is it exactly `15`\nvar LONGEST_NATIONAL_PHONE_NUMBER_LENGTH = 15;\n// Create a phone number consisting only of the digit 9 that matches the\n// `number_pattern` by applying the pattern to the \"longest phone number\" string.\nvar LONGEST_DUMMY_PHONE_NUMBER = repeat(DUMMY_DIGIT, LONGEST_NATIONAL_PHONE_NUMBER_LENGTH);\n\n// The digits that have not been entered yet will be represented by a \\u2008,\n// the punctuation space.\nvar DIGIT_PLACEHOLDER = exports.DIGIT_PLACEHOLDER = 'x'; // '\\u2008' (punctuation space)\nvar DIGIT_PLACEHOLDER_MATCHER = new RegExp(DIGIT_PLACEHOLDER);\n\n// Deprecated: Google has removed some formatting pattern related code from their repo.\n// https://github.com/googlei18n/libphonenumber/commit/a395b4fef3caf57c4bc5f082e1152a4d2bd0ba4c\n// \"We no longer have numbers in formatting matching patterns, only \\d.\"\n// Because this library supports generating custom metadata\n// some users may still be using old metadata so the relevant\n// code seems to stay until some next major version update.\nvar SUPPORT_LEGACY_FORMATTING_PATTERNS = true;\n\n// A pattern that is used to match character classes in regular expressions.\n// An example of a character class is \"[1-4]\".\nvar CREATE_CHARACTER_CLASS_PATTERN = SUPPORT_LEGACY_FORMATTING_PATTERNS && function () {\n\treturn (/\\[([^\\[\\]])*\\]/g\n\t);\n};\n\n// Any digit in a regular expression that actually denotes a digit. For\n// example, in the regular expression \"80[0-2]\\d{6,10}\", the first 2 digits\n// (8 and 0) are standalone digits, but the rest are not.\n// Two look-aheads are needed because the number following \\\\d could be a\n// two-digit number, since the phone number can be as long as 15 digits.\nvar CREATE_STANDALONE_DIGIT_PATTERN = SUPPORT_LEGACY_FORMATTING_PATTERNS && function () {\n\treturn (/\\d(?=[^,}][^,}])/g\n\t);\n};\n\n// A pattern that is used to determine if a `format` is eligible\n// to be used by the \"as you type formatter\".\n// It is eligible when the `format` contains groups of the dollar sign\n// followed by a single digit, separated by valid phone number punctuation.\n// This prevents invalid punctuation (such as the star sign in Israeli star numbers)\n// getting into the output of the \"as you type formatter\".\nvar ELIGIBLE_FORMAT_PATTERN = new RegExp('^' + '[' + _constants.VALID_PUNCTUATION + ']*' + '(\\\\$\\\\d[' + _constants.VALID_PUNCTUATION + ']*)+' + '$');\n\n// This is the minimum length of the leading digits of a phone number\n// to guarantee the first \"leading digits pattern\" for a phone number format\n// to be preemptive.\nvar MIN_LEADING_DIGITS_LENGTH = 3;\n\nvar VALID_INCOMPLETE_PHONE_NUMBER = '[' + _constants.PLUS_CHARS + ']{0,1}' + '[' + _constants.VALID_PUNCTUATION + _constants.VALID_DIGITS + ']*';\n\nvar VALID_INCOMPLETE_PHONE_NUMBER_PATTERN = new RegExp('^' + VALID_INCOMPLETE_PHONE_NUMBER + '$', 'i');\n\nvar AsYouType = function () {\n\n\t/**\r\n  * @param {string?} [defaultCountry] - The default country used for parsing non-international phone numbers.\r\n  * @param {Object} metadata\r\n  */\n\tfunction AsYouType(defaultCountry, metadata) {\n\t\t_classCallCheck(this, AsYouType);\n\n\t\tthis.options = {};\n\n\t\tthis.metadata = new _metadata2.default(metadata);\n\n\t\tif (defaultCountry && this.metadata.hasCountry(defaultCountry)) {\n\t\t\tthis.defaultCountry = defaultCountry;\n\t\t}\n\n\t\tthis.reset();\n\t}\n\t// Not setting `options` to a constructor argument\n\t// not to break backwards compatibility\n\t// for older versions of the library.\n\n\n\t_createClass(AsYouType, [{\n\t\tkey: 'input',\n\t\tvalue: function input(text) {\n\t\t\t// Parse input\n\n\t\t\tvar extracted_number = (0, _parse_.extract_formatted_phone_number)(text) || '';\n\n\t\t\t// Special case for a lone '+' sign\n\t\t\t// since it's not considered a possible phone number.\n\t\t\tif (!extracted_number) {\n\t\t\t\tif (text && text.indexOf('+') >= 0) {\n\t\t\t\t\textracted_number = '+';\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Validate possible first part of a phone number\n\t\t\tif (!VALID_INCOMPLETE_PHONE_NUMBER_PATTERN.test(extracted_number)) {\n\t\t\t\treturn this.currentOutput;\n\t\t\t}\n\n\t\t\treturn this.processInput((0, _parseIncompletePhoneNumber2.default)(extracted_number));\n\t\t}\n\t}, {\n\t\tkey: 'processInput',\n\t\tvalue: function processInput(input) {\n\t\t\t// If an out of position '+' sign detected\n\t\t\t// (or a second '+' sign),\n\t\t\t// then just drop it from the input.\n\t\t\tif (input[0] === '+') {\n\t\t\t\tif (!this.parsedInput) {\n\t\t\t\t\tthis.parsedInput += '+';\n\n\t\t\t\t\t// If a default country was set\n\t\t\t\t\t// then reset it because an explicitly international\n\t\t\t\t\t// phone number is being entered\n\t\t\t\t\tthis.resetCountriness();\n\t\t\t\t}\n\n\t\t\t\tinput = input.slice(1);\n\t\t\t}\n\n\t\t\t// Raw phone number\n\t\t\tthis.parsedInput += input;\n\n\t\t\t// // Reset phone number validation state\n\t\t\t// this.valid = false\n\n\t\t\t// Add digits to the national number\n\t\t\tthis.nationalNumber += input;\n\n\t\t\t// TODO: Deprecated: rename `this.nationalNumber`\n\t\t\t// to `this.nationalNumber` and remove `.getNationalNumber()`.\n\n\t\t\t// Try to format the parsed input\n\n\t\t\tif (this.isInternational()) {\n\t\t\t\tif (!this.countryCallingCode) {\n\t\t\t\t\t// Extract country calling code from the digits entered so far.\n\n\t\t\t\t\t// There must be some digits in order to extract anything from them.\n\t\t\t\t\tif (!this.nationalNumber) {\n\t\t\t\t\t\t// Return raw phone number\n\t\t\t\t\t\treturn this.parsedInput;\n\t\t\t\t\t}\n\n\t\t\t\t\t// If one looks at country phone codes\n\t\t\t\t\t// then he can notice that no one country phone code\n\t\t\t\t\t// is ever a (leftmost) substring of another country phone code.\n\t\t\t\t\t// So if a valid country code is extracted so far\n\t\t\t\t\t// then it means that this is the country code.\n\n\t\t\t\t\t// If no country phone code could be extracted so far,\n\t\t\t\t\t// then just return the raw phone number,\n\t\t\t\t\t// because it has no way of knowing\n\t\t\t\t\t// how to format the phone number so far.\n\t\t\t\t\tif (!this.extractCountryCallingCode()) {\n\t\t\t\t\t\t// Return raw phone number\n\t\t\t\t\t\treturn this.parsedInput;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Initialize country-specific data\n\t\t\t\t\tthis.initialize_phone_number_formats_for_this_country_calling_code();\n\t\t\t\t\tthis.resetFormat();\n\t\t\t\t\tthis.determineTheCountry();\n\t\t\t\t}\n\t\t\t\t// `this.country` could be `undefined`,\n\t\t\t\t// for instance, when there is ambiguity\n\t\t\t\t// in a form of several different countries\n\t\t\t\t// each corresponding to the same country phone code\n\t\t\t\t// (e.g. NANPA: USA, Canada, etc),\n\t\t\t\t// and there's not enough digits entered\n\t\t\t\t// to reliably determine the country\n\t\t\t\t// the phone number belongs to.\n\t\t\t\t// Therefore, in cases of such ambiguity,\n\t\t\t\t// each time something is input,\n\t\t\t\t// try to determine the country\n\t\t\t\t// (if it's not determined yet).\n\t\t\t\telse if (!this.country) {\n\t\t\t\t\t\tthis.determineTheCountry();\n\t\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Some national prefixes are substrings of other national prefixes\n\t\t\t\t// (for the same country), therefore try to extract national prefix each time\n\t\t\t\t// because a longer national prefix might be available at some point in time.\n\n\t\t\t\tvar previous_national_prefix = this.nationalPrefix;\n\t\t\t\tthis.nationalNumber = this.nationalPrefix + this.nationalNumber;\n\n\t\t\t\t// Possibly extract a national prefix\n\t\t\t\tthis.extractNationalPrefix();\n\n\t\t\t\tif (this.nationalPrefix !== previous_national_prefix) {\n\t\t\t\t\t// National number has changed\n\t\t\t\t\t// (due to another national prefix been extracted)\n\t\t\t\t\t// therefore national number has changed\n\t\t\t\t\t// therefore reset all previous formatting data.\n\t\t\t\t\t// (and leading digits matching state)\n\t\t\t\t\tthis.matching_formats = undefined;\n\t\t\t\t\tthis.resetFormat();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// if (!this.shouldFormat())\n\t\t\t// {\n\t\t\t// \treturn this.format_as_non_formatted_number()\n\t\t\t// }\n\n\t\t\tif (!this.nationalNumber) {\n\t\t\t\treturn this.format_as_non_formatted_number();\n\t\t\t}\n\n\t\t\t// Check the available phone number formats\n\t\t\t// based on the currently available leading digits.\n\t\t\tthis.match_formats_by_leading_digits();\n\n\t\t\t// Format the phone number (given the next digits)\n\t\t\tvar formatted_national_phone_number = this.formatNationalNumber(input);\n\n\t\t\t// If the phone number could be formatted,\n\t\t\t// then return it, possibly prepending with country phone code\n\t\t\t// (for international phone numbers only)\n\t\t\tif (formatted_national_phone_number) {\n\t\t\t\treturn this.formatFullNumber(formatted_national_phone_number);\n\t\t\t}\n\n\t\t\t// If the phone number couldn't be formatted,\n\t\t\t// then just fall back to the raw phone number.\n\t\t\treturn this.format_as_non_formatted_number();\n\t\t}\n\t}, {\n\t\tkey: 'format_as_non_formatted_number',\n\t\tvalue: function format_as_non_formatted_number() {\n\t\t\t// Strip national prefix for incorrectly inputted international phones.\n\t\t\tif (this.isInternational() && this.countryCallingCode) {\n\t\t\t\treturn '+' + this.countryCallingCode + this.nationalNumber;\n\t\t\t}\n\n\t\t\treturn this.parsedInput;\n\t\t}\n\t}, {\n\t\tkey: 'formatNationalNumber',\n\t\tvalue: function formatNationalNumber(next_digits) {\n\t\t\t// Format the next phone number digits\n\t\t\t// using the previously chosen phone number format.\n\t\t\t//\n\t\t\t// This is done here because if `attempt_to_format_complete_phone_number`\n\t\t\t// was placed before this call then the `template`\n\t\t\t// wouldn't reflect the situation correctly (and would therefore be inconsistent)\n\t\t\t//\n\t\t\tvar national_number_formatted_with_previous_format = void 0;\n\t\t\tif (this.chosenFormat) {\n\t\t\t\tnational_number_formatted_with_previous_format = this.formatNextNationalNumberDigits(next_digits);\n\t\t\t}\n\n\t\t\t// See if the input digits can be formatted properly already. If not,\n\t\t\t// use the results from formatNextNationalNumberDigits(), which does formatting\n\t\t\t// based on the formatting pattern chosen.\n\n\t\t\tvar formatted_number = this.attempt_to_format_complete_phone_number();\n\n\t\t\t// Just because a phone number doesn't have a suitable format\n\t\t\t// that doesn't mean that the phone is invalid\n\t\t\t// because phone number formats only format phone numbers,\n\t\t\t// they don't validate them and some (rare) phone numbers\n\t\t\t// are meant to stay non-formatted.\n\t\t\tif (formatted_number) {\n\t\t\t\treturn formatted_number;\n\t\t\t}\n\n\t\t\t// For some phone number formats national prefix\n\n\t\t\t// If the previously chosen phone number format\n\t\t\t// didn't match the next (current) digit being input\n\t\t\t// (leading digits pattern didn't match).\n\t\t\tif (this.chooseAnotherFormat()) {\n\t\t\t\t// And a more appropriate phone number format\n\t\t\t\t// has been chosen for these `leading digits`,\n\t\t\t\t// then format the national phone number (so far)\n\t\t\t\t// using the newly selected phone number pattern.\n\n\t\t\t\t// Will return `undefined` if it couldn't format\n\t\t\t\t// the supplied national number\n\t\t\t\t// using the selected phone number pattern.\n\n\t\t\t\treturn this.reformatNationalNumber();\n\t\t\t}\n\n\t\t\t// If could format the next (current) digit\n\t\t\t// using the previously chosen phone number format\n\t\t\t// then return the formatted number so far.\n\n\t\t\t// If no new phone number format could be chosen,\n\t\t\t// and couldn't format the supplied national number\n\t\t\t// using the selected phone number pattern,\n\t\t\t// then it will return `undefined`.\n\n\t\t\treturn national_number_formatted_with_previous_format;\n\t\t}\n\t}, {\n\t\tkey: 'reset',\n\t\tvalue: function reset() {\n\t\t\t// Input stripped of non-phone-number characters.\n\t\t\t// Can only contain a possible leading '+' sign and digits.\n\t\t\tthis.parsedInput = '';\n\n\t\t\tthis.currentOutput = '';\n\n\t\t\t// This contains the national prefix that has been extracted. It contains only\n\t\t\t// digits without formatting.\n\t\t\tthis.nationalPrefix = '';\n\n\t\t\tthis.nationalNumber = '';\n\t\t\tthis.carrierCode = '';\n\n\t\t\tthis.resetCountriness();\n\n\t\t\tthis.resetFormat();\n\n\t\t\treturn this;\n\t\t}\n\t}, {\n\t\tkey: 'resetCountry',\n\t\tvalue: function resetCountry() {\n\t\t\tif (this.isInternational()) {\n\t\t\t\tthis.country = undefined;\n\t\t\t} else {\n\t\t\t\tthis.country = this.defaultCountry;\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: 'resetCountriness',\n\t\tvalue: function resetCountriness() {\n\t\t\tthis.resetCountry();\n\n\t\t\tif (this.defaultCountry && !this.isInternational()) {\n\t\t\t\tthis.metadata.country(this.defaultCountry);\n\t\t\t\tthis.countryCallingCode = this.metadata.countryCallingCode();\n\n\t\t\t\tthis.initialize_phone_number_formats_for_this_country_calling_code();\n\t\t\t} else {\n\t\t\t\tthis.metadata.country(undefined);\n\t\t\t\tthis.countryCallingCode = undefined;\n\n\t\t\t\t// \"Available formats\" are all formats available for the country.\n\t\t\t\t// \"Matching formats\" are only formats eligible for the national number being entered.\n\t\t\t\tthis.available_formats = [];\n\t\t\t\tthis.matching_formats = undefined;\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: 'resetFormat',\n\t\tvalue: function resetFormat() {\n\t\t\tthis.chosenFormat = undefined;\n\t\t\tthis.template = undefined;\n\t\t\tthis.partially_populated_template = undefined;\n\t\t\tthis.last_match_position = -1;\n\t\t}\n\n\t\t// Format each digit of national phone number (so far)\n\t\t// using the newly selected phone number pattern.\n\n\t}, {\n\t\tkey: 'reformatNationalNumber',\n\t\tvalue: function reformatNationalNumber() {\n\t\t\t// Format each digit of national phone number (so far)\n\t\t\t// using the selected phone number pattern.\n\t\t\treturn this.formatNextNationalNumberDigits(this.nationalNumber);\n\t\t}\n\t}, {\n\t\tkey: 'initialize_phone_number_formats_for_this_country_calling_code',\n\t\tvalue: function initialize_phone_number_formats_for_this_country_calling_code() {\n\t\t\t// Get all \"eligible\" phone number formats for this country\n\t\t\tthis.available_formats = this.metadata.formats().filter(function (format) {\n\t\t\t\treturn ELIGIBLE_FORMAT_PATTERN.test(format.internationalFormat());\n\t\t\t});\n\n\t\t\tthis.matching_formats = undefined;\n\t\t}\n\t}, {\n\t\tkey: 'match_formats_by_leading_digits',\n\t\tvalue: function match_formats_by_leading_digits() {\n\t\t\tvar leading_digits = this.nationalNumber;\n\n\t\t\t// \"leading digits\" pattern list starts with a\n\t\t\t// \"leading digits\" pattern fitting a maximum of 3 leading digits.\n\t\t\t// So, after a user inputs 3 digits of a national (significant) phone number\n\t\t\t// this national (significant) number can already be formatted.\n\t\t\t// The next \"leading digits\" pattern is for 4 leading digits max,\n\t\t\t// and the \"leading digits\" pattern after it is for 5 leading digits max, etc.\n\n\t\t\t// This implementation is different from Google's\n\t\t\t// in that it searches for a fitting format\n\t\t\t// even if the user has entered less than\n\t\t\t// `MIN_LEADING_DIGITS_LENGTH` digits of a national number.\n\t\t\t// Because some leading digits patterns already match for a single first digit.\n\t\t\tvar index_of_leading_digits_pattern = leading_digits.length - MIN_LEADING_DIGITS_LENGTH;\n\t\t\tif (index_of_leading_digits_pattern < 0) {\n\t\t\t\tindex_of_leading_digits_pattern = 0;\n\t\t\t}\n\n\t\t\t// \"Available formats\" are all formats available for the country.\n\t\t\t// \"Matching formats\" are only formats eligible for the national number being entered.\n\n\t\t\t// If at least `MIN_LEADING_DIGITS_LENGTH` digits of a national number are available\n\t\t\t// then format matching starts narrowing down the list of possible formats\n\t\t\t// (only previously matched formats are considered for next digits).\n\t\t\tvar available_formats = this.had_enough_leading_digits && this.matching_formats || this.available_formats;\n\t\t\tthis.had_enough_leading_digits = this.shouldFormat();\n\n\t\t\tthis.matching_formats = available_formats.filter(function (format) {\n\t\t\t\tvar leading_digits_patterns_count = format.leadingDigitsPatterns().length;\n\n\t\t\t\t// If this format is not restricted to a certain\n\t\t\t\t// leading digits pattern then it fits.\n\t\t\t\tif (leading_digits_patterns_count === 0) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\tvar leading_digits_pattern_index = Math.min(index_of_leading_digits_pattern, leading_digits_patterns_count - 1);\n\t\t\t\tvar leading_digits_pattern = format.leadingDigitsPatterns()[leading_digits_pattern_index];\n\n\t\t\t\t// Brackets are required for `^` to be applied to\n\t\t\t\t// all or-ed (`|`) parts, not just the first one.\n\t\t\t\treturn new RegExp('^(' + leading_digits_pattern + ')').test(leading_digits);\n\t\t\t});\n\n\t\t\t// If there was a phone number format chosen\n\t\t\t// and it no longer holds given the new leading digits then reset it.\n\t\t\t// The test for this `if` condition is marked as:\n\t\t\t// \"Reset a chosen format when it no longer holds given the new leading digits\".\n\t\t\t// To construct a valid test case for this one can find a country\n\t\t\t// in `PhoneNumberMetadata.xml` yielding one format for 3 `<leadingDigits>`\n\t\t\t// and yielding another format for 4 `<leadingDigits>` (Australia in this case).\n\t\t\tif (this.chosenFormat && this.matching_formats.indexOf(this.chosenFormat) === -1) {\n\t\t\t\tthis.resetFormat();\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: 'shouldFormat',\n\t\tvalue: function shouldFormat() {\n\t\t\t// Start matching any formats at all when the national number\n\t\t\t// entered so far is at least 3 digits long,\n\t\t\t// otherwise format matching would give false negatives\n\t\t\t// like when the digits entered so far are `2`\n\t\t\t// and the leading digits pattern is `21` –\n\t\t\t// it's quite obvious in this case that the format could be the one\n\t\t\t// but due to the absence of further digits it would give false negative.\n\t\t\t//\n\t\t\t// Presumably the limitation of \"3 digits min\"\n\t\t\t// is imposed to exclude false matches,\n\t\t\t// e.g. when there are two different formats\n\t\t\t// each one fitting one or two leading digits being input.\n\t\t\t// But for this case I would propose a specific `if/else` condition.\n\t\t\t//\n\t\t\treturn this.nationalNumber.length >= MIN_LEADING_DIGITS_LENGTH;\n\t\t}\n\n\t\t// Check to see if there is an exact pattern match for these digits. If so, we\n\t\t// should use this instead of any other formatting template whose\n\t\t// `leadingDigitsPattern` also matches the input.\n\n\t}, {\n\t\tkey: 'attempt_to_format_complete_phone_number',\n\t\tvalue: function attempt_to_format_complete_phone_number() {\n\t\t\tfor (var _iterator = this.matching_formats, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n\t\t\t\tvar _ref;\n\n\t\t\t\tif (_isArray) {\n\t\t\t\t\tif (_i >= _iterator.length) break;\n\t\t\t\t\t_ref = _iterator[_i++];\n\t\t\t\t} else {\n\t\t\t\t\t_i = _iterator.next();\n\t\t\t\t\tif (_i.done) break;\n\t\t\t\t\t_ref = _i.value;\n\t\t\t\t}\n\n\t\t\t\tvar format = _ref;\n\n\t\t\t\tvar matcher = new RegExp('^(?:' + format.pattern() + ')$');\n\n\t\t\t\tif (!matcher.test(this.nationalNumber)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (!this.isFormatApplicable(format)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// To leave the formatter in a consistent state\n\t\t\t\tthis.resetFormat();\n\t\t\t\tthis.chosenFormat = format;\n\n\t\t\t\tvar formatted_number = (0, _format_.format_national_number_using_format)(this.nationalNumber, format, this.isInternational(), this.nationalPrefix !== '', this.metadata);\n\n\t\t\t\t// Special handling for NANPA countries for AsYouType formatter.\n\t\t\t\t// Copied from Google's `libphonenumber`:\n\t\t\t\t// https://github.com/googlei18n/libphonenumber/blob/66986dbbe443ee8450e2b54dcd44ac384b3bbee8/java/libphonenumber/src/com/google/i18n/phonenumbers/AsYouTypeFormatter.java#L535-L573\n\t\t\t\tif (this.nationalPrefix && this.countryCallingCode === '1') {\n\t\t\t\t\tformatted_number = '1 ' + formatted_number;\n\t\t\t\t}\n\n\t\t\t\t// Set `this.template` and `this.partially_populated_template`.\n\t\t\t\t//\n\t\t\t\t// `else` case doesn't ever happen\n\t\t\t\t// with the current metadata,\n\t\t\t\t// but just in case.\n\t\t\t\t//\n\t\t\t\t/* istanbul ignore else */\n\t\t\t\tif (this.createFormattingTemplate(format)) {\n\t\t\t\t\t// Populate `this.partially_populated_template`\n\t\t\t\t\tthis.reformatNationalNumber();\n\t\t\t\t} else {\n\t\t\t\t\t// Prepend `+CountryCode` in case of an international phone number\n\t\t\t\t\tvar full_number = this.formatFullNumber(formatted_number);\n\t\t\t\t\tthis.template = full_number.replace(/[\\d\\+]/g, DIGIT_PLACEHOLDER);\n\t\t\t\t\tthis.partially_populated_template = full_number;\n\t\t\t\t}\n\n\t\t\t\treturn formatted_number;\n\t\t\t}\n\t\t}\n\n\t\t// Prepends `+CountryCode` in case of an international phone number\n\n\t}, {\n\t\tkey: 'formatFullNumber',\n\t\tvalue: function formatFullNumber(formattedNationalNumber) {\n\t\t\tif (this.isInternational()) {\n\t\t\t\treturn '+' + this.countryCallingCode + ' ' + formattedNationalNumber;\n\t\t\t}\n\t\t\treturn formattedNationalNumber;\n\t\t}\n\n\t\t// Extracts the country calling code from the beginning\n\t\t// of the entered `national_number` (so far),\n\t\t// and places the remaining input into the `national_number`.\n\n\t}, {\n\t\tkey: 'extractCountryCallingCode',\n\t\tvalue: function extractCountryCallingCode() {\n\t\t\tvar _extractCountryCallin = (0, _parse_.extractCountryCallingCode)(this.parsedInput, this.defaultCountry, this.metadata.metadata),\n\t\t\t    countryCallingCode = _extractCountryCallin.countryCallingCode,\n\t\t\t    number = _extractCountryCallin.number;\n\n\t\t\tif (!countryCallingCode) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.countryCallingCode = countryCallingCode;\n\n\t\t\t// Sometimes people erroneously write national prefix\n\t\t\t// as part of an international number, e.g. +44 (0) ....\n\t\t\t// This violates the standards for international phone numbers,\n\t\t\t// so \"As You Type\" formatter assumes no national prefix\n\t\t\t// when parsing a phone number starting from `+`.\n\t\t\t// Even if it did attempt to filter-out that national prefix\n\t\t\t// it would look weird for a user trying to enter a digit\n\t\t\t// because from user's perspective the keyboard \"wouldn't be working\".\n\t\t\tthis.nationalNumber = number;\n\n\t\t\tthis.metadata.chooseCountryByCountryCallingCode(countryCallingCode);\n\t\t\treturn this.metadata.selectedCountry() !== undefined;\n\t\t}\n\t}, {\n\t\tkey: 'extractNationalPrefix',\n\t\tvalue: function extractNationalPrefix() {\n\t\t\tthis.nationalPrefix = '';\n\n\t\t\tif (!this.metadata.selectedCountry()) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Only strip national prefixes for non-international phone numbers\n\t\t\t// because national prefixes can't be present in international phone numbers.\n\t\t\t// While `parseNumber()` is forgiving is such cases, `AsYouType` is not.\n\n\t\t\tvar _strip_national_prefi = (0, _parse_.strip_national_prefix_and_carrier_code)(this.nationalNumber, this.metadata),\n\t\t\t    potential_national_number = _strip_national_prefi.number,\n\t\t\t    carrierCode = _strip_national_prefi.carrierCode;\n\n\t\t\tif (carrierCode) {\n\t\t\t\tthis.carrierCode = carrierCode;\n\t\t\t}\n\n\t\t\t// We require that the NSN remaining after stripping the national prefix and\n\t\t\t// carrier code be long enough to be a possible length for the region.\n\t\t\t// Otherwise, we don't do the stripping, since the original number could be\n\t\t\t// a valid short number.\n\t\t\tif (!this.metadata.possibleLengths() || this.isPossibleNumber(this.nationalNumber) && !this.isPossibleNumber(potential_national_number)) {\n\t\t\t\t// Verify the parsed national (significant) number for this country\n\t\t\t\t//\n\t\t\t\t// If the original number (before stripping national prefix) was viable,\n\t\t\t\t// and the resultant number is not, then prefer the original phone number.\n\t\t\t\t// This is because for some countries (e.g. Russia) the same digit could be both\n\t\t\t\t// a national prefix and a leading digit of a valid national phone number,\n\t\t\t\t// like `8` is the national prefix for Russia and both\n\t\t\t\t// `8 800 555 35 35` and `800 555 35 35` are valid numbers.\n\t\t\t\tif ((0, _util.matchesEntirely)(this.nationalNumber, this.metadata.nationalNumberPattern()) && !(0, _util.matchesEntirely)(potential_national_number, this.metadata.nationalNumberPattern())) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.nationalPrefix = this.nationalNumber.slice(0, this.nationalNumber.length - potential_national_number.length);\n\t\t\tthis.nationalNumber = potential_national_number;\n\n\t\t\treturn this.nationalPrefix;\n\t\t}\n\t}, {\n\t\tkey: 'isPossibleNumber',\n\t\tvalue: function isPossibleNumber(number) {\n\t\t\tvar validation_result = (0, _getNumberType_.checkNumberLengthForType)(number, undefined, this.metadata);\n\t\t\tswitch (validation_result) {\n\t\t\t\tcase 'IS_POSSIBLE':\n\t\t\t\t\treturn true;\n\t\t\t\t// case 'IS_POSSIBLE_LOCAL_ONLY':\n\t\t\t\t// \treturn !this.isInternational()\n\t\t\t\tdefault:\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: 'chooseAnotherFormat',\n\t\tvalue: function chooseAnotherFormat() {\n\t\t\t// When there are multiple available formats, the formatter uses the first\n\t\t\t// format where a formatting template could be created.\n\t\t\tfor (var _iterator2 = this.matching_formats, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {\n\t\t\t\tvar _ref2;\n\n\t\t\t\tif (_isArray2) {\n\t\t\t\t\tif (_i2 >= _iterator2.length) break;\n\t\t\t\t\t_ref2 = _iterator2[_i2++];\n\t\t\t\t} else {\n\t\t\t\t\t_i2 = _iterator2.next();\n\t\t\t\t\tif (_i2.done) break;\n\t\t\t\t\t_ref2 = _i2.value;\n\t\t\t\t}\n\n\t\t\t\tvar format = _ref2;\n\n\t\t\t\t// If this format is currently being used\n\t\t\t\t// and is still possible, then stick to it.\n\t\t\t\tif (this.chosenFormat === format) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// If this `format` is suitable for \"as you type\",\n\t\t\t\t// then extract the template from this format\n\t\t\t\t// and use it to format the phone number being input.\n\n\t\t\t\tif (!this.isFormatApplicable(format)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (!this.createFormattingTemplate(format)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tthis.chosenFormat = format;\n\n\t\t\t\t// With a new formatting template, the matched position\n\t\t\t\t// using the old template needs to be reset.\n\t\t\t\tthis.last_match_position = -1;\n\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\t// No format matches the phone number,\n\t\t\t// therefore set `country` to `undefined`\n\t\t\t// (or to the default country).\n\t\t\tthis.resetCountry();\n\n\t\t\t// No format matches the national phone number entered\n\t\t\tthis.resetFormat();\n\t\t}\n\t}, {\n\t\tkey: 'isFormatApplicable',\n\t\tvalue: function isFormatApplicable(format) {\n\t\t\t// If national prefix is mandatory for this phone number format\n\t\t\t// and the user didn't input the national prefix\n\t\t\t// then this phone number format isn't suitable.\n\t\t\tif (!this.isInternational() && !this.nationalPrefix && format.nationalPrefixIsMandatoryWhenFormatting()) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t// If this format doesn't use national prefix\n\t\t\t// but the user did input national prefix\n\t\t\t// then this phone number format isn't suitable.\n\t\t\tif (this.nationalPrefix && !format.usesNationalPrefix() && !format.nationalPrefixIsOptionalWhenFormatting()) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t}, {\n\t\tkey: 'createFormattingTemplate',\n\t\tvalue: function createFormattingTemplate(format) {\n\t\t\t// The formatter doesn't format numbers when numberPattern contains '|', e.g.\n\t\t\t// (20|3)\\d{4}. In those cases we quickly return.\n\t\t\t// (Though there's no such format in current metadata)\n\t\t\t/* istanbul ignore if */\n\t\t\tif (SUPPORT_LEGACY_FORMATTING_PATTERNS && format.pattern().indexOf('|') >= 0) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Get formatting template for this phone number format\n\t\t\tvar template = this.getTemplateForNumberFormatPattern(format);\n\n\t\t\t// If the national number entered is too long\n\t\t\t// for any phone number format, then abort.\n\t\t\tif (!template) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// This one is for national number only\n\t\t\tthis.partially_populated_template = template;\n\n\t\t\t// For convenience, the public `.template` property\n\t\t\t// contains the whole international number\n\t\t\t// if the phone number being input is international:\n\t\t\t// 'x' for the '+' sign, 'x'es for the country phone code,\n\t\t\t// a spacebar and then the template for the formatted national number.\n\t\t\tif (this.isInternational()) {\n\t\t\t\tthis.template = DIGIT_PLACEHOLDER + repeat(DIGIT_PLACEHOLDER, this.countryCallingCode.length) + ' ' + template;\n\t\t\t}\n\t\t\t// For local numbers, replace national prefix\n\t\t\t// with a digit placeholder.\n\t\t\telse {\n\t\t\t\t\tthis.template = template.replace(/\\d/g, DIGIT_PLACEHOLDER);\n\t\t\t\t}\n\n\t\t\t// This one is for the full phone number\n\t\t\treturn this.template;\n\t\t}\n\n\t\t// Generates formatting template for a phone number format\n\n\t}, {\n\t\tkey: 'getTemplateForNumberFormatPattern',\n\t\tvalue: function getTemplateForNumberFormatPattern(format) {\n\t\t\t// A very smart trick by the guys at Google\n\t\t\tvar number_pattern = format.pattern();\n\n\t\t\t/* istanbul ignore else */\n\t\t\tif (SUPPORT_LEGACY_FORMATTING_PATTERNS) {\n\t\t\t\tnumber_pattern = number_pattern\n\t\t\t\t// Replace anything in the form of [..] with \\d\n\t\t\t\t.replace(CREATE_CHARACTER_CLASS_PATTERN(), '\\\\d')\n\t\t\t\t// Replace any standalone digit (not the one in `{}`) with \\d\n\t\t\t\t.replace(CREATE_STANDALONE_DIGIT_PATTERN(), '\\\\d');\n\t\t\t}\n\n\t\t\t// This match will always succeed,\n\t\t\t// because the \"longest dummy phone number\"\n\t\t\t// has enough length to accomodate any possible\n\t\t\t// national phone number format pattern.\n\t\t\tvar dummy_phone_number_matching_format_pattern = LONGEST_DUMMY_PHONE_NUMBER.match(number_pattern)[0];\n\n\t\t\t// If the national number entered is too long\n\t\t\t// for any phone number format, then abort.\n\t\t\tif (this.nationalNumber.length > dummy_phone_number_matching_format_pattern.length) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Prepare the phone number format\n\t\t\tvar number_format = this.getFormatFormat(format);\n\n\t\t\t// Get a formatting template which can be used to efficiently format\n\t\t\t// a partial number where digits are added one by one.\n\n\t\t\t// Below `strict_pattern` is used for the\n\t\t\t// regular expression (with `^` and `$`).\n\t\t\t// This wasn't originally in Google's `libphonenumber`\n\t\t\t// and I guess they don't really need it\n\t\t\t// because they're not using \"templates\" to format phone numbers\n\t\t\t// but I added `strict_pattern` after encountering\n\t\t\t// South Korean phone number formatting bug.\n\t\t\t//\n\t\t\t// Non-strict regular expression bug demonstration:\n\t\t\t//\n\t\t\t// this.nationalNumber : `111111111` (9 digits)\n\t\t\t//\n\t\t\t// number_pattern : (\\d{2})(\\d{3,4})(\\d{4})\n\t\t\t// number_format : `$1 $2 $3`\n\t\t\t// dummy_phone_number_matching_format_pattern : `9999999999` (10 digits)\n\t\t\t//\n\t\t\t// '9999999999'.replace(new RegExp(/(\\d{2})(\\d{3,4})(\\d{4})/g), '$1 $2 $3') = \"99 9999 9999\"\n\t\t\t//\n\t\t\t// template : xx xxxx xxxx\n\t\t\t//\n\t\t\t// But the correct template in this case is `xx xxx xxxx`.\n\t\t\t// The template was generated incorrectly because of the\n\t\t\t// `{3,4}` variability in the `number_pattern`.\n\t\t\t//\n\t\t\t// The fix is, if `this.nationalNumber` has already sufficient length\n\t\t\t// to satisfy the `number_pattern` completely then `this.nationalNumber` is used\n\t\t\t// instead of `dummy_phone_number_matching_format_pattern`.\n\n\t\t\tvar strict_pattern = new RegExp('^' + number_pattern + '$');\n\t\t\tvar national_number_dummy_digits = this.nationalNumber.replace(/\\d/g, DUMMY_DIGIT);\n\n\t\t\t// If `this.nationalNumber` has already sufficient length\n\t\t\t// to satisfy the `number_pattern` completely then use it\n\t\t\t// instead of `dummy_phone_number_matching_format_pattern`.\n\t\t\tif (strict_pattern.test(national_number_dummy_digits)) {\n\t\t\t\tdummy_phone_number_matching_format_pattern = national_number_dummy_digits;\n\t\t\t}\n\n\t\t\t// Generate formatting template for this phone number format\n\t\t\treturn dummy_phone_number_matching_format_pattern\n\t\t\t// Format the dummy phone number according to the format\n\t\t\t.replace(new RegExp(number_pattern), number_format)\n\t\t\t// Replace each dummy digit with a DIGIT_PLACEHOLDER\n\t\t\t.replace(new RegExp(DUMMY_DIGIT, 'g'), DIGIT_PLACEHOLDER);\n\t\t}\n\t}, {\n\t\tkey: 'formatNextNationalNumberDigits',\n\t\tvalue: function formatNextNationalNumberDigits(digits) {\n\t\t\t// Using `.split('')` to iterate through a string here\n\t\t\t// to avoid requiring `Symbol.iterator` polyfill.\n\t\t\t// `.split('')` is generally not safe for Unicode,\n\t\t\t// but in this particular case for `digits` it is safe.\n\t\t\t// for (const digit of digits)\n\t\t\tfor (var _iterator3 = digits.split(''), _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {\n\t\t\t\tvar _ref3;\n\n\t\t\t\tif (_isArray3) {\n\t\t\t\t\tif (_i3 >= _iterator3.length) break;\n\t\t\t\t\t_ref3 = _iterator3[_i3++];\n\t\t\t\t} else {\n\t\t\t\t\t_i3 = _iterator3.next();\n\t\t\t\t\tif (_i3.done) break;\n\t\t\t\t\t_ref3 = _i3.value;\n\t\t\t\t}\n\n\t\t\t\tvar digit = _ref3;\n\n\t\t\t\t// If there is room for more digits in current `template`,\n\t\t\t\t// then set the next digit in the `template`,\n\t\t\t\t// and return the formatted digits so far.\n\n\t\t\t\t// If more digits are entered than the current format could handle\n\t\t\t\tif (this.partially_populated_template.slice(this.last_match_position + 1).search(DIGIT_PLACEHOLDER_MATCHER) === -1) {\n\t\t\t\t\t// Reset the current format,\n\t\t\t\t\t// so that the new format will be chosen\n\t\t\t\t\t// in a subsequent `this.chooseAnotherFormat()` call\n\t\t\t\t\t// later in code.\n\t\t\t\t\tthis.chosenFormat = undefined;\n\t\t\t\t\tthis.template = undefined;\n\t\t\t\t\tthis.partially_populated_template = undefined;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tthis.last_match_position = this.partially_populated_template.search(DIGIT_PLACEHOLDER_MATCHER);\n\t\t\t\tthis.partially_populated_template = this.partially_populated_template.replace(DIGIT_PLACEHOLDER_MATCHER, digit);\n\t\t\t}\n\n\t\t\t// Return the formatted phone number so far.\n\t\t\treturn cut_stripping_dangling_braces(this.partially_populated_template, this.last_match_position + 1);\n\n\t\t\t// The old way which was good for `input-format` but is not so good\n\t\t\t// for `react-phone-number-input`'s default input (`InputBasic`).\n\t\t\t// return close_dangling_braces(this.partially_populated_template, this.last_match_position + 1)\n\t\t\t// \t.replace(DIGIT_PLACEHOLDER_MATCHER_GLOBAL, ' ')\n\t\t}\n\t}, {\n\t\tkey: 'isInternational',\n\t\tvalue: function isInternational() {\n\t\t\treturn this.parsedInput && this.parsedInput[0] === '+';\n\t\t}\n\t}, {\n\t\tkey: 'getFormatFormat',\n\t\tvalue: function getFormatFormat(format) {\n\t\t\tif (this.isInternational()) {\n\t\t\t\treturn (0, _format_.changeInternationalFormatStyle)(format.internationalFormat());\n\t\t\t}\n\n\t\t\t// If national prefix formatting rule is set\n\t\t\t// for this phone number format\n\t\t\tif (format.nationalPrefixFormattingRule()) {\n\t\t\t\t// If the user did input the national prefix\n\t\t\t\t// (or if the national prefix formatting rule does not require national prefix)\n\t\t\t\t// then maybe make it part of the phone number template\n\t\t\t\tif (this.nationalPrefix || !format.usesNationalPrefix()) {\n\t\t\t\t\t// Make the national prefix part of the phone number template\n\t\t\t\t\treturn format.format().replace(_format_.FIRST_GROUP_PATTERN, format.nationalPrefixFormattingRule());\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Special handling for NANPA countries for AsYouType formatter.\n\t\t\t// Copied from Google's `libphonenumber`:\n\t\t\t// https://github.com/googlei18n/libphonenumber/blob/66986dbbe443ee8450e2b54dcd44ac384b3bbee8/java/libphonenumber/src/com/google/i18n/phonenumbers/AsYouTypeFormatter.java#L535-L573\n\t\t\telse if (this.countryCallingCode === '1' && this.nationalPrefix === '1') {\n\t\t\t\t\treturn '1 ' + format.format();\n\t\t\t\t}\n\n\t\t\treturn format.format();\n\t\t}\n\n\t\t// Determines the country of the phone number\n\t\t// entered so far based on the country phone code\n\t\t// and the national phone number.\n\n\t}, {\n\t\tkey: 'determineTheCountry',\n\t\tvalue: function determineTheCountry() {\n\t\t\tthis.country = (0, _parse_.find_country_code)(this.countryCallingCode, this.nationalNumber, this.metadata);\n\t\t}\n\n\t\t/**\r\n   * Returns an instance of `PhoneNumber` class.\r\n   * Will return `undefined` if no national (significant) number\r\n   * digits have been entered so far, or if no `defaultCountry` has been\r\n   * set and the user enters a phone number not in international format.\r\n   */\n\n\t}, {\n\t\tkey: 'getNumber',\n\t\tvalue: function getNumber() {\n\t\t\tif (!this.countryCallingCode || !this.nationalNumber) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t\tvar phoneNumber = new _PhoneNumber2.default(this.country || this.countryCallingCode, this.nationalNumber, this.metadata.metadata);\n\t\t\tif (this.carrierCode) {\n\t\t\t\tphoneNumber.carrierCode = this.carrierCode;\n\t\t\t}\n\t\t\t// Phone number extensions are not supported by \"As You Type\" formatter.\n\t\t\treturn phoneNumber;\n\t\t}\n\t}, {\n\t\tkey: 'getNationalNumber',\n\t\tvalue: function getNationalNumber() {\n\t\t\treturn this.nationalNumber;\n\t\t}\n\t}, {\n\t\tkey: 'getTemplate',\n\t\tvalue: function getTemplate() {\n\t\t\tif (!this.template) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar index = -1;\n\n\t\t\tvar i = 0;\n\t\t\twhile (i < this.parsedInput.length) {\n\t\t\t\tindex = this.template.indexOf(DIGIT_PLACEHOLDER, index + 1);\n\t\t\t\ti++;\n\t\t\t}\n\n\t\t\treturn cut_stripping_dangling_braces(this.template, index + 1);\n\t\t}\n\t}]);\n\n\treturn AsYouType;\n}();\n\nexports.default = AsYouType;\nfunction strip_dangling_braces(string) {\n\tvar dangling_braces = [];\n\tvar i = 0;\n\twhile (i < string.length) {\n\t\tif (string[i] === '(') {\n\t\t\tdangling_braces.push(i);\n\t\t} else if (string[i] === ')') {\n\t\t\tdangling_braces.pop();\n\t\t}\n\t\ti++;\n\t}\n\n\tvar start = 0;\n\tvar cleared_string = '';\n\tdangling_braces.push(string.length);\n\tfor (var _iterator4 = dangling_braces, _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _iterator4[Symbol.iterator]();;) {\n\t\tvar _ref4;\n\n\t\tif (_isArray4) {\n\t\t\tif (_i4 >= _iterator4.length) break;\n\t\t\t_ref4 = _iterator4[_i4++];\n\t\t} else {\n\t\t\t_i4 = _iterator4.next();\n\t\t\tif (_i4.done) break;\n\t\t\t_ref4 = _i4.value;\n\t\t}\n\n\t\tvar index = _ref4;\n\n\t\tcleared_string += string.slice(start, index);\n\t\tstart = index + 1;\n\t}\n\n\treturn cleared_string;\n}\n\nfunction cut_stripping_dangling_braces(string, cut_before_index) {\n\tif (string[cut_before_index] === ')') {\n\t\tcut_before_index++;\n\t}\n\treturn strip_dangling_braces(string.slice(0, cut_before_index));\n}\n\nfunction close_dangling_braces(template, cut_before) {\n\tvar retained_template = template.slice(0, cut_before);\n\n\tvar opening_braces = count_occurences('(', retained_template);\n\tvar closing_braces = count_occurences(')', retained_template);\n\n\tvar dangling_braces = opening_braces - closing_braces;\n\twhile (dangling_braces > 0 && cut_before < template.length) {\n\t\tif (template[cut_before] === ')') {\n\t\t\tdangling_braces--;\n\t\t}\n\t\tcut_before++;\n\t}\n\n\treturn template.slice(0, cut_before);\n}\n\n// Counts all occurences of a symbol in a string.\n// Unicode-unsafe (because using `.split()`).\nfunction count_occurences(symbol, string) {\n\tvar count = 0;\n\n\t// Using `.split('')` to iterate through a string here\n\t// to avoid requiring `Symbol.iterator` polyfill.\n\t// `.split('')` is generally not safe for Unicode,\n\t// but in this particular case for counting brackets it is safe.\n\t// for (const character of string)\n\tfor (var _iterator5 = string.split(''), _isArray5 = Array.isArray(_iterator5), _i5 = 0, _iterator5 = _isArray5 ? _iterator5 : _iterator5[Symbol.iterator]();;) {\n\t\tvar _ref5;\n\n\t\tif (_isArray5) {\n\t\t\tif (_i5 >= _iterator5.length) break;\n\t\t\t_ref5 = _iterator5[_i5++];\n\t\t} else {\n\t\t\t_i5 = _iterator5.next();\n\t\t\tif (_i5.done) break;\n\t\t\t_ref5 = _i5.value;\n\t\t}\n\n\t\tvar character = _ref5;\n\n\t\tif (character === symbol) {\n\t\t\tcount++;\n\t\t}\n\t}\n\n\treturn count;\n}\n\n// Repeats a string (or a symbol) N times.\n// http://stackoverflow.com/questions/202605/repeat-string-javascript\nfunction repeat(string, times) {\n\tif (times < 1) {\n\t\treturn '';\n\t}\n\n\tvar result = '';\n\n\twhile (times > 1) {\n\t\tif (times & 1) {\n\t\t\tresult += string;\n\t\t}\n\n\t\ttimes >>= 1;\n\t\tstring += string;\n\t}\n\n\treturn result + string;\n}\n//# sourceMappingURL=AsYouType.js.map","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nfunction componentWillMount() {\n  // Call this.constructor.gDSFP to support sub-classes.\n  var state = this.constructor.getDerivedStateFromProps(this.props, this.state);\n  if (state !== null && state !== undefined) {\n    this.setState(state);\n  }\n}\n\nfunction componentWillReceiveProps(nextProps) {\n  // Call this.constructor.gDSFP to support sub-classes.\n  // Use the setState() updater to ensure state isn't stale in certain edge cases.\n  function updater(prevState) {\n    var state = this.constructor.getDerivedStateFromProps(nextProps, prevState);\n    return state !== null && state !== undefined ? state : null;\n  }\n  // Binding \"this\" is important for shallow renderer support.\n  this.setState(updater.bind(this));\n}\n\nfunction componentWillUpdate(nextProps, nextState) {\n  try {\n    var prevProps = this.props;\n    var prevState = this.state;\n    this.props = nextProps;\n    this.state = nextState;\n    this.__reactInternalSnapshotFlag = true;\n    this.__reactInternalSnapshot = this.getSnapshotBeforeUpdate(\n      prevProps,\n      prevState\n    );\n  } finally {\n    this.props = prevProps;\n    this.state = prevState;\n  }\n}\n\n// React may warn about cWM/cWRP/cWU methods being deprecated.\n// Add a flag to suppress these warnings for this special case.\ncomponentWillMount.__suppressDeprecationWarning = true;\ncomponentWillReceiveProps.__suppressDeprecationWarning = true;\ncomponentWillUpdate.__suppressDeprecationWarning = true;\n\nfunction polyfill(Component) {\n  var prototype = Component.prototype;\n\n  if (!prototype || !prototype.isReactComponent) {\n    throw new Error('Can only polyfill class components');\n  }\n\n  if (\n    typeof Component.getDerivedStateFromProps !== 'function' &&\n    typeof prototype.getSnapshotBeforeUpdate !== 'function'\n  ) {\n    return Component;\n  }\n\n  // If new component APIs are defined, \"unsafe\" lifecycles won't be called.\n  // Error if any of these lifecycles are present,\n  // Because they would work differently between older and newer (16.3+) versions of React.\n  var foundWillMountName = null;\n  var foundWillReceivePropsName = null;\n  var foundWillUpdateName = null;\n  if (typeof prototype.componentWillMount === 'function') {\n    foundWillMountName = 'componentWillMount';\n  } else if (typeof prototype.UNSAFE_componentWillMount === 'function') {\n    foundWillMountName = 'UNSAFE_componentWillMount';\n  }\n  if (typeof prototype.componentWillReceiveProps === 'function') {\n    foundWillReceivePropsName = 'componentWillReceiveProps';\n  } else if (typeof prototype.UNSAFE_componentWillReceiveProps === 'function') {\n    foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';\n  }\n  if (typeof prototype.componentWillUpdate === 'function') {\n    foundWillUpdateName = 'componentWillUpdate';\n  } else if (typeof prototype.UNSAFE_componentWillUpdate === 'function') {\n    foundWillUpdateName = 'UNSAFE_componentWillUpdate';\n  }\n  if (\n    foundWillMountName !== null ||\n    foundWillReceivePropsName !== null ||\n    foundWillUpdateName !== null\n  ) {\n    var componentName = Component.displayName || Component.name;\n    var newApiName =\n      typeof Component.getDerivedStateFromProps === 'function'\n        ? 'getDerivedStateFromProps()'\n        : 'getSnapshotBeforeUpdate()';\n\n    throw Error(\n      'Unsafe legacy lifecycles will not be called for components using new component APIs.\\n\\n' +\n        componentName +\n        ' uses ' +\n        newApiName +\n        ' but also contains the following legacy lifecycles:' +\n        (foundWillMountName !== null ? '\\n  ' + foundWillMountName : '') +\n        (foundWillReceivePropsName !== null\n          ? '\\n  ' + foundWillReceivePropsName\n          : '') +\n        (foundWillUpdateName !== null ? '\\n  ' + foundWillUpdateName : '') +\n        '\\n\\nThe above lifecycles should be removed. Learn more about this warning here:\\n' +\n        'https://fb.me/react-async-component-lifecycle-hooks'\n    );\n  }\n\n  // React <= 16.2 does not support static getDerivedStateFromProps.\n  // As a workaround, use cWM and cWRP to invoke the new static lifecycle.\n  // Newer versions of React will ignore these lifecycles if gDSFP exists.\n  if (typeof Component.getDerivedStateFromProps === 'function') {\n    prototype.componentWillMount = componentWillMount;\n    prototype.componentWillReceiveProps = componentWillReceiveProps;\n  }\n\n  // React <= 16.2 does not support getSnapshotBeforeUpdate.\n  // As a workaround, use cWU to invoke the new lifecycle.\n  // Newer versions of React will ignore that lifecycle if gSBU exists.\n  if (typeof prototype.getSnapshotBeforeUpdate === 'function') {\n    if (typeof prototype.componentDidUpdate !== 'function') {\n      throw new Error(\n        'Cannot polyfill getSnapshotBeforeUpdate() for components that do not define componentDidUpdate() on the prototype'\n      );\n    }\n\n    prototype.componentWillUpdate = componentWillUpdate;\n\n    var componentDidUpdate = prototype.componentDidUpdate;\n\n    prototype.componentDidUpdate = function componentDidUpdatePolyfill(\n      prevProps,\n      prevState,\n      maybeSnapshot\n    ) {\n      // 16.3+ will not execute our will-update method;\n      // It will pass a snapshot value to did-update though.\n      // Older versions will require our polyfilled will-update value.\n      // We need to handle both cases, but can't just check for the presence of \"maybeSnapshot\",\n      // Because for <= 15.x versions this might be a \"prevContext\" object.\n      // We also can't just check \"__reactInternalSnapshot\",\n      // Because get-snapshot might return a falsy value.\n      // So check for the explicit __reactInternalSnapshotFlag flag to determine behavior.\n      var snapshot = this.__reactInternalSnapshotFlag\n        ? this.__reactInternalSnapshot\n        : maybeSnapshot;\n\n      componentDidUpdate.call(this, prevProps, prevState, snapshot);\n    };\n  }\n\n  return Component;\n}\n\nexport { polyfill };\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nexports.default = function (template, placeholder, parse) {\n\tif (typeof placeholder === 'function') {\n\t\tparse = placeholder;\n\t\tplaceholder = 'x';\n\t}\n\n\tvar max_characters = (0, _helpers.count_occurences)(placeholder, template);\n\n\treturn function (character, value) {\n\t\tif (value.length < max_characters) {\n\t\t\treturn parse(character, value);\n\t\t}\n\t};\n};\n\nvar _helpers = require('./helpers');\n//# sourceMappingURL=template parser.js.map","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\nexports.default = undefined;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _class, _temp2;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _parse2 = require('./parse');\n\nvar _parse3 = _interopRequireDefault(_parse2);\n\nvar _inputControl = require('./input control');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n// Usage:\n//\n// <ReactInput\n// \tvalue={this.state.phone}\n// \tonChange={phone => this.setState({ phone })}\n// \tparse={character => character}\n// \tformat={value => ({ text: value, template: 'xxxxxxxx' })}/>\n//\nvar ReactInput = (_temp2 = _class = function (_React$Component) {\n\t_inherits(ReactInput, _React$Component);\n\n\tfunction ReactInput() {\n\t\tvar _ref;\n\n\t\tvar _temp, _this, _ret;\n\n\t\t_classCallCheck(this, ReactInput);\n\n\t\tfor (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n\t\t\targs[_key] = arguments[_key];\n\t\t}\n\n\t\treturn _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = ReactInput.__proto__ || Object.getPrototypeOf(ReactInput)).call.apply(_ref, [this].concat(args))), _this), _this.storeInstance = function (instance) {\n\t\t\t_this.input = instance;\n\t\t}, _this.getInputElement = function () {\n\t\t\treturn _this.input;\n\t\t}, _this.onChange = function (event) {\n\t\t\tvar _this$props = _this.props,\n\t\t\t    parse = _this$props.parse,\n\t\t\t    format = _this$props.format;\n\n\n\t\t\treturn (0, _inputControl.onChange)(event, _this.getInputElement(), parse, format, _this.props.onChange);\n\t\t}, _this.onPaste = function (event) {\n\t\t\tvar _this$props2 = _this.props,\n\t\t\t    parse = _this$props2.parse,\n\t\t\t    format = _this$props2.format;\n\n\n\t\t\treturn (0, _inputControl.onPaste)(event, _this.getInputElement(), parse, format, _this.props.onChange);\n\t\t}, _this.onCut = function (event) {\n\t\t\tvar _this$props3 = _this.props,\n\t\t\t    parse = _this$props3.parse,\n\t\t\t    format = _this$props3.format;\n\n\n\t\t\treturn (0, _inputControl.onCut)(event, _this.getInputElement(), parse, format, _this.props.onChange);\n\t\t}, _this.onBlur = function (event) {\n\t\t\tvar _this$props4 = _this.props,\n\t\t\t    parse = _this$props4.parse,\n\t\t\t    onBlur = _this$props4.onBlur;\n\n\t\t\t// This `onBlur` interceptor is a workaround for `redux-form`,\n\t\t\t// so that it gets the right (parsed, not the formatted one)\n\t\t\t// `event.target.value` in its `onBlur` handler.\n\n\t\t\tif (onBlur) {\n\t\t\t\tvar _event = _extends({}, event, {\n\t\t\t\t\ttarget: _extends({}, event.target, {\n\t\t\t\t\t\tvalue: (0, _parse3.default)(_this.getInputElement().value, undefined, parse).value\n\t\t\t\t\t})\n\n\t\t\t\t\t// For `redux-form` event detection.\n\t\t\t\t\t// https://github.com/erikras/redux-form/blob/v5/src/events/isEvent.js\n\t\t\t\t});_event.stopPropagation = event.stopPropagation;\n\t\t\t\t_event.preventDefault = event.preventDefault;\n\n\t\t\t\tonBlur(_event);\n\t\t\t}\n\t\t}, _this.onKeyDown = function (event) {\n\t\t\tvar _this$props5 = _this.props,\n\t\t\t    parse = _this$props5.parse,\n\t\t\t    format = _this$props5.format;\n\n\n\t\t\tif (_this.props.onKeyDown) {\n\t\t\t\t_this.props.onKeyDown(event);\n\t\t\t}\n\n\t\t\treturn (0, _inputControl.onKeyDown)(event, _this.getInputElement(), parse, format, _this.props.onChange);\n\t\t}, _temp), _possibleConstructorReturn(_this, _ret);\n\t}\n\n\t_createClass(ReactInput, [{\n\t\tkey: 'render',\n\t\tvalue: function render() {\n\t\t\tvar _props = this.props,\n\t\t\t    value = _props.value,\n\t\t\t    parse = _props.parse,\n\t\t\t    format = _props.format,\n\t\t\t    inputComponent = _props.inputComponent,\n\t\t\t    rest = _objectWithoutProperties(_props, ['value', 'parse', 'format', 'inputComponent']);\n\n\t\t\t// Non-string `inputComponent`s would work in this case\n\t\t\t// but it would also introduce a caret reset bug:\n\t\t\t// the caret position would reset on each input.\n\t\t\t// The origins of this bug are unknown, they may be\n\t\t\t// somehow related to the `ref` property\n\t\t\t// being intercepted by React here.\n\n\n\t\t\treturn _react2.default.createElement(inputComponent, _extends({}, rest, {\n\t\t\t\tref: this.storeInstance,\n\t\t\t\tvalue: format(isEmpty(value) ? '' : value).text,\n\t\t\t\tonKeyDown: this.onKeyDown,\n\t\t\t\tonChange: this.onChange,\n\t\t\t\tonPaste: this.onPaste,\n\t\t\t\tonCut: this.onCut,\n\t\t\t\tonBlur: this.onBlur\n\t\t\t}));\n\t\t}\n\n\t\t/**\r\n   * Returns `<input/>` DOM Element.\r\n   * @return {DOMElement}\r\n   */\n\n\n\t\t// This handler is a workaround for `redux-form`.\n\n\t}, {\n\t\tkey: 'focus',\n\n\n\t\t/**\r\n   * Focuses the `<input/>`.\r\n   * Can be called manually.\r\n   */\n\t\tvalue: function focus() {\n\t\t\tthis.getInputElement().focus();\n\t\t}\n\t}]);\n\n\treturn ReactInput;\n}(_react2.default.Component), _class.propTypes = {\n\t// Parses a single characher of `<input/>` text.\n\tparse: _propTypes2.default.func.isRequired,\n\n\t// Formats `value` into `<input/>` text.\n\tformat: _propTypes2.default.func.isRequired,\n\n\t// Renders `<input/>` by default.\n\t// For some reason non-default `inputComponent`\n\t// will reset caret position.\n\tinputComponent: _propTypes2.default.string.isRequired,\n\n\t// `<input/>` `type` attribute.\n\ttype: _propTypes2.default.string.isRequired,\n\n\t// Is parsed from <input/> text.\n\tvalue: _propTypes2.default.string,\n\n\t// This handler is called each time `<input/>` text is changed.\n\tonChange: _propTypes2.default.func.isRequired,\n\n\t// This `onBlur` interceptor is a workaround for `redux-form`,\n\t// so that it gets the parsed `value` in its `onBlur` handler,\n\t// not the formatted text.\n\tonBlur: _propTypes2.default.func,\n\n\t// Passthrough\n\tonKeyDown: _propTypes2.default.func\n}, _class.defaultProps = {\n\t// Renders `<input/>` by default.\n\t// For some reason non-default `inputComponent`\n\t// will reset caret position.\n\tinputComponent: 'input',\n\n\t// `<input/>` `type` attribute.\n\ttype: 'text'\n}, _temp2);\nexports.default = ReactInput;\n\n\nfunction isEmpty(value) {\n\treturn value === undefined || value === null;\n}\n//# sourceMappingURL=ReactInput.js.map","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nexports.default = function (character, value) {\n\treturn DIGITS[character];\n};\n\n// Copied from `libphonenumber-js`:\n// https://github.com/catamphetamine/libphonenumber-js/blob/master/source/parse.js\n//\n// These mappings map a character (key) to a specific digit that should\n// replace it for normalization purposes. Non-European digits that\n// may be used in phone numbers are mapped to a European equivalent.\n//\n// E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.\n//\nvar DIGITS = exports.DIGITS = {\n\t'0': '0',\n\t'1': '1',\n\t'2': '2',\n\t'3': '3',\n\t'4': '4',\n\t'5': '5',\n\t'6': '6',\n\t'7': '7',\n\t'8': '8',\n\t'9': '9',\n\t'\\uFF10': '0', // Fullwidth digit 0\n\t'\\uFF11': '1', // Fullwidth digit 1\n\t'\\uFF12': '2', // Fullwidth digit 2\n\t'\\uFF13': '3', // Fullwidth digit 3\n\t'\\uFF14': '4', // Fullwidth digit 4\n\t'\\uFF15': '5', // Fullwidth digit 5\n\t'\\uFF16': '6', // Fullwidth digit 6\n\t'\\uFF17': '7', // Fullwidth digit 7\n\t'\\uFF18': '8', // Fullwidth digit 8\n\t'\\uFF19': '9', // Fullwidth digit 9\n\t'\\u0660': '0', // Arabic-indic digit 0\n\t'\\u0661': '1', // Arabic-indic digit 1\n\t'\\u0662': '2', // Arabic-indic digit 2\n\t'\\u0663': '3', // Arabic-indic digit 3\n\t'\\u0664': '4', // Arabic-indic digit 4\n\t'\\u0665': '5', // Arabic-indic digit 5\n\t'\\u0666': '6', // Arabic-indic digit 6\n\t'\\u0667': '7', // Arabic-indic digit 7\n\t'\\u0668': '8', // Arabic-indic digit 8\n\t'\\u0669': '9', // Arabic-indic digit 9\n\t'\\u06F0': '0', // Eastern-Arabic digit 0\n\t'\\u06F1': '1', // Eastern-Arabic digit 1\n\t'\\u06F2': '2', // Eastern-Arabic digit 2\n\t'\\u06F3': '3', // Eastern-Arabic digit 3\n\t'\\u06F4': '4', // Eastern-Arabic digit 4\n\t'\\u06F5': '5', // Eastern-Arabic digit 5\n\t'\\u06F6': '6', // Eastern-Arabic digit 6\n\t'\\u06F7': '7', // Eastern-Arabic digit 7\n\t'\\u06F8': '8', // Eastern-Arabic digit 8\n\t'\\u06F9': '9' // Eastern-Arabic digit 9\n};\n//# sourceMappingURL=parse digit.js.map","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nexports.default = parsePhoneNumber;\n\nvar _parse_ = require('./parse_');\n\nvar _parse_2 = _interopRequireDefault(_parse_);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction parsePhoneNumber(text, options, metadata) {\n\treturn (0, _parse_2.default)(text, _extends({}, options, { v2: true }), metadata);\n}\n//# sourceMappingURL=parsePhoneNumber_.js.map","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _metadata = require('./metadata');\n\nObject.defineProperty(exports, 'default', {\n  enumerable: true,\n  get: function get() {\n    return _metadata.getCountryCallingCode;\n  }\n});\n//# sourceMappingURL=getCountryCallingCode.js.map","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\nexports.getIDDPrefix = getIDDPrefix;\nexports.stripIDDPrefix = stripIDDPrefix;\n\nvar _metadata = require('./metadata');\n\nvar _metadata2 = _interopRequireDefault(_metadata);\n\nvar _constants = require('./constants');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar CAPTURING_DIGIT_PATTERN = new RegExp('([' + _constants.VALID_DIGITS + '])');\n\n/**\r\n * Pattern that makes it easy to distinguish whether a region has a single\r\n * international dialing prefix or not. If a region has a single international\r\n * prefix (e.g. 011 in USA), it will be represented as a string that contains\r\n * a sequence of ASCII digits, and possibly a tilde, which signals waiting for\r\n * the tone. If there are multiple available international prefixes in a\r\n * region, they will be represented as a regex string that always contains one\r\n * or more characters that are not ASCII digits or a tilde.\r\n */\nvar SINGLE_IDD_PREFIX = /^[\\d]+(?:[~\\u2053\\u223C\\uFF5E][\\d]+)?$/;\n\n// For regions that have multiple IDD prefixes\n// a preferred IDD prefix is returned.\nfunction getIDDPrefix(country, metadata) {\n\tvar countryMetadata = new _metadata2.default(metadata);\n\tcountryMetadata.country(country);\n\n\tif (SINGLE_IDD_PREFIX.test(countryMetadata.IDDPrefix())) {\n\t\treturn countryMetadata.IDDPrefix();\n\t}\n\n\treturn countryMetadata.defaultIDDPrefix();\n}\n\nfunction stripIDDPrefix(number, country, metadata) {\n\tif (!country) {\n\t\treturn;\n\t}\n\n\t// Check if the number is IDD-prefixed.\n\n\tvar countryMetadata = new _metadata2.default(metadata);\n\tcountryMetadata.country(country);\n\n\tvar IDDPrefixPattern = new RegExp(countryMetadata.IDDPrefix());\n\n\tif (number.search(IDDPrefixPattern) !== 0) {\n\t\treturn;\n\t}\n\n\t// Strip IDD prefix.\n\tnumber = number.slice(number.match(IDDPrefixPattern)[0].length);\n\n\t// Some kind of a weird edge case.\n\t// No explanation from Google given.\n\tvar matchedGroups = number.match(CAPTURING_DIGIT_PATTERN);\n\t/* istanbul ignore next */\n\tif (matchedGroups && matchedGroups[1] != null && matchedGroups[1].length > 0) {\n\t\tif (matchedGroups[1] === '0') {\n\t\t\treturn;\n\t\t}\n\t}\n\n\treturn number;\n}\n//# sourceMappingURL=IDD.js.map","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isValidNumberForRegion;\n\nvar _validate_ = require('./validate_');\n\nvar _validate_2 = _interopRequireDefault(_validate_);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\r\n * Checks if a given phone number is valid within a given region.\r\n * Is just an alias for `phoneNumber.isValid() && phoneNumber.country === country`.\r\n * https://github.com/googlei18n/libphonenumber/blob/master/FAQ.md#when-should-i-use-isvalidnumberforregion\r\n */\nfunction isValidNumberForRegion(input, country) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var metadata = arguments[3];\n\n  return input.country === country && (0, _validate_2.default)(input, options, metadata);\n}\n//# sourceMappingURL=isValidNumberForRegion_.js.map","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\nexports.default = parseNumber;\n\nvar _parse_ = require('./parse_');\n\nvar _parse_2 = _interopRequireDefault(_parse_);\n\nvar _parsePhoneNumber = require('./parsePhoneNumber');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// `options`:\n//  {\n//    country:\n//    {\n//      restrict - (a two-letter country code)\n//                 the phone number must be in this country\n//\n//      default - (a two-letter country code)\n//                default country to use for phone number parsing and validation\n//                (if no country code could be derived from the phone number)\n//    }\n//  }\n//\n// Returns `{ country, number }`\n//\n// Example use cases:\n//\n// ```js\n// parse('8 (800) 555-35-35', 'RU')\n// parse('8 (800) 555-35-35', 'RU', metadata)\n// parse('8 (800) 555-35-35', { country: { default: 'RU' } })\n// parse('8 (800) 555-35-35', { country: { default: 'RU' } }, metadata)\n// parse('+7 800 555 35 35')\n// parse('+7 800 555 35 35', metadata)\n// ```\n//\nfunction parseNumber() {\n\tvar _normalizeArguments = (0, _parsePhoneNumber.normalizeArguments)(arguments),\n\t    text = _normalizeArguments.text,\n\t    options = _normalizeArguments.options,\n\t    metadata = _normalizeArguments.metadata;\n\n\treturn (0, _parse_2.default)(text, options, metadata);\n}\n//# sourceMappingURL=parse.js.map","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nexports.default = formatNumber;\n\nvar _format_ = require('./format_');\n\nvar _format_2 = _interopRequireDefault(_format_);\n\nvar _parse_ = require('./parse_');\n\nvar _parse_2 = _interopRequireDefault(_parse_);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction formatNumber() {\n\tvar _normalizeArguments = normalizeArguments(arguments),\n\t    input = _normalizeArguments.input,\n\t    format = _normalizeArguments.format,\n\t    options = _normalizeArguments.options,\n\t    metadata = _normalizeArguments.metadata;\n\n\treturn (0, _format_2.default)(input, format, options, metadata);\n}\n\n// Sort out arguments\nfunction normalizeArguments(args) {\n\tvar _Array$prototype$slic = Array.prototype.slice.call(args),\n\t    _Array$prototype$slic2 = _slicedToArray(_Array$prototype$slic, 5),\n\t    arg_1 = _Array$prototype$slic2[0],\n\t    arg_2 = _Array$prototype$slic2[1],\n\t    arg_3 = _Array$prototype$slic2[2],\n\t    arg_4 = _Array$prototype$slic2[3],\n\t    arg_5 = _Array$prototype$slic2[4];\n\n\tvar input = void 0;\n\tvar format = void 0;\n\tvar options = void 0;\n\tvar metadata = void 0;\n\n\t// Sort out arguments.\n\n\t// If the phone number is passed as a string.\n\t// `format('8005553535', ...)`.\n\tif (typeof arg_1 === 'string') {\n\t\t// If country code is supplied.\n\t\t// `format('8005553535', 'RU', 'NATIONAL', [options], metadata)`.\n\t\tif (typeof arg_3 === 'string') {\n\t\t\tformat = arg_3;\n\n\t\t\tif (arg_5) {\n\t\t\t\toptions = arg_4;\n\t\t\t\tmetadata = arg_5;\n\t\t\t} else {\n\t\t\t\tmetadata = arg_4;\n\t\t\t}\n\n\t\t\tinput = (0, _parse_2.default)(arg_1, { defaultCountry: arg_2, extended: true }, metadata);\n\t\t}\n\t\t// Just an international phone number is supplied\n\t\t// `format('+78005553535', 'NATIONAL', [options], metadata)`.\n\t\telse {\n\t\t\t\tif (typeof arg_2 !== 'string') {\n\t\t\t\t\tthrow new Error('`format` argument not passed to `formatNumber(number, format)`');\n\t\t\t\t}\n\n\t\t\t\tformat = arg_2;\n\n\t\t\t\tif (arg_4) {\n\t\t\t\t\toptions = arg_3;\n\t\t\t\t\tmetadata = arg_4;\n\t\t\t\t} else {\n\t\t\t\t\tmetadata = arg_3;\n\t\t\t\t}\n\n\t\t\t\tinput = (0, _parse_2.default)(arg_1, { extended: true }, metadata);\n\t\t\t}\n\t}\n\t// If the phone number is passed as a parsed number object.\n\t// `format({ phone: '8005553535', country: 'RU' }, 'NATIONAL', [options], metadata)`.\n\telse if (is_object(arg_1)) {\n\t\t\tinput = arg_1;\n\t\t\tformat = arg_2;\n\n\t\t\tif (arg_4) {\n\t\t\t\toptions = arg_3;\n\t\t\t\tmetadata = arg_4;\n\t\t\t} else {\n\t\t\t\tmetadata = arg_3;\n\t\t\t}\n\t\t} else throw new TypeError('A phone number must either be a string or an object of shape { phone, [country] }.');\n\n\t// Legacy lowercase formats.\n\tif (format === 'International') {\n\t\tformat = 'INTERNATIONAL';\n\t} else if (format === 'National') {\n\t\tformat = 'NATIONAL';\n\t}\n\n\treturn {\n\t\tinput: input,\n\t\tformat: format,\n\t\toptions: options,\n\t\tmetadata: metadata\n\t};\n}\n\n// Babel transforms `typeof` into some \"branches\"\n// so istanbul will show this as \"branch not covered\".\n/* istanbul ignore next */\nvar is_object = function is_object(_) {\n\treturn (typeof _ === 'undefined' ? 'undefined' : _typeof(_)) === 'object';\n};\n//# sourceMappingURL=format.js.map","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isLatinLetter = isLatinLetter;\nexports.isInvalidPunctuationSymbol = isInvalidPunctuationSymbol;\n// Javascript doesn't support UTF-8 regular expressions.\n// So mimicking them here.\n\n// Copy-pasted from `PhoneNumberMatcher.js`.\n\n/**\r\n * \"\\p{Z}\" is any kind of whitespace or invisible separator (\"Separator\").\r\n * http://www.regular-expressions.info/unicode.html\r\n * \"\\P{Z}\" is the reverse of \"\\p{Z}\".\r\n * \"\\p{N}\" is any kind of numeric character in any script (\"Number\").\r\n * \"\\p{Nd}\" is a digit zero through nine in any script except \"ideographic scripts\" (\"Decimal_Digit_Number\").\r\n * \"\\p{Sc}\" is a currency symbol (\"Currency_Symbol\").\r\n * \"\\p{L}\" is any kind of letter from any language (\"Letter\").\r\n * \"\\p{Mn}\" is \"non-spacing mark\".\r\n *\r\n * Javascript doesn't support Unicode Regular Expressions\r\n * so substituting it with this explicit set of characters.\r\n *\r\n * https://stackoverflow.com/questions/13210194/javascript-regex-equivalent-of-a-za-z-using-pl\r\n * https://github.com/danielberndt/babel-plugin-utf-8-regex/blob/master/src/transformer.js\r\n */\n\nvar _pZ = ' \\xA0\\u1680\\u180E\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000';\nvar pZ = exports.pZ = '[' + _pZ + ']';\nvar PZ = exports.PZ = '[^' + _pZ + ']';\n\nvar _pN = exports._pN = '0-9\\xB2\\xB3\\xB9\\xBC-\\xBE\\u0660-\\u0669\\u06F0-\\u06F9\\u07C0-\\u07C9\\u0966-\\u096F\\u09E6-\\u09EF\\u09F4-\\u09F9\\u0A66-\\u0A6F\\u0AE6-\\u0AEF\\u0B66-\\u0B6F\\u0B72-\\u0B77\\u0BE6-\\u0BF2\\u0C66-\\u0C6F\\u0C78-\\u0C7E\\u0CE6-\\u0CEF\\u0D66-\\u0D75\\u0E50-\\u0E59\\u0ED0-\\u0ED9\\u0F20-\\u0F33\\u1040-\\u1049\\u1090-\\u1099\\u1369-\\u137C\\u16EE-\\u16F0\\u17E0-\\u17E9\\u17F0-\\u17F9\\u1810-\\u1819\\u1946-\\u194F\\u19D0-\\u19DA\\u1A80-\\u1A89\\u1A90-\\u1A99\\u1B50-\\u1B59\\u1BB0-\\u1BB9\\u1C40-\\u1C49\\u1C50-\\u1C59\\u2070\\u2074-\\u2079\\u2080-\\u2089\\u2150-\\u2182\\u2185-\\u2189\\u2460-\\u249B\\u24EA-\\u24FF\\u2776-\\u2793\\u2CFD\\u3007\\u3021-\\u3029\\u3038-\\u303A\\u3192-\\u3195\\u3220-\\u3229\\u3248-\\u324F\\u3251-\\u325F\\u3280-\\u3289\\u32B1-\\u32BF\\uA620-\\uA629\\uA6E6-\\uA6EF\\uA830-\\uA835\\uA8D0-\\uA8D9\\uA900-\\uA909\\uA9D0-\\uA9D9\\uAA50-\\uAA59\\uABF0-\\uABF9\\uFF10-\\uFF19';\n// const pN = `[${_pN}]`\n\nvar _pNd = '0-9\\u0660-\\u0669\\u06F0-\\u06F9\\u07C0-\\u07C9\\u0966-\\u096F\\u09E6-\\u09EF\\u0A66-\\u0A6F\\u0AE6-\\u0AEF\\u0B66-\\u0B6F\\u0BE6-\\u0BEF\\u0C66-\\u0C6F\\u0CE6-\\u0CEF\\u0D66-\\u0D6F\\u0E50-\\u0E59\\u0ED0-\\u0ED9\\u0F20-\\u0F29\\u1040-\\u1049\\u1090-\\u1099\\u17E0-\\u17E9\\u1810-\\u1819\\u1946-\\u194F\\u19D0-\\u19D9\\u1A80-\\u1A89\\u1A90-\\u1A99\\u1B50-\\u1B59\\u1BB0-\\u1BB9\\u1C40-\\u1C49\\u1C50-\\u1C59\\uA620-\\uA629\\uA8D0-\\uA8D9\\uA900-\\uA909\\uA9D0-\\uA9D9\\uAA50-\\uAA59\\uABF0-\\uABF9\\uFF10-\\uFF19';\nvar pNd = exports.pNd = '[' + _pNd + ']';\n\nvar _pL = exports._pL = 'A-Za-z\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0\\u08A2-\\u08AC\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0977\\u0979-\\u097F\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C33\\u0C35-\\u0C39\\u0C3D\\u0C58\\u0C59\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D60\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191C\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19C1-\\u19C7\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2183\\u2184\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005\\u3006\\u3031-\\u3035\\u303B\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA697\\uA6A0-\\uA6E5\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA793\\uA7A0-\\uA7AA\\uA7F8-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA80-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uABC0-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC';\nvar pL = '[' + _pL + ']';\nvar pL_regexp = new RegExp(pL);\n\nvar _pSc = '$\\xA2-\\xA5\\u058F\\u060B\\u09F2\\u09F3\\u09FB\\u0AF1\\u0BF9\\u0E3F\\u17DB\\u20A0-\\u20B9\\uA838\\uFDFC\\uFE69\\uFF04\\uFFE0\\uFFE1\\uFFE5\\uFFE6';\nvar pSc = '[' + _pSc + ']';\nvar pSc_regexp = new RegExp(pSc);\n\nvar _pMn = '\\u0300-\\u036F\\u0483-\\u0487\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u0610-\\u061A\\u064B-\\u065F\\u0670\\u06D6-\\u06DC\\u06DF-\\u06E4\\u06E7\\u06E8\\u06EA-\\u06ED\\u0711\\u0730-\\u074A\\u07A6-\\u07B0\\u07EB-\\u07F3\\u0816-\\u0819\\u081B-\\u0823\\u0825-\\u0827\\u0829-\\u082D\\u0859-\\u085B\\u08E4-\\u08FE\\u0900-\\u0902\\u093A\\u093C\\u0941-\\u0948\\u094D\\u0951-\\u0957\\u0962\\u0963\\u0981\\u09BC\\u09C1-\\u09C4\\u09CD\\u09E2\\u09E3\\u0A01\\u0A02\\u0A3C\\u0A41\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A70\\u0A71\\u0A75\\u0A81\\u0A82\\u0ABC\\u0AC1-\\u0AC5\\u0AC7\\u0AC8\\u0ACD\\u0AE2\\u0AE3\\u0B01\\u0B3C\\u0B3F\\u0B41-\\u0B44\\u0B4D\\u0B56\\u0B62\\u0B63\\u0B82\\u0BC0\\u0BCD\\u0C3E-\\u0C40\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C62\\u0C63\\u0CBC\\u0CBF\\u0CC6\\u0CCC\\u0CCD\\u0CE2\\u0CE3\\u0D41-\\u0D44\\u0D4D\\u0D62\\u0D63\\u0DCA\\u0DD2-\\u0DD4\\u0DD6\\u0E31\\u0E34-\\u0E3A\\u0E47-\\u0E4E\\u0EB1\\u0EB4-\\u0EB9\\u0EBB\\u0EBC\\u0EC8-\\u0ECD\\u0F18\\u0F19\\u0F35\\u0F37\\u0F39\\u0F71-\\u0F7E\\u0F80-\\u0F84\\u0F86\\u0F87\\u0F8D-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u102D-\\u1030\\u1032-\\u1037\\u1039\\u103A\\u103D\\u103E\\u1058\\u1059\\u105E-\\u1060\\u1071-\\u1074\\u1082\\u1085\\u1086\\u108D\\u109D\\u135D-\\u135F\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17B4\\u17B5\\u17B7-\\u17BD\\u17C6\\u17C9-\\u17D3\\u17DD\\u180B-\\u180D\\u18A9\\u1920-\\u1922\\u1927\\u1928\\u1932\\u1939-\\u193B\\u1A17\\u1A18\\u1A56\\u1A58-\\u1A5E\\u1A60\\u1A62\\u1A65-\\u1A6C\\u1A73-\\u1A7C\\u1A7F\\u1B00-\\u1B03\\u1B34\\u1B36-\\u1B3A\\u1B3C\\u1B42\\u1B6B-\\u1B73\\u1B80\\u1B81\\u1BA2-\\u1BA5\\u1BA8\\u1BA9\\u1BAB\\u1BE6\\u1BE8\\u1BE9\\u1BED\\u1BEF-\\u1BF1\\u1C2C-\\u1C33\\u1C36\\u1C37\\u1CD0-\\u1CD2\\u1CD4-\\u1CE0\\u1CE2-\\u1CE8\\u1CED\\u1CF4\\u1DC0-\\u1DE6\\u1DFC-\\u1DFF\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2CEF-\\u2CF1\\u2D7F\\u2DE0-\\u2DFF\\u302A-\\u302D\\u3099\\u309A\\uA66F\\uA674-\\uA67D\\uA69F\\uA6F0\\uA6F1\\uA802\\uA806\\uA80B\\uA825\\uA826\\uA8C4\\uA8E0-\\uA8F1\\uA926-\\uA92D\\uA947-\\uA951\\uA980-\\uA982\\uA9B3\\uA9B6-\\uA9B9\\uA9BC\\uAA29-\\uAA2E\\uAA31\\uAA32\\uAA35\\uAA36\\uAA43\\uAA4C\\uAAB0\\uAAB2-\\uAAB4\\uAAB7\\uAAB8\\uAABE\\uAABF\\uAAC1\\uAAEC\\uAAED\\uAAF6\\uABE5\\uABE8\\uABED\\uFB1E\\uFE00-\\uFE0F\\uFE20-\\uFE26';\nvar pMn = '[' + _pMn + ']';\nvar pMn_regexp = new RegExp(pMn);\n\nvar _InBasic_Latin = '\\0-\\x7F';\nvar _InLatin_1_Supplement = '\\x80-\\xFF';\nvar _InLatin_Extended_A = '\\u0100-\\u017F';\nvar _InLatin_Extended_Additional = '\\u1E00-\\u1EFF';\nvar _InLatin_Extended_B = '\\u0180-\\u024F';\nvar _InCombining_Diacritical_Marks = '\\u0300-\\u036F';\n\nvar latinLetterRegexp = new RegExp('[' + _InBasic_Latin + _InLatin_1_Supplement + _InLatin_Extended_A + _InLatin_Extended_Additional + _InLatin_Extended_B + _InCombining_Diacritical_Marks + ']');\n\n/**\r\n * Helper method to determine if a character is a Latin-script letter or not.\r\n * For our purposes, combining marks should also return true since we assume\r\n * they have been added to a preceding Latin character.\r\n */\nfunction isLatinLetter(letter) {\n  // Combining marks are a subset of non-spacing-mark.\n  if (!pL_regexp.test(letter) && !pMn_regexp.test(letter)) {\n    return false;\n  }\n\n  return latinLetterRegexp.test(letter);\n}\n\nfunction isInvalidPunctuationSymbol(character) {\n  return character === '%' || pSc_regexp.test(character);\n}\n//# sourceMappingURL=utf-8.js.map","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\nexports.default = parsePreCandidate;\n\nvar _util = require('./util');\n\n// Regular expression of characters typically used to start a second phone number for the purposes\n// of parsing. This allows us to strip off parts of the number that are actually the start of\n// another number, such as for: (530) 583-6985 x302/x2303 -> the second extension here makes this\n// actually two phone numbers, (530) 583-6985 x302 and (530) 583-6985 x2303. We remove the second\n// extension so that the first number is parsed correctly.\n//\n// Matches a slash (\\ or /) followed by a space followed by an `x`.\n//\nvar SECOND_NUMBER_START_PATTERN = /[\\\\/] *x/;\n\nfunction parsePreCandidate(candidate) {\n\t// Check for extra numbers at the end.\n\t// TODO: This is the place to start when trying to support extraction of multiple phone number\n\t// from split notations (+41 79 123 45 67 / 68).\n\treturn (0, _util.trimAfterFirstMatch)(SECOND_NUMBER_START_PATTERN, candidate);\n}\n//# sourceMappingURL=parsePreCandidate.js.map","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\nexports.default = isValidPreCandidate;\n// Matches strings that look like dates using \"/\" as a separator.\n// Examples: 3/10/2011, 31/10/96 or 08/31/95.\nvar SLASH_SEPARATED_DATES = /(?:(?:[0-3]?\\d\\/[01]?\\d)|(?:[01]?\\d\\/[0-3]?\\d))\\/(?:[12]\\d)?\\d{2}/;\n\n// Matches timestamps.\n// Examples: \"2012-01-02 08:00\".\n// Note that the reg-ex does not include the\n// trailing \":\\d\\d\" -- that is covered by TIME_STAMPS_SUFFIX.\nvar TIME_STAMPS = /[12]\\d{3}[-/]?[01]\\d[-/]?[0-3]\\d +[0-2]\\d$/;\nvar TIME_STAMPS_SUFFIX_LEADING = /^:[0-5]\\d/;\n\nfunction isValidPreCandidate(candidate, offset, text) {\n\t// Skip a match that is more likely to be a date.\n\tif (SLASH_SEPARATED_DATES.test(candidate)) {\n\t\treturn false;\n\t}\n\n\t// Skip potential time-stamps.\n\tif (TIME_STAMPS.test(candidate)) {\n\t\tvar followingText = text.slice(offset + candidate.length);\n\t\tif (TIME_STAMPS_SUFFIX_LEADING.test(followingText)) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n}\n//# sourceMappingURL=isValidPreCandidate.js.map","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\nexports.LEAD_CLASS = undefined;\nexports.default = isValidCandidate;\n\nvar _constants = require('../constants');\n\nvar _util = require('./util');\n\nvar _utf = require('./utf-8');\n\nvar OPENING_PARENS = '(\\\\[\\uFF08\\uFF3B'; // Copy-pasted from `PhoneNumberMatcher.js`.\n\nvar CLOSING_PARENS = ')\\\\]\\uFF09\\uFF3D';\nvar NON_PARENS = '[^' + OPENING_PARENS + CLOSING_PARENS + ']';\n\nvar LEAD_CLASS = exports.LEAD_CLASS = '[' + OPENING_PARENS + _constants.PLUS_CHARS + ']';\n\n// Punctuation that may be at the start of a phone number - brackets and plus signs.\nvar LEAD_CLASS_LEADING = new RegExp('^' + LEAD_CLASS);\n\n// Limit on the number of pairs of brackets in a phone number.\nvar BRACKET_PAIR_LIMIT = (0, _util.limit)(0, 3);\n\n/**\r\n * Pattern to check that brackets match. Opening brackets should be closed within a phone number.\r\n * This also checks that there is something inside the brackets. Having no brackets at all is also\r\n * fine.\r\n *\r\n * An opening bracket at the beginning may not be closed, but subsequent ones should be.  It's\r\n * also possible that the leading bracket was dropped, so we shouldn't be surprised if we see a\r\n * closing bracket first. We limit the sets of brackets in a phone number to four.\r\n */\nvar MATCHING_BRACKETS_ENTIRE = new RegExp('^' + \"(?:[\" + OPENING_PARENS + \"])?\" + \"(?:\" + NON_PARENS + \"+\" + \"[\" + CLOSING_PARENS + \"])?\" + NON_PARENS + \"+\" + \"(?:[\" + OPENING_PARENS + \"]\" + NON_PARENS + \"+[\" + CLOSING_PARENS + \"])\" + BRACKET_PAIR_LIMIT + NON_PARENS + \"*\" + '$');\n\n/**\r\n * Matches strings that look like publication pages. Example:\r\n * <pre>Computing Complete Answers to Queries in the Presence of Limited Access Patterns.\r\n * Chen Li. VLDB J. 12(3): 211-227 (2003).</pre>\r\n *\r\n * The string \"211-227 (2003)\" is not a telephone number.\r\n */\nvar PUB_PAGES = /\\d{1,5}-+\\d{1,5}\\s{0,4}\\(\\d{1,4}/;\n\nfunction isValidCandidate(candidate, offset, text, leniency) {\n\t// Check the candidate doesn't contain any formatting\n\t// which would indicate that it really isn't a phone number.\n\tif (!MATCHING_BRACKETS_ENTIRE.test(candidate) || PUB_PAGES.test(candidate)) {\n\t\treturn;\n\t}\n\n\t// If leniency is set to VALID or stricter, we also want to skip numbers that are surrounded\n\t// by Latin alphabetic characters, to skip cases like abc8005001234 or 8005001234def.\n\tif (leniency !== 'POSSIBLE') {\n\t\t// If the candidate is not at the start of the text,\n\t\t// and does not start with phone-number punctuation,\n\t\t// check the previous character.\n\t\tif (offset > 0 && !LEAD_CLASS_LEADING.test(candidate)) {\n\t\t\tvar previousChar = text[offset - 1];\n\t\t\t// We return null if it is a latin letter or an invalid punctuation symbol.\n\t\t\tif ((0, _utf.isInvalidPunctuationSymbol)(previousChar) || (0, _utf.isLatinLetter)(previousChar)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tvar lastCharIndex = offset + candidate.length;\n\t\tif (lastCharIndex < text.length) {\n\t\t\tvar nextChar = text[lastCharIndex];\n\t\t\tif ((0, _utf.isInvalidPunctuationSymbol)(nextChar) || (0, _utf.isLatinLetter)(nextChar)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn true;\n}\n//# sourceMappingURL=isValidCandidate.js.map","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\nexports.default = findPhoneNumbers;\nexports.searchPhoneNumbers = searchPhoneNumbers;\n\nvar _findPhoneNumbers_ = require('./findPhoneNumbers_');\n\nvar _findPhoneNumbers_2 = _interopRequireDefault(_findPhoneNumbers_);\n\nvar _parsePhoneNumber = require('./parsePhoneNumber');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// This is a legacy function.\n// Use `findNumbers()` instead.\n\nfunction findPhoneNumbers() {\n\tvar _normalizeArguments = (0, _parsePhoneNumber.normalizeArguments)(arguments),\n\t    text = _normalizeArguments.text,\n\t    options = _normalizeArguments.options,\n\t    metadata = _normalizeArguments.metadata;\n\n\treturn (0, _findPhoneNumbers_2.default)(text, options, metadata);\n}\n\n/**\r\n * @return ES6 `for ... of` iterator.\r\n */\nfunction searchPhoneNumbers() {\n\tvar _normalizeArguments2 = (0, _parsePhoneNumber.normalizeArguments)(arguments),\n\t    text = _normalizeArguments2.text,\n\t    options = _normalizeArguments2.options,\n\t    metadata = _normalizeArguments2.metadata;\n\n\treturn (0, _findPhoneNumbers_.searchPhoneNumbers)(text, options, metadata);\n}\n//# sourceMappingURL=findPhoneNumbers.js.map","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\nexports.PhoneNumberSearch = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nexports.default = findPhoneNumbers;\nexports.searchPhoneNumbers = searchPhoneNumbers;\n\nvar _constants = require('./constants');\n\nvar _extension = require('./extension');\n\nvar _parse_ = require('./parse_');\n\nvar _parse_2 = _interopRequireDefault(_parse_);\n\nvar _parsePreCandidate = require('./findNumbers/parsePreCandidate');\n\nvar _parsePreCandidate2 = _interopRequireDefault(_parsePreCandidate);\n\nvar _isValidPreCandidate = require('./findNumbers/isValidPreCandidate');\n\nvar _isValidPreCandidate2 = _interopRequireDefault(_isValidPreCandidate);\n\nvar _isValidCandidate = require('./findNumbers/isValidCandidate');\n\nvar _isValidCandidate2 = _interopRequireDefault(_isValidCandidate);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; } // This is a legacy function.\n// Use `findNumbers()` instead.\n\n// Copy-pasted from `./parse.js`.\nvar VALID_PHONE_NUMBER = '[' + _constants.PLUS_CHARS + ']{0,1}' + '(?:' + '[' + _constants.VALID_PUNCTUATION + ']*' + '[' + _constants.VALID_DIGITS + ']' + '){3,}' + '[' + _constants.VALID_PUNCTUATION + _constants.VALID_DIGITS + ']*';\n\nvar WHITESPACE_IN_THE_BEGINNING_PATTERN = new RegExp('^[' + _constants.WHITESPACE + ']+');\nvar PUNCTUATION_IN_THE_END_PATTERN = new RegExp('[' + _constants.VALID_PUNCTUATION + ']+$');\n\n// // Regular expression for getting opening brackets for a valid number\n// // found using `PHONE_NUMBER_START_PATTERN` for prepending those brackets to the number.\n// const BEFORE_NUMBER_DIGITS_PUNCTUATION = new RegExp('[' + OPENING_BRACKETS + ']+' + '[' + WHITESPACE + ']*' + '$')\n\nvar VALID_PRECEDING_CHARACTER_PATTERN = /[^a-zA-Z0-9]/;\n\nfunction findPhoneNumbers(text, options, metadata) {\n\t/* istanbul ignore if */\n\tif (options === undefined) {\n\t\toptions = {};\n\t}\n\n\tvar search = new PhoneNumberSearch(text, options, metadata);\n\tvar phones = [];\n\twhile (search.hasNext()) {\n\t\tphones.push(search.next());\n\t}\n\treturn phones;\n}\n\n/**\r\n * @return ES6 `for ... of` iterator.\r\n */\nfunction searchPhoneNumbers(text, options, metadata) {\n\t/* istanbul ignore if */\n\tif (options === undefined) {\n\t\toptions = {};\n\t}\n\n\tvar search = new PhoneNumberSearch(text, options, metadata);\n\n\treturn _defineProperty({}, Symbol.iterator, function () {\n\t\treturn {\n\t\t\tnext: function next() {\n\t\t\t\tif (search.hasNext()) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tdone: false,\n\t\t\t\t\t\tvalue: search.next()\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\treturn {\n\t\t\t\t\tdone: true\n\t\t\t\t};\n\t\t\t}\n\t\t};\n\t});\n}\n\n/**\r\n * Extracts a parseable phone number including any opening brackets, etc.\r\n * @param  {string} text - Input.\r\n * @return {object} `{ ?number, ?startsAt, ?endsAt }`.\r\n */\n\nvar PhoneNumberSearch = exports.PhoneNumberSearch = function () {\n\tfunction PhoneNumberSearch(text) {\n\t\tvar options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\t\tvar metadata = arguments[2];\n\n\t\t_classCallCheck(this, PhoneNumberSearch);\n\n\t\tthis.state = 'NOT_READY';\n\n\t\tthis.text = text;\n\t\tthis.options = options;\n\t\tthis.metadata = metadata;\n\n\t\tthis.regexp = new RegExp(VALID_PHONE_NUMBER +\n\t\t// Phone number extensions\n\t\t'(?:' + _extension.EXTN_PATTERNS_FOR_PARSING + ')?', 'ig');\n\n\t\t// this.searching_from = 0\n\t}\n\t// Iteration tristate.\n\n\n\t_createClass(PhoneNumberSearch, [{\n\t\tkey: 'find',\n\t\tvalue: function find() {\n\t\t\tvar matches = this.regexp.exec(this.text);\n\n\t\t\tif (!matches) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar number = matches[0];\n\t\t\tvar startsAt = matches.index;\n\n\t\t\tnumber = number.replace(WHITESPACE_IN_THE_BEGINNING_PATTERN, '');\n\t\t\tstartsAt += matches[0].length - number.length;\n\t\t\t// Fixes not parsing numbers with whitespace in the end.\n\t\t\t// Also fixes not parsing numbers with opening parentheses in the end.\n\t\t\t// https://github.com/catamphetamine/libphonenumber-js/issues/252\n\t\t\tnumber = number.replace(PUNCTUATION_IN_THE_END_PATTERN, '');\n\n\t\t\tnumber = (0, _parsePreCandidate2.default)(number);\n\n\t\t\tvar result = this.parseCandidate(number, startsAt);\n\n\t\t\tif (result) {\n\t\t\t\treturn result;\n\t\t\t}\n\n\t\t\t// Tail recursion.\n\t\t\t// Try the next one if this one is not a valid phone number.\n\t\t\treturn this.find();\n\t\t}\n\t}, {\n\t\tkey: 'parseCandidate',\n\t\tvalue: function parseCandidate(number, startsAt) {\n\t\t\tif (!(0, _isValidPreCandidate2.default)(number, startsAt, this.text)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Don't parse phone numbers which are non-phone numbers\n\t\t\t// due to being part of something else (e.g. a UUID).\n\t\t\t// https://github.com/catamphetamine/libphonenumber-js/issues/213\n\t\t\t// Copy-pasted from Google's `PhoneNumberMatcher.js` (`.parseAndValidate()`).\n\t\t\tif (!(0, _isValidCandidate2.default)(number, startsAt, this.text, this.options.extended ? 'POSSIBLE' : 'VALID')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// // Prepend any opening brackets left behind by the\n\t\t\t// // `PHONE_NUMBER_START_PATTERN` regexp.\n\t\t\t// const text_before_number = text.slice(this.searching_from, startsAt)\n\t\t\t// const full_number_starts_at = text_before_number.search(BEFORE_NUMBER_DIGITS_PUNCTUATION)\n\t\t\t// if (full_number_starts_at >= 0)\n\t\t\t// {\n\t\t\t// \tnumber   = text_before_number.slice(full_number_starts_at) + number\n\t\t\t// \tstartsAt = full_number_starts_at\n\t\t\t// }\n\t\t\t//\n\t\t\t// this.searching_from = matches.lastIndex\n\n\t\t\tvar result = (0, _parse_2.default)(number, this.options, this.metadata);\n\n\t\t\tif (!result.phone) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tresult.startsAt = startsAt;\n\t\t\tresult.endsAt = startsAt + number.length;\n\n\t\t\treturn result;\n\t\t}\n\t}, {\n\t\tkey: 'hasNext',\n\t\tvalue: function hasNext() {\n\t\t\tif (this.state === 'NOT_READY') {\n\t\t\t\tthis.last_match = this.find();\n\n\t\t\t\tif (this.last_match) {\n\t\t\t\t\tthis.state = 'READY';\n\t\t\t\t} else {\n\t\t\t\t\tthis.state = 'DONE';\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this.state === 'READY';\n\t\t}\n\t}, {\n\t\tkey: 'next',\n\t\tvalue: function next() {\n\t\t\t// Check the state and find the next match as a side-effect if necessary.\n\t\t\tif (!this.hasNext()) {\n\t\t\t\tthrow new Error('No next element');\n\t\t\t}\n\n\t\t\t// Don't retain that memory any longer than necessary.\n\t\t\tvar result = this.last_match;\n\t\t\tthis.last_match = null;\n\t\t\tthis.state = 'NOT_READY';\n\t\t\treturn result;\n\t\t}\n\t}]);\n\n\treturn PhoneNumberSearch;\n}();\n//# sourceMappingURL=findPhoneNumbers_.js.map","var PhoneInput = require('./commonjs/PhoneInputNativeDefaultMetadata').default\r\n\r\nexports = module.exports = PhoneInput\r\nexports['default']       = PhoneInput","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\nexports.default = undefined;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _metadata = require('libphonenumber-js/metadata.min');\n\nvar _metadata2 = _interopRequireDefault(_metadata);\n\nvar _PhoneInputNative = require('./PhoneInputNative');\n\nvar _PhoneInputNative2 = _interopRequireDefault(_PhoneInputNative);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar PhoneInputNativeDefaultMetadata = function (_Component) {\n\t_inherits(PhoneInputNativeDefaultMetadata, _Component);\n\n\tfunction PhoneInputNativeDefaultMetadata() {\n\t\tvar _ref;\n\n\t\tvar _temp, _this, _ret;\n\n\t\t_classCallCheck(this, PhoneInputNativeDefaultMetadata);\n\n\t\tfor (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n\t\t\targs[_key] = arguments[_key];\n\t\t}\n\n\t\treturn _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = PhoneInputNativeDefaultMetadata.__proto__ || Object.getPrototypeOf(PhoneInputNativeDefaultMetadata)).call.apply(_ref, [this].concat(args))), _this), _this.storeInputRef = function (ref) {\n\t\t\treturn _this.input = ref;\n\t\t}, _temp), _possibleConstructorReturn(_this, _ret);\n\t}\n\n\t_createClass(PhoneInputNativeDefaultMetadata, [{\n\t\tkey: 'render',\n\t\tvalue: function render() {\n\t\t\treturn _react2.default.createElement(_PhoneInputNative2.default, _extends({}, this.props, {\n\t\t\t\tref: this.storeInputRef,\n\t\t\t\tmetadata: _metadata2.default }));\n\t\t}\n\n\t\t// Proxy `.focus()` method.\n\n\t}, {\n\t\tkey: 'focus',\n\t\tvalue: function focus() {\n\t\t\treturn this.input.focus();\n\t\t}\n\t}]);\n\n\treturn PhoneInputNativeDefaultMetadata;\n}(_react.Component);\n\nexports.default = PhoneInputNativeDefaultMetadata;\n//# sourceMappingURL=PhoneInputNativeDefaultMetadata.js.map","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\nexports.default = undefined;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _class, _temp2;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _PhoneInput = require('./PhoneInput');\n\nvar _PhoneInput2 = _interopRequireDefault(_PhoneInput);\n\nvar _CountrySelectNative = require('./CountrySelectNative');\n\nvar _CountrySelectNative2 = _interopRequireDefault(_CountrySelectNative);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar PhoneInputNative = (_temp2 = _class = function (_Component) {\n\t_inherits(PhoneInputNative, _Component);\n\n\tfunction PhoneInputNative() {\n\t\tvar _ref;\n\n\t\tvar _temp, _this, _ret;\n\n\t\t_classCallCheck(this, PhoneInputNative);\n\n\t\tfor (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n\t\t\targs[_key] = arguments[_key];\n\t\t}\n\n\t\treturn _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = PhoneInputNative.__proto__ || Object.getPrototypeOf(PhoneInputNative)).call.apply(_ref, [this].concat(args))), _this), _this.storeInputRef = function (ref) {\n\t\t\treturn _this.input = ref;\n\t\t}, _this.getInputClassName = function (_ref2) {\n\t\t\tvar disabled = _ref2.disabled,\n\t\t\t    invalid = _ref2.invalid;\n\n\t\t\treturn (0, _classnames2.default)(\n\t\t\t// Will be removed in version 2.x\n\t\t\t'react-phone-number-input__phone--native', {\n\t\t\t\t'react-phone-number-input__phone--disabled': disabled,\n\t\t\t\t'react-phone-number-input__phone--invalid': invalid\n\t\t\t});\n\t\t}, _temp), _possibleConstructorReturn(_this, _ret);\n\t}\n\n\t_createClass(PhoneInputNative, [{\n\t\tkey: 'render',\n\t\tvalue: function render() {\n\t\t\treturn _react2.default.createElement(_PhoneInput2.default, _extends({}, this.props, {\n\t\t\t\tref: this.storeInputRef,\n\t\t\t\tgetInputClassName: this.getInputClassName,\n\t\t\t\tcountrySelectComponent: _CountrySelectNative2.default,\n\t\t\t\tcountrySelectProperties: countrySelectProperties }));\n\t\t}\n\t}, {\n\t\tkey: 'focus',\n\n\n\t\t// Proxy `.focus()` method.\n\t\tvalue: function focus() {\n\t\t\treturn this.input.focus();\n\t\t}\n\t}]);\n\n\treturn PhoneInputNative;\n}(_react.Component), _class.propTypes = {\n\t// Replaces the default country select arrow.\n\tcountrySelectArrowComponent: _propTypes2.default.func\n}, _temp2);\nexports.default = PhoneInputNative;\n\n\nvar countrySelectProperties = {\n\tcountrySelectArrowComponent: 'selectArrowComponent'\n};\n//# sourceMappingURL=PhoneInputNative.js.map","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\nexports.default = undefined;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _class, _class2, _temp, _initialiseProps;\n\n// Move these to a non-default property in version 2.x\n\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _reactLifecyclesCompat = require('react-lifecycles-compat');\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _InputSmart = require('./InputSmart');\n\nvar _InputSmart2 = _interopRequireDefault(_InputSmart);\n\nvar _InputBasic = require('./InputBasic');\n\nvar _InputBasic2 = _interopRequireDefault(_InputBasic);\n\nvar _InternationalIcon = require('./InternationalIcon');\n\nvar _InternationalIcon2 = _interopRequireDefault(_InternationalIcon);\n\nvar _Flag = require('./Flag');\n\nvar _Flag2 = _interopRequireDefault(_Flag);\n\nvar _inputControl = require('./input-control');\n\nvar _default = require('../locale/default');\n\nvar _default2 = _interopRequireDefault(_default);\n\nvar _countries = require('./countries');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n// Allows passing custom `libphonenumber-js` metadata\n// to reduce the overall bundle size.\nvar PhoneNumberInput = (0, _reactLifecyclesCompat.polyfill)(_class = (_temp = _class2 = function (_PureComponent) {\n\t_inherits(PhoneNumberInput, _PureComponent);\n\n\tfunction PhoneNumberInput(props) {\n\t\t_classCallCheck(this, PhoneNumberInput);\n\n\t\tvar _this = _possibleConstructorReturn(this, (PhoneNumberInput.__proto__ || Object.getPrototypeOf(PhoneNumberInput)).call(this, props));\n\n\t\t_initialiseProps.call(_this);\n\n\t\tvar _this$props = _this.props,\n\t\t    value = _this$props.value,\n\t\t    country = _this$props.country,\n\t\t    countries = _this$props.countries,\n\t\t    labels = _this$props.labels,\n\t\t    international = _this$props.international,\n\t\t    metadata = _this$props.metadata;\n\n\t\t// Will be removed in version 2.x.\n\n\t\tif (typeof _this.props.internationalIcon !== 'function') {\n\t\t\tthrow new Error(\"You're passing a custom `internationalIcon` property to `react-phone-number-input` component. In the latest version it may only be a React component (a class or a function), not a React element. Wrap `internationalIcon` into a function to resolve the error: `() => internationalIcon`.\");\n\t\t}\n\n\t\tvar parsed_number = (0, _inputControl.parsePhoneNumber)(value, metadata);\n\n\t\tvar pre_selected_country = (0, _inputControl.getPreSelectedCountry)(parsed_number, country, countries || (0, _countries.getCountryCodes)(labels), international, metadata);\n\n\t\t_this.state = {\n\t\t\t// Workaround for `this.props` inside `getDerivedStateFromProps()`.\n\t\t\tprops: _this.props,\n\n\t\t\t// The country selected.\n\t\t\tcountry: pre_selected_country,\n\n\t\t\t// Generate country `<select/>` options.\n\t\t\tcountry_select_options: generate_country_select_options(_this.props),\n\n\t\t\t// `parsed_input` state property holds non-formatted user's input.\n\t\t\t// The reason is that there's no way of finding out\n\t\t\t// in which form should `value` be displayed: international or national.\n\t\t\t// E.g. if `value` is `+78005553535` then it could be input\n\t\t\t// by a user both as `8 (800) 555-35-35` and `+7 800 555 35 35`.\n\t\t\t// Hence storing just `value`is not sufficient for correct formatting.\n\t\t\t// E.g. if a user entered `8 (800) 555-35-35`\n\t\t\t// then value is `+78005553535` and `parsed_input` is `88005553535`\n\t\t\t// and if a user entered `+7 800 555 35 35`\n\t\t\t// then value is `+78005553535` and `parsed_input` is `+78005553535`.\n\t\t\tparsed_input: generateParsedInput(value, parsed_number, _this.props),\n\n\t\t\t// `value` property is duplicated in state.\n\t\t\t// The reason is that `getDerivedStateFromProps()`\n\t\t\t// needs this `value` to compare to the new `value` property\n\t\t\t// to find out if `parsed_input` needs updating:\n\t\t\t// If the `value` property changed externally\n\t\t\t// then it won't be equal to state `value`\n\t\t\t// in which case `parsed_input` and `country` get updated.\n\t\t\tvalue: value\n\t\t};\n\t\treturn _this;\n\t}\n\n\t// Country `<select/>` `onChange` handler.\n\n\n\t// Phone number `<input/>` `onKeyDown` handler.\n\n\n\t// `<input/>` `onChange` handler.\n\t// Updates `value` property accordingly.\n\t// (so that they are kept in sync).\n\t// `parsed_input` must be a parsed phone number\n\t// or an empty string.\n\t// E.g.: `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\n\n\n\t// This `onBlur` interceptor is a workaround for `redux-form`\n\t// so that it gets the up-to-date `value` in its `onBlur` handler.\n\t// Without this fix it just gets the actual (raw) input field textual value.\n\t// E.g. `+7 800 555 35 35` instead of `+78005553535`.\n\t//\n\t// A developer is not supposed to pass this `onBlur` property manually.\n\t// Instead, `redux-form` passes `onBlur` to this component automatically\n\t// and this component patches that `onBlur` handler (a hacky way but works).\n\t//\n\n\n\t// When country `<select/>` is toggled.\n\n\n\t_createClass(PhoneNumberInput, [{\n\t\tkey: 'onCountryChange',\n\n\n\t\t// Some people requested an `onCountryChange` event listener.\n\t\t// No valid reason was given other than compliance with some legacy code\n\t\t// which stored both phone number and country in a database.\n\t\t// https://github.com/catamphetamine/react-phone-number-input/issues/128\n\t\tvalue: function onCountryChange(new_country) {\n\t\t\tvar onCountryChange = this.props.onCountryChange;\n\t\t\tvar country = this.state.country;\n\n\n\t\t\tif (onCountryChange && new_country !== country) {\n\t\t\t\tonCountryChange(new_country);\n\t\t\t}\n\t\t}\n\n\t\t// Can be called externally.\n\n\t}, {\n\t\tkey: 'render',\n\t\tvalue: function render() {\n\t\t\tvar _props = this.props,\n\t\t\t    name = _props.name,\n\t\t\t    disabled = _props.disabled,\n\t\t\t    autoComplete = _props.autoComplete,\n\t\t\t    countrySelectTabIndex = _props.countrySelectTabIndex,\n\t\t\t    showCountrySelect = _props.showCountrySelect,\n\t\t\t    style = _props.style,\n\t\t\t    className = _props.className,\n\t\t\t    inputClassName = _props.inputClassName,\n\t\t\t    getInputClassName = _props.getInputClassName,\n\t\t\t    countrySelectProperties = _props.countrySelectProperties,\n\t\t\t    error = _props.error,\n\t\t\t    indicateInvalid = _props.indicateInvalid,\n\t\t\t    CountrySelectComponent = _props.countrySelectComponent,\n\t\t\t    inputComponent = _props.inputComponent,\n\t\t\t    smartCaret = _props.smartCaret,\n\t\t\t    ext = _props.ext,\n\t\t\t    countries = _props.countries,\n\t\t\t    labels = _props.labels,\n\t\t\t    _ = _props.country,\n\t\t\t    flags = _props.flags,\n\t\t\t    flagComponent = _props.flagComponent,\n\t\t\t    flagsPath = _props.flagsPath,\n\t\t\t    international = _props.international,\n\t\t\t    internationalIcon = _props.internationalIcon,\n\t\t\t    displayInitialValueAsLocalNumber = _props.displayInitialValueAsLocalNumber,\n\t\t\t    onCountryChange = _props.onCountryChange,\n\t\t\t    countrySelectHidesPhoneInputField = _props.countrySelectHidesPhoneInputField,\n\t\t\t    locale = _props.locale,\n\t\t\t    metadata = _props.metadata,\n\t\t\t    phoneNumberInputProps = _objectWithoutProperties(_props, ['name', 'disabled', 'autoComplete', 'countrySelectTabIndex', 'showCountrySelect', 'style', 'className', 'inputClassName', 'getInputClassName', 'countrySelectProperties', 'error', 'indicateInvalid', 'countrySelectComponent', 'inputComponent', 'smartCaret', 'ext', 'countries', 'labels', 'country', 'flags', 'flagComponent', 'flagsPath', 'international', 'internationalIcon', 'displayInitialValueAsLocalNumber', 'onCountryChange', 'countrySelectHidesPhoneInputField', 'locale', 'metadata']);\n\n\t\t\tvar _state = this.state,\n\t\t\t    country = _state.country,\n\t\t\t    hidePhoneInputField = _state.hidePhoneInputField,\n\t\t\t    country_select_options = _state.country_select_options,\n\t\t\t    parsed_input = _state.parsed_input;\n\n\n\t\t\tvar InputComponent = inputComponent || (smartCaret ? _InputSmart2.default : _InputBasic2.default);\n\n\t\t\t// Extract `countrySelectProperties` from `this.props`\n\t\t\t// also removing them from `phoneNumberInputProps`.\n\t\t\tvar _countrySelectProps = {};\n\t\t\tif (countrySelectProperties) {\n\t\t\t\tfor (var key in countrySelectProperties) {\n\t\t\t\t\tif (this.props.hasOwnProperty(key)) {\n\t\t\t\t\t\t_countrySelectProps[countrySelectProperties[key]] = this.props[key];\n\t\t\t\t\t\tdelete phoneNumberInputProps[key];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn _react2.default.createElement(\n\t\t\t\t'div',\n\t\t\t\t{\n\t\t\t\t\tstyle: style,\n\t\t\t\t\tclassName: (0, _classnames2.default)('react-phone-number-input', {\n\t\t\t\t\t\t'react-phone-number-input--invalid': error && indicateInvalid\n\t\t\t\t\t}, className) },\n\t\t\t\t_react2.default.createElement(\n\t\t\t\t\t'div',\n\t\t\t\t\t{ className: 'react-phone-number-input__row' },\n\t\t\t\t\tshowCountrySelect && _react2.default.createElement(CountrySelectComponent, _extends({}, _countrySelectProps, {\n\t\t\t\t\t\tref: this.storeCountrySelectInstance,\n\t\t\t\t\t\tname: name ? name + '__country' : undefined,\n\t\t\t\t\t\tvalue: country,\n\t\t\t\t\t\toptions: country_select_options,\n\t\t\t\t\t\tonChange: this.onCountrySelected,\n\t\t\t\t\t\tdisabled: disabled,\n\t\t\t\t\t\ttabIndex: countrySelectTabIndex,\n\t\t\t\t\t\thidePhoneInputField: this.hidePhoneInputField,\n\t\t\t\t\t\tfocusPhoneInputField: this.focus,\n\t\t\t\t\t\tclassName: 'react-phone-number-input__country' })),\n\t\t\t\t\t!hidePhoneInputField && _react2.default.createElement(InputComponent, _extends({\n\t\t\t\t\t\ttype: 'tel',\n\t\t\t\t\t\tname: name\n\t\t\t\t\t}, phoneNumberInputProps, {\n\t\t\t\t\t\tref: this.storePhoneNumberInputInstance,\n\t\t\t\t\t\tmetadata: metadata,\n\t\t\t\t\t\tcountry: country,\n\t\t\t\t\t\tvalue: parsed_input || '',\n\t\t\t\t\t\tonChange: this.onChange,\n\t\t\t\t\t\tonBlur: this.onBlur,\n\t\t\t\t\t\tonKeyDown: this.onPhoneNumberKeyDown,\n\t\t\t\t\t\tdisabled: disabled,\n\t\t\t\t\t\tautoComplete: autoComplete,\n\t\t\t\t\t\tclassName: (0, _classnames2.default)('react-phone-number-input__phone',\n\t\t\t\t\t\t// Will be uncommented for version 2.x\n\t\t\t\t\t\t// {\n\t\t\t\t\t\t// \t'react-phone-number-input__phone--disabled' : disabled,\n\t\t\t\t\t\t// \t'react-phone-number-input__phone--invalid'  : error && indicateInvalid\n\t\t\t\t\t\t// },\n\t\t\t\t\t\tinputClassName, getInputClassName && getInputClassName({ disabled: disabled, invalid: error && indicateInvalid })) })),\n\t\t\t\t\text && !hidePhoneInputField && _react2.default.createElement(\n\t\t\t\t\t\t'label',\n\t\t\t\t\t\t{ className: 'react-phone-number-input__ext' },\n\t\t\t\t\t\tlabels.ext,\n\t\t\t\t\t\t_react2.default.cloneElement(ext, {\n\t\t\t\t\t\t\ttype: ext.props.type === undefined ? 'number' : ext.props.type,\n\t\t\t\t\t\t\tclassName: (0, _classnames2.default)('react-phone-number-input__ext-input',\n\t\t\t\t\t\t\t// Will be uncommented for version 2.x\n\t\t\t\t\t\t\t// {\n\t\t\t\t\t\t\t// \t'react-phone-number-input__phone--disabled' : disabled,\n\t\t\t\t\t\t\t// },\n\t\t\t\t\t\t\tinputClassName, getInputClassName && getInputClassName({ disabled: disabled }), ext.props.className)\n\t\t\t\t\t\t})\n\t\t\t\t\t)\n\t\t\t\t),\n\t\t\t\terror && indicateInvalid && _react2.default.createElement(\n\t\t\t\t\t'div',\n\t\t\t\t\t{ className: (0, _classnames2.default)('react-phone-number-input__error', 'rrui__input-error') },\n\t\t\t\t\terror\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\t}], [{\n\t\tkey: 'getDerivedStateFromProps',\n\t\tvalue: function getDerivedStateFromProps(props, state) {\n\t\t\tvar country = state.country,\n\t\t\t    hasChangedCountry = state.hasChangedCountry,\n\t\t\t    value = state.value,\n\t\t\t    _state$props = state.props,\n\t\t\t    old_default_country = _state$props.country,\n\t\t\t    old_value = _state$props.value;\n\t\t\tvar metadata = props.metadata,\n\t\t\t    new_default_country = props.country,\n\t\t\t    new_value = props.value;\n\n\t\t\t// Emulate `prevProps` via `state.props`.\n\n\t\t\tvar new_state = { props: props\n\n\t\t\t\t// If `countries` or `labels` or `international` changed\n\t\t\t\t// then re-generate country `<select/>` options.\n\t\t\t};if (props.countries !== state.props.countries || props.labels !== state.props.labels || props.international !== state.props.international) {\n\t\t\t\tnew_state.country_select_options = generate_country_select_options(props);\n\t\t\t}\n\n\t\t\t// If the default country changed.\n\t\t\t// (e.g. in case of ajax GeoIP detection after page loaded)\n\t\t\t// then select it but only if the user didn't previously select\n\t\t\t// another country and no phone number has been entered so far.\n\t\t\t// Because if the user has already started inputting a phone number\n\t\t\t// then he's okay with no country being selected at all (\"International\")\n\t\t\t// and doesn't want to be disturbed, doesn't want his input to be screwed, etc.\n\t\t\tif (new_default_country !== old_default_country && !hasChangedCountry && !value && !new_value) {\n\t\t\t\treturn _extends({}, new_state, {\n\t\t\t\t\tcountry: new_default_country\n\t\t\t\t});\n\t\t\t}\n\t\t\t// If a new `value` is set externally.\n\t\t\t// (e.g. as a result of an ajax API request\n\t\t\t//  to get user's phone after page loaded)\n\t\t\t// The first part — `new_value !== old_value` —\n\t\t\t// is basically `props.value !== prevProps.value`\n\t\t\t// so it means \"if value property was changed externally\".\n\t\t\t// The second part — `new_value !== value` —\n\t\t\t// is for ignoring the `getDerivedStateFromProps()` call\n\t\t\t// which happens in `this.onChange()` right after `this.setState()`.\n\t\t\t// If this `getDerivedStateFromProps()` call isn't ignored\n\t\t\t// then the country flag would reset on each input.\n\t\t\telse if (new_value !== old_value && new_value !== value) {\n\t\t\t\t\tvar parsed_number = (0, _inputControl.parsePhoneNumber)(new_value, metadata);\n\n\t\t\t\t\treturn _extends({}, new_state, {\n\t\t\t\t\t\tparsed_input: generateParsedInput(new_value, parsed_number, props),\n\t\t\t\t\t\tvalue: new_value,\n\t\t\t\t\t\tcountry: new_value ? parsed_number.country : country\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t// Maybe `new_state.country_select_options` changed.\n\t\t\t// In any case, update `prevProps`.\n\t\t\treturn new_state;\n\t\t}\n\t}]);\n\n\treturn PhoneNumberInput;\n}(_react.PureComponent), _class2.propTypes = {\n\t// Phone number in E.164 format.\n\t// E.g. \"+12223333333\" for USA.\n\tvalue: _propTypes2.default.string,\n\n\t// `onChange` handler is called each time\n\t// the phone number `<input/>` is edited.\n\tonChange: _propTypes2.default.func.isRequired,\n\n\t// `onBlur` is usually passed by `redux-form`.\n\tonBlur: _propTypes2.default.func,\n\n\t// `onKeyDown` handler (e.g. to handle Enter key press).\n\tonKeyDown: _propTypes2.default.func,\n\n\t// Some people requested an `onCountryChange` event listener.\n\t// No valid reason was given other than compliance with some legacy code\n\t// which stored both phone number and country in a database.\n\t// https://github.com/catamphetamine/react-phone-number-input/issues/128\n\tonCountryChange: _propTypes2.default.func,\n\n\t// Disables both the phone number `<input/>`\n\t// and the country `<select/>`.\n\t// (is `false` by default)\n\tdisabled: _propTypes2.default.bool.isRequired,\n\n\t// Web browser's \"autocomplete\" feature\n\t// remembers the phone number being input\n\t// and can also autofill the `<input/>`\n\t// with previously remembered phone numbers.\n\t//\n\t// Default value: \"tel\".\n\t//\n\t// https://developers.google.com/web/updates/2015/06/checkout-faster-with-autofill\n\t//\n\t// \"So when should you use autocomplete=\"off\"?\n\t//  One example is when you've implemented your own version\n\t//  of autocomplete for search. Another example is any form field\n\t//  where users will input and submit different kinds of information\n\t//  where it would not be useful to have the browser remember\n\t//  what was submitted previously\".\n\t//\n\tautoComplete: _propTypes2.default.string.isRequired,\n\n\t// Should the initially passed phone number `value`\n\t// be converted to a national phone number for its country.\n\t// (is `false` by default)\n\tdisplayInitialValueAsLocalNumber: _propTypes2.default.bool.isRequired,\n\n\t// The country to be selected by default.\n\t// Two-letter country code (\"ISO 3166-1 alpha-2\").\n\tcountry: _propTypes2.default.string,\n\n\t// Only these countries will be available for selection.\n\t// Includes all countries by default.\n\tcountries: _propTypes2.default.arrayOf(_propTypes2.default.string),\n\n\t// Custom country `<select/>` option names.\n\t// E.g. `{ ZZ: 'Международный', RU: 'Россия', US: 'США', ... }`\n\tlabels: _propTypes2.default.objectOf(_propTypes2.default.string).isRequired,\n\n\t// Country flag icon components.\n\t// By default flag icons are inserted as `<img/>`s\n\t// with their `src` pointed to `flag-icon-css` github repo.\n\t// There might be cases (e.g. an offline application)\n\t// where having a large (3 megabyte) `<svg/>` flags\n\t// bundle is more appropriate.\n\t// `import flags from 'react-phone-number-input/flags'`.\n\tflags: _propTypes2.default.objectOf(_propTypes2.default.func),\n\n\t// Flag icon component.\n\tflagComponent: _propTypes2.default.func.isRequired,\n\n\t// A base URL path for national flag SVG icons.\n\t// By default it uses the ones from `flag-icon-css` github repo.\n\tflagsPath: _propTypes2.default.string.isRequired,\n\n\t// Whether to add the \"International\" option\n\t// to the list of countries.\n\t// By default it's added if the list of `countries` hasn't been overridden.\n\tinternational: _propTypes2.default.bool,\n\n\t// Custom \"International\" country `<select/>` option icon.\n\tinternationalIcon: _propTypes2.default.func.isRequired,\n\n\t// Whether to show country `<select/>`.\n\t// (is `true` by default)\n\tshowCountrySelect: _propTypes2.default.bool.isRequired,\n\n\t// HTML `tabindex` attribute for the country `<select/>`.\n\tcountrySelectTabIndex: _propTypes2.default.number,\n\n\t// `<Phone/>` component CSS style object.\n\tstyle: _propTypes2.default.object,\n\n\t// `<Phone/>` component CSS class.\n\tclassName: _propTypes2.default.string,\n\n\t// `<input/>` CSS class.\n\t// Both for the phone number `<input/>` and\n\t// `react-responsive-ui` `<Select/>` autocomplete input.\n\tinputClassName: _propTypes2.default.string,\n\n\t// Returns phone number `<input/>` CSS class string.\n\t// Receives an object of shape `{ disabled : boolean?, invalid : boolean? }`.\n\tgetInputClassName: _propTypes2.default.func,\n\n\t// Country `<select/>` component.\n\t//\n\t// Receives properties:\n\t//\n\t// * `name : string?` — HTML `name` attribute.\n\t// * `value : string?` — The currently selected country code.\n\t// * `onChange(value : string?)` — Updates the `value`.\n\t// * `options : object[]` — The list of all selectable countries (including \"International\") each being an object of shape `{ value : string?, label : string, icon : React.Component }`.\n\t// * `disabled : boolean?` — HTML `disabled` attribute.\n\t// * `tabIndex : (number|string)?` — HTML `tabIndex` attribute.\n\t// * `className : string` — CSS class name.\n\t//\n\t// Optional properties (should be ignored unless needed):\n\t//\n\t// * `hidePhoneInputField(hide : boolean)` — Can be called to show/hide phone input field. Takes `hide : boolean` argument. E.g. `react-responsive-ui` `<Select/>` uses this to hide phone number input when country select is expanded.\n\t// * `focusPhoneInputField()` — Can be called to manually focus phone input field. E.g. `react-responsive-ui` `<Select/>` uses this to focus phone number input after country selection in a timeout (after the phone input field is no longer hidden).\n\t//\n\tcountrySelectComponent: _propTypes2.default.func.isRequired,\n\n\t// Phone number `<input/>` component.\n\t//\n\t// Receives properties:\n\t//\n\t// * `value : string` — The parsed phone number. E.g.: `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\n\t// * `onChange(value : string)` — Updates the `value`.\n\t// * `country : string?` — The currently selected country. `undefined` means \"International\" (no country selected).\n\t// * `metadata : object` — `libphonenumber-js` metadata.\n\t// * All other properties should be passed through to the underlying `<input/>`.\n\t//\n\t// Must also implement `.focus()` method.\n\t//\n\tinputComponent: _propTypes2.default.func,\n\n\t// Set to `false` to use `inputComponent={InputBasic}`\n\t// instead of `input-format`'s `<ReactInput/>`.\n\t// Is `true` by default.\n\tsmartCaret: _propTypes2.default.bool.isRequired,\n\n\t// For example, `react-responsive-ui` `<Select/>`\n\t// hides the phone number input field when expanded.\n\t// Is `false` by default.\n\tcountrySelectHidesPhoneInputField: _propTypes2.default.bool.isRequired,\n\n\t// Phone number extension element.\n\text: _propTypes2.default.node,\n\n\t// An error message shown below the phone number `<input/>`.\n\terror: _propTypes2.default.string,\n\n\t// The `error` is shown only when `indicateInvalid` is true.\n\tindicateInvalid: _propTypes2.default.bool,\n\n\t// Translation.\n\tlocale: _propTypes2.default.objectOf(_propTypes2.default.string),\n\n\t// `libphonenumber-js` metadata\n\tmetadata: _propTypes2.default.shape({\n\t\tcountry_calling_codes: _propTypes2.default.object.isRequired,\n\t\tcountries: _propTypes2.default.object.isRequired\n\t}).isRequired\n}, _class2.defaultProps = {\n\t// Not disabled.\n\tdisabled: false,\n\n\t// Remember (and autofill) the value as a phone number.\n\tautoComplete: 'tel',\n\n\tlabels: _default2.default,\n\n\t// Flag icon component.\n\tflagComponent: _Flag2.default,\n\n\t// By default use icons from `flag-icon-css` github repo.\n\tflagsPath: 'https://lipis.github.io/flag-icon-css/flags/4x3/',\n\n\t// Default \"International\" country `<select/>` option icon (globe).\n\tinternationalIcon: _InternationalIcon2.default,\n\n\t// Show country `<select/>`.\n\tshowCountrySelect: true,\n\n\t// Don't convert the initially passed phone number `value`\n\t// to a national phone number for its country.\n\t// The reason is that the newer generation grows up when\n\t// there are no stationary phones and therefore everyone inputs\n\t// phone numbers with a `+` in their smartphones\n\t// so phone numbers written in international form\n\t// are gradually being considered more natural than local ones.\n\tdisplayInitialValueAsLocalNumber: false,\n\n\t// Set to `false` to use `inputComponent={InputBasic}`\n\t// instead of `input-format`'s `<ReactInput/>`.\n\t// Is `true` by default.\n\tsmartCaret: true,\n\n\t// `react-responsive-ui` `<Select/>` sets this to true\n\t// to hide the phone number input field when expanded.\n\tcountrySelectHidesPhoneInputField: false\n}, _initialiseProps = function _initialiseProps() {\n\tvar _this2 = this;\n\n\tthis.onCountrySelected = function (new_country) {\n\t\tvar _props2 = _this2.props,\n\t\t    metadata = _props2.metadata,\n\t\t    onChange = _props2.onChange,\n\t\t    countrySelectHidesPhoneInputField = _props2.countrySelectHidesPhoneInputField;\n\t\tvar _state2 = _this2.state,\n\t\t    old_parsed_input = _state2.parsed_input,\n\t\t    old_country = _state2.country;\n\n\t\t// After the new `country` has been selected,\n\t\t// if the phone number `<input/>` holds any digits\n\t\t// then migrate those digits for the new `country`.\n\n\t\tvar new_parsed_input = (0, _inputControl.migrateParsedInputForNewCountry)(old_parsed_input, old_country, new_country, metadata);\n\n\t\tvar new_value = (0, _inputControl.e164)(new_parsed_input, new_country, metadata);\n\n\t\t_this2.onCountryChange(new_country);\n\n\t\t// Focus the phone number `<input/>` upon country selection.\n\t\t// The default behaviour.\n\t\tif (!countrySelectHidesPhoneInputField) {\n\t\t\t_this2.focus();\n\t\t}\n\n\t\t_this2.setState({\n\t\t\tcountry: new_country,\n\t\t\thasChangedCountry: true,\n\t\t\tparsed_input: new_parsed_input,\n\t\t\tvalue: new_value\n\t\t}, function () {\n\t\t\t// Update the new `value` property.\n\t\t\t// Doing it after the `state` has been updated\n\t\t\t// because `onChange()` will trigger `getDerivedStateFromProps()`\n\t\t\t// with the new `value` which will be compared to `state.value` there.\n\t\t\tonChange(new_value);\n\n\t\t\t// Focus the phone number `<input/>` upon country selection.\n\t\t\t// Doing it in a `setState()` callback because the phone number\n\t\t\t// `<input/>` is hidden while country `<select/>` is expanded.\n\t\t\tif (countrySelectHidesPhoneInputField) {\n\t\t\t\t_this2.focus();\n\t\t\t}\n\t\t});\n\t};\n\n\tthis.onPhoneNumberKeyDown = function (event) {\n\t\tvar onKeyDown = _this2.props.onKeyDown;\n\n\t\t// Actually \"Down arrow\" key is used for showing \"autocomplete\" (\"autofill\") options.\n\t\t// (e.g. previously entered phone numbers for `autoComplete=\"tel\"`)\n\t\t// // Expand country `<select/>`` on \"Down arrow\" key press.\n\t\t// if (event.keyCode === 40) {\n\t\t// \tthis.country_select.toggle()\n\t\t// }\n\n\t\tif (onKeyDown) {\n\t\t\tonKeyDown(event);\n\t\t}\n\t};\n\n\tthis.onChange = function (parsed_input) {\n\t\tvar _props3 = _this2.props,\n\t\t    onChange = _props3.onChange,\n\t\t    countries = _props3.countries,\n\t\t    international = _props3.international,\n\t\t    metadata = _props3.metadata;\n\t\tvar country = _this2.state.country;\n\n\n\t\tif (parsed_input) {\n\t\t\t// If the phone number being input is an international one\n\t\t\t// then tries to derive the country from the phone number.\n\t\t\t// (regardless of whether there's any country currently selected)\n\t\t\tif (parsed_input[0] === '+') {\n\t\t\t\tcountry = (0, _inputControl.getCountryForParsedInput)(parsed_input, country, countries, international, metadata);\n\n\t\t\t\t_this2.onCountryChange(country);\n\t\t\t}\n\t\t\t// If this `onChange()` event was triggered\n\t\t\t// as a result of selecting \"International\" country\n\t\t\t// then force-prepend a `+` sign if the phone number\n\t\t\t// `<input/>` value isn't in international format.\n\t\t\telse if (!country) {\n\t\t\t\t\tparsed_input = '+' + parsed_input;\n\t\t\t\t}\n\t\t}\n\n\t\t// Generate the new `value` property.\n\t\tvar value = (0, _inputControl.e164)(parsed_input, country, metadata);\n\n\t\t_this2.setState({\n\t\t\tparsed_input: parsed_input,\n\t\t\tvalue: value,\n\t\t\tcountry: country\n\t\t},\n\t\t// Update the new `value` property.\n\t\t// Doing it after the `state` has been updated\n\t\t// because `onChange()` will trigger `getDerivedStateFromProps()`\n\t\t// with the new `value` which will be compared to `state.value` there.\n\t\tfunction () {\n\t\t\treturn onChange(value);\n\t\t});\n\t};\n\n\tthis.onBlur = function (event) {\n\t\tvar onBlur = _this2.props.onBlur;\n\t\tvar value = _this2.state.value;\n\n\n\t\tif (!onBlur) {\n\t\t\treturn;\n\t\t}\n\n\t\t// `event` is React's `SyntheticEvent`.\n\t\t// Its `.value` is read-only therefore cloning it.\n\t\tvar _event = _extends({}, event, {\n\t\t\ttarget: _extends({}, event.target, {\n\t\t\t\tvalue: value\n\t\t\t})\n\n\t\t\t// For `redux-form` event detection.\n\t\t\t// https://github.com/erikras/redux-form/blob/v5/src/events/isEvent.js\n\t\t});_event.stopPropagation = event.stopPropagation;\n\t\t_event.preventDefault = event.preventDefault;\n\n\t\treturn onBlur(_event);\n\t};\n\n\tthis.hidePhoneInputField = function (hide) {\n\t\t_this2.setState({\n\t\t\thidePhoneInputField: hide\n\t\t});\n\t};\n\n\tthis.focus = function () {\n\t\treturn _this2.number_input.focus();\n\t};\n\n\tthis.storeCountrySelectInstance = function (_) {\n\t\treturn _this2.country_select = _;\n\t};\n\n\tthis.storePhoneNumberInputInstance = function (_) {\n\t\treturn _this2.number_input = _;\n\t};\n}, _temp)) || _class;\n\n// Generates country `<select/>` options.\n\n\nexports.default = PhoneNumberInput;\nfunction generate_country_select_options(props) {\n\tvar countries = props.countries,\n\t    labels = props.labels,\n\t    international = props.international;\n\n\n\treturn (0, _inputControl.getCountrySelectOptions)(countries || (0, _countries.getCountryCodes)(labels), labels, international, _default2.default).map(function (_ref) {\n\t\tvar value = _ref.value,\n\t\t    label = _ref.label;\n\t\treturn {\n\t\t\tvalue: value,\n\t\t\tlabel: label,\n\t\t\ticon: createCountrySelectOptionIconComponent(value, label, props)\n\t\t};\n\t});\n}\n\nfunction createCountrySelectOptionIconComponent(value, label, props) {\n\tvar flags = props.flags,\n\t    flagsPath = props.flagsPath,\n\t    FlagComponent = props.flagComponent,\n\t    InternationalIcon = props.internationalIcon;\n\n\n\tif (value) {\n\t\treturn function (props) {\n\t\t\treturn _react2.default.createElement(FlagComponent, {\n\t\t\t\tcountry: value,\n\t\t\t\tflags: flags,\n\t\t\t\tflagsPath: flagsPath,\n\t\t\t\tclassName: props ? props.className : undefined });\n\t\t};\n\t}\n\n\treturn function (props) {\n\t\treturn _react2.default.createElement(\n\t\t\t'div',\n\t\t\t{\n\t\t\t\tclassName: (0, _classnames2.default)('react-phone-number-input__icon', 'react-phone-number-input__icon--international', props && props.className) },\n\t\t\t_react2.default.createElement(InternationalIcon, null)\n\t\t);\n\t};\n}\n\nfunction generateParsedInput(value, parsed_number, props) {\n\tvar displayInitialValueAsLocalNumber = props.displayInitialValueAsLocalNumber,\n\t    metadata = props.metadata;\n\n\t// If the `value` (E.164 phone number)\n\t// belongs to the currently selected country\n\t// and `displayInitialValueAsLocalNumber` property is `true`\n\t// then convert `value` (E.164 phone number)\n\t// to a local phone number digits.\n\t// E.g. '+78005553535' -> '88005553535'.\n\n\tif (displayInitialValueAsLocalNumber && parsed_number.country) {\n\t\treturn (0, _inputControl.generateNationalNumberDigits)(parsed_number, metadata);\n\t}\n\n\treturn value;\n}\n//# sourceMappingURL=PhoneInput.js.map","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\nexports.default = undefined;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _inputFormat = require('input-format');\n\nvar _custom = require('libphonenumber-js/custom');\n\nvar _formatPhoneNumber = require('./formatPhoneNumber');\n\nvar _formatPhoneNumber2 = _interopRequireDefault(_formatPhoneNumber);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/**\r\n * This input uses `input-format` library\r\n * for \"smart\" caret positioning.\r\n */\nvar InputSmart = function (_Component) {\n\t_inherits(InputSmart, _Component);\n\n\tfunction InputSmart() {\n\t\tvar _ref;\n\n\t\tvar _temp, _this, _ret;\n\n\t\t_classCallCheck(this, InputSmart);\n\n\t\tfor (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n\t\t\targs[_key] = arguments[_key];\n\t\t}\n\n\t\treturn _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = InputSmart.__proto__ || Object.getPrototypeOf(InputSmart)).call.apply(_ref, [this].concat(args))), _this), _this.focus = function () {\n\t\t\treturn _this.input.focus();\n\t\t}, _this.storeInput = function (ref) {\n\t\t\treturn _this.input = ref;\n\t\t}, _this.format = function (value) {\n\t\t\tvar _this$props = _this.props,\n\t\t\t    country = _this$props.country,\n\t\t\t    metadata = _this$props.metadata;\n\n\n\t\t\treturn (0, _formatPhoneNumber2.default)(value, country, metadata);\n\t\t}, _temp), _possibleConstructorReturn(_this, _ret);\n\t}\n\n\t_createClass(InputSmart, [{\n\t\tkey: 'render',\n\t\tvalue: function render() {\n\t\t\tvar _props = this.props,\n\t\t\t    country = _props.country,\n\t\t\t    metadata = _props.metadata,\n\t\t\t    rest = _objectWithoutProperties(_props, ['country', 'metadata']);\n\n\t\t\treturn _react2.default.createElement(_inputFormat.ReactInput, _extends({}, rest, {\n\t\t\t\tref: this.storeInput,\n\t\t\t\tparse: _custom.parsePhoneNumberCharacter,\n\t\t\t\tformat: this.format }));\n\t\t}\n\t}]);\n\n\treturn InputSmart;\n}(_react.Component);\n\nexports.default = InputSmart;\n//# sourceMappingURL=InputSmart.js.map","export\r\n{\r\n\tdefault as templateParser\r\n}\r\nfrom './modules/template parser'\r\n\r\nexport\r\n{\r\n\tdefault as templateFormatter\r\n}\r\nfrom './modules/template formatter'\r\n\r\nexport\r\n{\r\n\tdefault as ReactInput\r\n}\r\nfrom './modules/ReactInput'\r\n\r\nexport\r\n{\r\n\tdefault as parseDigit\r\n}\r\nfrom './modules/parse digit'\r\n\r\nexport\r\n{\r\n\tdefault as parse\r\n}\r\nfrom './modules/parse'\r\n\r\nexport\r\n{\r\n\tdefault as format\r\n}\r\nfrom './modules/format'\r\n\r\nexport\r\n{\r\n\tonChange,\r\n\tonPaste,\r\n\tonCut,\r\n\tonKeyDown\r\n}\r\nfrom './modules/input control'","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\nexports.default = close_braces;\n\nvar _helpers = require('./helpers');\n\nfunction close_braces(retained_template, template) {\n\tvar placeholder = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'x';\n\tvar empty_placeholder = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : ' ';\n\n\tvar cut_before = retained_template.length;\n\n\tvar opening_braces = (0, _helpers.count_occurences)('(', retained_template);\n\tvar closing_braces = (0, _helpers.count_occurences)(')', retained_template);\n\n\tvar dangling_braces = opening_braces - closing_braces;\n\n\twhile (dangling_braces > 0 && cut_before < template.length) {\n\t\tretained_template += template[cut_before].replace(placeholder, empty_placeholder);\n\n\t\tif (template[cut_before] === ')') {\n\t\t\tdangling_braces--;\n\t\t}\n\n\t\tcut_before++;\n\t}\n\n\treturn retained_template;\n}\n//# sourceMappingURL=close braces.js.map","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\nexports.default = edit;\n// Edits text `value` (if `operation` is passed) and repositions the `caret` if needed.\n//\n// Example:\n//\n// value - '88005553535'\n// caret - 2 // starting from 0; is positioned before the first zero\n// operation - 'Backspace'\n//\n// Returns\n// {\n// \tvalue: '8005553535'\n// \tcaret: 1\n// }\n//\n// Currently supports just 'Delete' and 'Backspace' operations\n//\nfunction edit(value, caret, operation) {\n\tswitch (operation) {\n\t\tcase 'Backspace':\n\t\t\t// If there exists the previous character,\n\t\t\t// then erase it and reposition the caret.\n\t\t\tif (caret > 0) {\n\t\t\t\t// Remove the previous character\n\t\t\t\tvalue = value.slice(0, caret - 1) + value.slice(caret);\n\t\t\t\t// Position the caret where the previous (erased) character was\n\t\t\t\tcaret--;\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase 'Delete':\n\t\t\t// Remove current digit (if any)\n\t\t\tvalue = value.slice(0, caret) + value.slice(caret + 1);\n\t\t\tbreak;\n\t}\n\n\treturn { value: value, caret: caret };\n}\n//# sourceMappingURL=edit.js.map","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\nexports.getSelection = getSelection;\nexports.getOperation = getOperation;\nexports.getCaretPosition = getCaretPosition;\nexports.setCaretPosition = setCaretPosition;\n// Gets <input/> selection bounds\nfunction getSelection(element) {\n\t// If no selection, return nothing\n\tif (element.selectionStart === element.selectionEnd) {\n\t\treturn;\n\t}\n\n\treturn { start: element.selectionStart, end: element.selectionEnd };\n}\n\n// Key codes\nvar Keys = exports.Keys = {\n\tBackspace: 8,\n\tDelete: 46\n\n\t// Finds out the operation to be intercepted and performed\n\t// based on the key down event `keyCode`.\n};function getOperation(event) {\n\tswitch (event.keyCode) {\n\t\tcase Keys.Backspace:\n\t\t\treturn 'Backspace';\n\n\t\tcase Keys.Delete:\n\t\t\treturn 'Delete';\n\t}\n}\n\n// Gets <input/> caret position\nfunction getCaretPosition(element) {\n\treturn element.selectionStart;\n}\n\n// Sets <input/> caret position\nfunction setCaretPosition(element, caret_position) {\n\t// Sanity check\n\tif (caret_position === undefined) {\n\t\treturn;\n\t}\n\n\t// Set caret position\n\telement.setSelectionRange(caret_position, caret_position);\n}\n//# sourceMappingURL=dom.js.map","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = cmp;\n// Copy-pasted from:\n// https://github.com/substack/semver-compare/blob/master/index.js\n//\n// Inlining this function because some users reported issues with\n// importing from `semver-compare` in a browser with ES6 \"native\" modules.\nfunction cmp(a, b) {\n    var pa = a.split('.');\n    var pb = b.split('.');\n    for (var i = 0; i < 3; i++) {\n        var na = Number(pa[i]);\n        var nb = Number(pb[i]);\n        if (na > nb) return 1;\n        if (nb > na) return -1;\n        if (!isNaN(na) && isNaN(nb)) return 1;\n        if (isNaN(na) && !isNaN(nb)) return -1;\n    }\n    return 0;\n};\n//# sourceMappingURL=semver-compare.js.map","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\nexports.default = parsePhoneNumberFromString;\n\nvar _parsePhoneNumber = require('./parsePhoneNumber');\n\nvar _parsePhoneNumberFromString_ = require('./parsePhoneNumberFromString_');\n\nvar _parsePhoneNumberFromString_2 = _interopRequireDefault(_parsePhoneNumberFromString_);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction parsePhoneNumberFromString() {\n\tvar _normalizeArguments = (0, _parsePhoneNumber.normalizeArguments)(arguments),\n\t    text = _normalizeArguments.text,\n\t    options = _normalizeArguments.options,\n\t    metadata = _normalizeArguments.metadata;\n\n\treturn (0, _parsePhoneNumberFromString_2.default)(text, options, metadata);\n}\n//# sourceMappingURL=parsePhoneNumberFromString.js.map","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nexports.default = parsePhoneNumberFromString;\n\nvar _parsePhoneNumber_ = require('./parsePhoneNumber_');\n\nvar _parsePhoneNumber_2 = _interopRequireDefault(_parsePhoneNumber_);\n\nvar _ParseError = require('./ParseError');\n\nvar _ParseError2 = _interopRequireDefault(_ParseError);\n\nvar _metadata = require('./metadata');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction parsePhoneNumberFromString(text, options, metadata) {\n\t// Validate `defaultCountry`.\n\tif (options && options.defaultCountry && !(0, _metadata.isSupportedCountry)(options.defaultCountry, metadata)) {\n\t\toptions = _extends({}, options, {\n\t\t\tdefaultCountry: undefined\n\t\t});\n\t}\n\t// Parse phone number.\n\ttry {\n\t\treturn (0, _parsePhoneNumber_2.default)(text, options, metadata);\n\t} catch (error) {\n\t\t/* istanbul ignore else */\n\t\tif (error instanceof _ParseError2.default) {\n\t\t\t//\n\t\t} else {\n\t\t\tthrow error;\n\t\t}\n\t}\n}\n//# sourceMappingURL=parsePhoneNumberFromString_.js.map","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\nexports.default = getExampleNumber;\n\nvar _PhoneNumber = require('./PhoneNumber');\n\nvar _PhoneNumber2 = _interopRequireDefault(_PhoneNumber);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction getExampleNumber(country, examples, metadata) {\n\tif (examples[country]) {\n\t\treturn new _PhoneNumber2.default(country, examples[country], metadata);\n\t}\n}\n//# sourceMappingURL=getExampleNumber.js.map","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isPossibleNumber;\n\nvar _getNumberType = require('./getNumberType');\n\nvar _isPossibleNumber_ = require('./isPossibleNumber_');\n\nvar _isPossibleNumber_2 = _interopRequireDefault(_isPossibleNumber_);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\r\n * Checks if a given phone number is possible.\r\n * Which means it only checks phone number length\r\n * and doesn't test any regular expressions.\r\n *\r\n * Examples:\r\n *\r\n * ```js\r\n * isPossibleNumber('+78005553535', metadata)\r\n * isPossibleNumber('8005553535', 'RU', metadata)\r\n * isPossibleNumber('88005553535', 'RU', metadata)\r\n * isPossibleNumber({ phone: '8005553535', country: 'RU' }, metadata)\r\n * ```\r\n */\nfunction isPossibleNumber() {\n  var _normalizeArguments = (0, _getNumberType.normalizeArguments)(arguments),\n      input = _normalizeArguments.input,\n      options = _normalizeArguments.options,\n      metadata = _normalizeArguments.metadata;\n\n  return (0, _isPossibleNumber_2.default)(input, options, metadata);\n}\n//# sourceMappingURL=isPossibleNumber.js.map","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\nexports.default = isValidNumber;\n\nvar _validate_ = require('./validate_');\n\nvar _validate_2 = _interopRequireDefault(_validate_);\n\nvar _getNumberType = require('./getNumberType');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// Finds out national phone number type (fixed line, mobile, etc)\nfunction isValidNumber() {\n\tvar _normalizeArguments = (0, _getNumberType.normalizeArguments)(arguments),\n\t    input = _normalizeArguments.input,\n\t    options = _normalizeArguments.options,\n\t    metadata = _normalizeArguments.metadata;\n\n\treturn (0, _validate_2.default)(input, options, metadata);\n}\n//# sourceMappingURL=validate.js.map","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\nexports.default = isValidNumberForRegion;\n\nvar _isViablePhoneNumber = require('./isViablePhoneNumber');\n\nvar _isViablePhoneNumber2 = _interopRequireDefault(_isViablePhoneNumber);\n\nvar _parse_ = require('./parse_');\n\nvar _parse_2 = _interopRequireDefault(_parse_);\n\nvar _isValidNumberForRegion_ = require('./isValidNumberForRegion_');\n\nvar _isValidNumberForRegion_2 = _interopRequireDefault(_isValidNumberForRegion_);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction isValidNumberForRegion(number, country, metadata) {\n\tif (typeof number !== 'string') {\n\t\tthrow new TypeError('number must be a string');\n\t}\n\n\tif (typeof country !== 'string') {\n\t\tthrow new TypeError('country must be a string');\n\t}\n\n\t// `parse` extracts phone numbers from raw text,\n\t// therefore it will cut off all \"garbage\" characters,\n\t// while this `validate` function needs to verify\n\t// that the phone number contains no \"garbage\"\n\t// therefore the explicit `isViablePhoneNumber` check.\n\tvar input = void 0;\n\tif ((0, _isViablePhoneNumber2.default)(number)) {\n\t\tinput = (0, _parse_2.default)(number, { defaultCountry: country }, metadata);\n\t} else {\n\t\tinput = {};\n\t}\n\n\treturn (0, _isValidNumberForRegion_2.default)(input, country, undefined, metadata);\n}\n//# sourceMappingURL=isValidNumberForRegion.js.map","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\nexports.default = findNumbers;\n\nvar _findNumbers_ = require('./findNumbers_');\n\nvar _findNumbers_2 = _interopRequireDefault(_findNumbers_);\n\nvar _parsePhoneNumber = require('./parsePhoneNumber');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction findNumbers() {\n\tvar _normalizeArguments = (0, _parsePhoneNumber.normalizeArguments)(arguments),\n\t    text = _normalizeArguments.text,\n\t    options = _normalizeArguments.options,\n\t    metadata = _normalizeArguments.metadata;\n\n\treturn (0, _findNumbers_2.default)(text, options, metadata);\n}\n//# sourceMappingURL=findNumbers.js.map","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\nexports.default = findNumbers;\n\nvar _PhoneNumberMatcher = require('./PhoneNumberMatcher');\n\nvar _PhoneNumberMatcher2 = _interopRequireDefault(_PhoneNumberMatcher);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction findNumbers(text, options, metadata) {\n\tvar matcher = new _PhoneNumberMatcher2.default(text, options, metadata);\n\tvar results = [];\n\twhile (matcher.hasNext()) {\n\t\tresults.push(matcher.next());\n\t}\n\treturn results;\n}\n//# sourceMappingURL=findNumbers_.js.map","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _LRUCache = require('./LRUCache');\n\nvar _LRUCache2 = _interopRequireDefault(_LRUCache);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n// A cache for frequently used country-specific regular expressions. Set to 32 to cover ~2-3\n// countries being used for the same doc with ~10 patterns for each country. Some pages will have\n// a lot more countries in use, but typically fewer numbers for each so expanding the cache for\n// that use-case won't have a lot of benefit.\nvar RegExpCache = function () {\n\tfunction RegExpCache(size) {\n\t\t_classCallCheck(this, RegExpCache);\n\n\t\tthis.cache = new _LRUCache2.default(size);\n\t}\n\n\t_createClass(RegExpCache, [{\n\t\tkey: 'getPatternForRegExp',\n\t\tvalue: function getPatternForRegExp(pattern) {\n\t\t\tvar regExp = this.cache.get(pattern);\n\t\t\tif (!regExp) {\n\t\t\t\tregExp = new RegExp('^' + pattern);\n\t\t\t\tthis.cache.put(pattern, regExp);\n\t\t\t}\n\t\t\treturn regExp;\n\t\t}\n\t}]);\n\n\treturn RegExpCache;\n}();\n\nexports.default = RegExpCache;\n//# sourceMappingURL=RegExpCache.js.map","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n// https://medium.com/dsinjs/implementing-lru-cache-in-javascript-94ba6755cda9\n\nvar Node = function Node(key, value) {\n  var next = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  var prev = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n\n  _classCallCheck(this, Node);\n\n  this.key = key;\n  this.value = value;\n  this.next = next;\n  this.prev = prev;\n};\n\nvar LRUCache = function () {\n  //set default limit of 10 if limit is not passed.\n  function LRUCache() {\n    var limit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;\n\n    _classCallCheck(this, LRUCache);\n\n    this.size = 0;\n    this.limit = limit;\n    this.head = null;\n    this.tail = null;\n    this.cache = {};\n  }\n\n  // Write Node to head of LinkedList\n  // update cache with Node key and Node reference\n\n\n  _createClass(LRUCache, [{\n    key: \"put\",\n    value: function put(key, value) {\n      this.ensureLimit();\n\n      if (!this.head) {\n        this.head = this.tail = new Node(key, value);\n      } else {\n        var node = new Node(key, value, this.head);\n        this.head.prev = node;\n        this.head = node;\n      }\n\n      //Update the cache map\n      this.cache[key] = this.head;\n      this.size++;\n    }\n\n    // Read from cache map and make that node as new Head of LinkedList\n\n  }, {\n    key: \"get\",\n    value: function get(key) {\n      if (this.cache[key]) {\n        var value = this.cache[key].value;\n\n        // node removed from it's position and cache\n        this.remove(key);\n        // write node again to the head of LinkedList to make it most recently used\n        this.put(key, value);\n\n        return value;\n      }\n\n      console.log(\"Item not available in cache for key \" + key);\n    }\n  }, {\n    key: \"ensureLimit\",\n    value: function ensureLimit() {\n      if (this.size === this.limit) {\n        this.remove(this.tail.key);\n      }\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(key) {\n      var node = this.cache[key];\n\n      if (node.prev !== null) {\n        node.prev.next = node.next;\n      } else {\n        this.head = node.next;\n      }\n\n      if (node.next !== null) {\n        node.next.prev = node.prev;\n      } else {\n        this.tail = node.prev;\n      }\n\n      delete this.cache[key];\n      this.size--;\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this.head = null;\n      this.tail = null;\n      this.size = 0;\n      this.cache = {};\n    }\n\n    // // Invokes the callback function with every node of the chain and the index of the node.\n    // forEach(fn) {\n    //   let node = this.head;\n    //   let counter = 0;\n    //   while (node) {\n    //     fn(node, counter);\n    //     node = node.next;\n    //     counter++;\n    //   }\n    // }\n\n    // // To iterate over LRU with a 'for...of' loop\n    // *[Symbol.iterator]() {\n    //   let node = this.head;\n    //   while (node) {\n    //     yield node;\n    //     node = node.next;\n    //   }\n    // }\n\n  }]);\n\n  return LRUCache;\n}();\n\nexports.default = LRUCache;\n//# sourceMappingURL=LRUCache.js.map","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.containsMoreThanOneSlashInNationalNumber = containsMoreThanOneSlashInNationalNumber;\n\nvar _validate_ = require('../validate_');\n\nvar _validate_2 = _interopRequireDefault(_validate_);\n\nvar _parseDigits = require('../parseDigits');\n\nvar _parseDigits2 = _interopRequireDefault(_parseDigits);\n\nvar _util = require('./util');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\r\n * Leniency when finding potential phone numbers in text segments\r\n * The levels here are ordered in increasing strictness.\r\n */\nexports.default = {\n  /**\r\n   * Phone numbers accepted are \"possible\", but not necessarily \"valid\".\r\n   */\n  POSSIBLE: function POSSIBLE(number, candidate, metadata) {\n    return true;\n  },\n\n\n  /**\r\n   * Phone numbers accepted are \"possible\" and \"valid\".\r\n   * Numbers written in national format must have their national-prefix\r\n   * present if it is usually written for a number of this type.\r\n   */\n  VALID: function VALID(number, candidate, metadata) {\n    if (!(0, _validate_2.default)(number, undefined, metadata) || !containsOnlyValidXChars(number, candidate.toString(), metadata)) {\n      return false;\n    }\n\n    // Skipped for simplicity.\n    // return isNationalPrefixPresentIfRequired(number, metadata)\n    return true;\n  },\n\n\n  /**\r\n   * Phone numbers accepted are \"valid\" and\r\n   * are grouped in a possible way for this locale. For example, a US number written as\r\n   * \"65 02 53 00 00\" and \"650253 0000\" are not accepted at this leniency level, whereas\r\n   * \"650 253 0000\", \"650 2530000\" or \"6502530000\" are.\r\n   * Numbers with more than one '/' symbol in the national significant number\r\n   * are also dropped at this level.\r\n   *\r\n   * Warning: This level might result in lower coverage especially for regions outside of\r\n   * country code \"+1\". If you are not sure about which level to use,\r\n   * email the discussion group libphonenumber-discuss@googlegroups.com.\r\n   */\n  STRICT_GROUPING: function STRICT_GROUPING(number, candidate, metadata, regExpCache) {\n    var candidateString = candidate.toString();\n\n    if (!(0, _validate_2.default)(number, undefined, metadata) || !containsOnlyValidXChars(number, candidateString, metadata) || containsMoreThanOneSlashInNationalNumber(number, candidateString) || !isNationalPrefixPresentIfRequired(number, metadata)) {\n      return false;\n    }\n\n    return checkNumberGroupingIsValid(number, candidate, metadata, allNumberGroupsRemainGrouped, regExpCache);\n  },\n\n\n  /**\r\n   * Phone numbers accepted are {@linkplain PhoneNumberUtil#isValidNumber(PhoneNumber) valid} and\r\n   * are grouped in the same way that we would have formatted it, or as a single block. For\r\n   * example, a US number written as \"650 2530000\" is not accepted at this leniency level, whereas\r\n   * \"650 253 0000\" or \"6502530000\" are.\r\n   * Numbers with more than one '/' symbol are also dropped at this level.\r\n   * <p>\r\n   * Warning: This level might result in lower coverage especially for regions outside of country\r\n   * code \"+1\". If you are not sure about which level to use, email the discussion group\r\n   * libphonenumber-discuss@googlegroups.com.\r\n   */\n  EXACT_GROUPING: function EXACT_GROUPING(number, candidate, metadata, regExpCache) {\n    var candidateString = candidate.toString();\n\n    if (!(0, _validate_2.default)(number, undefined, metadata) || !containsOnlyValidXChars(number, candidateString, metadata) || containsMoreThanOneSlashInNationalNumber(number, candidateString) || !isNationalPrefixPresentIfRequired(number, metadata)) {\n      return false;\n    }\n\n    return checkNumberGroupingIsValid(number, candidate, metadata, allNumberGroupsAreExactlyPresent, regExpCache);\n  }\n};\n\n\nfunction containsOnlyValidXChars(number, candidate, metadata) {\n  // The characters 'x' and 'X' can be (1) a carrier code, in which case they always precede the\n  // national significant number or (2) an extension sign, in which case they always precede the\n  // extension number. We assume a carrier code is more than 1 digit, so the first case has to\n  // have more than 1 consecutive 'x' or 'X', whereas the second case can only have exactly 1 'x'\n  // or 'X'. We ignore the character if it appears as the last character of the string.\n  for (var index = 0; index < candidate.length - 1; index++) {\n    var charAtIndex = candidate.charAt(index);\n\n    if (charAtIndex === 'x' || charAtIndex === 'X') {\n      var charAtNextIndex = candidate.charAt(index + 1);\n\n      if (charAtNextIndex === 'x' || charAtNextIndex === 'X') {\n        // This is the carrier code case, in which the 'X's always precede the national\n        // significant number.\n        index++;\n        if (util.isNumberMatch(number, candidate.substring(index)) != MatchType.NSN_MATCH) {\n          return false;\n        }\n        // This is the extension sign case, in which the 'x' or 'X' should always precede the\n        // extension number.\n      } else if ((0, _parseDigits2.default)(candidate.substring(index)) !== number.ext) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\nfunction isNationalPrefixPresentIfRequired(number, _metadata) {\n  // First, check how we deduced the country code. If it was written in international format, then\n  // the national prefix is not required.\n  if (number.getCountryCodeSource() != 'FROM_DEFAULT_COUNTRY') {\n    return true;\n  }\n\n  var phoneNumberRegion = util.getRegionCodeForCountryCode(number.getCountryCode());\n\n  var metadata = util.getMetadataForRegion(phoneNumberRegion);\n  if (metadata == null) {\n    return true;\n  }\n\n  // Check if a national prefix should be present when formatting this number.\n  var nationalNumber = util.getNationalSignificantNumber(number);\n  var formatRule = util.chooseFormattingPatternForNumber(metadata.numberFormats(), nationalNumber);\n\n  // To do this, we check that a national prefix formatting rule was present\n  // and that it wasn't just the first-group symbol ($1) with punctuation.\n  if (formatRule && formatRule.getNationalPrefixFormattingRule().length > 0) {\n    if (formatRule.getNationalPrefixOptionalWhenFormatting()) {\n      // The national-prefix is optional in these cases, so we don't need to check if it was\n      // present.\n      return true;\n    }\n\n    if (PhoneNumberUtil.formattingRuleHasFirstGroupOnly(formatRule.getNationalPrefixFormattingRule())) {\n      // National Prefix not needed for this number.\n      return true;\n    }\n\n    // Normalize the remainder.\n    var rawInputCopy = PhoneNumberUtil.normalizeDigitsOnly(number.getRawInput());\n\n    // Check if we found a national prefix and/or carrier code at the start of the raw input, and\n    // return the result.\n    return util.maybeStripNationalPrefixAndCarrierCode(rawInputCopy, metadata, null);\n  }\n\n  return true;\n}\n\nfunction containsMoreThanOneSlashInNationalNumber(number, candidate) {\n  var firstSlashInBodyIndex = candidate.indexOf('/');\n  if (firstSlashInBodyIndex < 0) {\n    // No slashes, this is okay.\n    return false;\n  }\n\n  // Now look for a second one.\n  var secondSlashInBodyIndex = candidate.indexOf('/', firstSlashInBodyIndex + 1);\n  if (secondSlashInBodyIndex < 0) {\n    // Only one slash, this is okay.\n    return false;\n  }\n\n  // If the first slash is after the country calling code, this is permitted.\n  var candidateHasCountryCode = number.getCountryCodeSource() === CountryCodeSource.FROM_NUMBER_WITH_PLUS_SIGN || number.getCountryCodeSource() === CountryCodeSource.FROM_NUMBER_WITHOUT_PLUS_SIGN;\n\n  if (candidateHasCountryCode && PhoneNumberUtil.normalizeDigitsOnly(candidate.substring(0, firstSlashInBodyIndex)) === String(number.getCountryCode())) {\n    // Any more slashes and this is illegal.\n    return candidate.slice(secondSlashInBodyIndex + 1).indexOf('/') >= 0;\n  }\n\n  return true;\n}\n\nfunction checkNumberGroupingIsValid(number, candidate, metadata, checkGroups, regExpCache) {\n  var normalizedCandidate = normalizeDigits(candidate, true /* keep non-digits */);\n  var formattedNumberGroups = getNationalNumberGroups(metadata, number, null);\n  if (checkGroups(metadata, number, normalizedCandidate, formattedNumberGroups)) {\n    return true;\n  }\n\n  // If this didn't pass, see if there are any alternate formats that match, and try them instead.\n  var alternateFormats = MetadataManager.getAlternateFormatsForCountry(number.getCountryCode());\n  var nationalSignificantNumber = util.getNationalSignificantNumber(number);\n\n  if (alternateFormats) {\n    for (var _iterator = alternateFormats.numberFormats(), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n      var _ref;\n\n      if (_isArray) {\n        if (_i >= _iterator.length) break;\n        _ref = _iterator[_i++];\n      } else {\n        _i = _iterator.next();\n        if (_i.done) break;\n        _ref = _i.value;\n      }\n\n      var alternateFormat = _ref;\n\n      if (alternateFormat.leadingDigitsPatterns().length > 0) {\n        // There is only one leading digits pattern for alternate formats.\n        var leadingDigitsRegExp = regExpCache.getPatternForRegExp('^' + alternateFormat.leadingDigitsPatterns()[0]);\n        if (!leadingDigitsRegExp.test(nationalSignificantNumber)) {\n          // Leading digits don't match; try another one.\n          continue;\n        }\n      }\n      formattedNumberGroups = getNationalNumberGroups(metadata, number, alternateFormat);\n      if (checkGroups(metadata, number, normalizedCandidate, formattedNumberGroups)) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\n/**\r\n * Helper method to get the national-number part of a number, formatted without any national\r\n * prefix, and return it as a set of digit blocks that would be formatted together following\r\n * standard formatting rules.\r\n */\nfunction getNationalNumberGroups(metadata, number, formattingPattern) {\n  if (formattingPattern) {\n    // We format the NSN only, and split that according to the separator.\n    var nationalSignificantNumber = util.getNationalSignificantNumber(number);\n    return util.formatNsnUsingPattern(nationalSignificantNumber, formattingPattern, 'RFC3966', metadata).split('-');\n  }\n\n  // This will be in the format +CC-DG1-DG2-DGX;ext=EXT where DG1..DGX represents groups of digits.\n  var rfc3966Format = formatNumber(number, 'RFC3966', metadata);\n\n  // We remove the extension part from the formatted string before splitting it into different\n  // groups.\n  var endIndex = rfc3966Format.indexOf(';');\n  if (endIndex < 0) {\n    endIndex = rfc3966Format.length;\n  }\n\n  // The country-code will have a '-' following it.\n  var startIndex = rfc3966Format.indexOf('-') + 1;\n  return rfc3966Format.slice(startIndex, endIndex).split('-');\n}\n\nfunction allNumberGroupsAreExactlyPresent(metadata, number, normalizedCandidate, formattedNumberGroups) {\n  var candidateGroups = normalizedCandidate.split(NON_DIGITS_PATTERN);\n\n  // Set this to the last group, skipping it if the number has an extension.\n  var candidateNumberGroupIndex = number.hasExtension() ? candidateGroups.length - 2 : candidateGroups.length - 1;\n\n  // First we check if the national significant number is formatted as a block.\n  // We use contains and not equals, since the national significant number may be present with\n  // a prefix such as a national number prefix, or the country code itself.\n  if (candidateGroups.length == 1 || candidateGroups[candidateNumberGroupIndex].contains(util.getNationalSignificantNumber(number))) {\n    return true;\n  }\n\n  // Starting from the end, go through in reverse, excluding the first group, and check the\n  // candidate and number groups are the same.\n  var formattedNumberGroupIndex = formattedNumberGroups.length - 1;\n  while (formattedNumberGroupIndex > 0 && candidateNumberGroupIndex >= 0) {\n    if (candidateGroups[candidateNumberGroupIndex] !== formattedNumberGroups[formattedNumberGroupIndex]) {\n      return false;\n    }\n    formattedNumberGroupIndex--;\n    candidateNumberGroupIndex--;\n  }\n\n  // Now check the first group. There may be a national prefix at the start, so we only check\n  // that the candidate group ends with the formatted number group.\n  return candidateNumberGroupIndex >= 0 && (0, _util.endsWith)(candidateGroups[candidateNumberGroupIndex], formattedNumberGroups[0]);\n}\n\nfunction allNumberGroupsRemainGrouped(metadata, number, normalizedCandidate, formattedNumberGroups) {\n  var fromIndex = 0;\n  if (number.getCountryCodeSource() !== CountryCodeSource.FROM_DEFAULT_COUNTRY) {\n    // First skip the country code if the normalized candidate contained it.\n    var countryCode = String(number.getCountryCode());\n    fromIndex = normalizedCandidate.indexOf(countryCode) + countryCode.length();\n  }\n\n  // Check each group of consecutive digits are not broken into separate groupings in the\n  // {@code normalizedCandidate} string.\n  for (var i = 0; i < formattedNumberGroups.length; i++) {\n    // Fails if the substring of {@code normalizedCandidate} starting from {@code fromIndex}\n    // doesn't contain the consecutive digits in formattedNumberGroups[i].\n    fromIndex = normalizedCandidate.indexOf(formattedNumberGroups[i], fromIndex);\n    if (fromIndex < 0) {\n      return false;\n    }\n    // Moves {@code fromIndex} forward.\n    fromIndex += formattedNumberGroups[i].length();\n    if (i == 0 && fromIndex < normalizedCandidate.length()) {\n      // We are at the position right after the NDC. We get the region used for formatting\n      // information based on the country code in the phone number, rather than the number itself,\n      // as we do not need to distinguish between different countries with the same country\n      // calling code and this is faster.\n      var region = util.getRegionCodeForCountryCode(number.getCountryCode());\n      if (util.getNddPrefixForRegion(region, true) != null && Character.isDigit(normalizedCandidate.charAt(fromIndex))) {\n        // This means there is no formatting symbol after the NDC. In this case, we only\n        // accept the number if there is no formatting symbol at all in the number, except\n        // for extensions. This is only important for countries with national prefixes.\n        var nationalSignificantNumber = util.getNationalSignificantNumber(number);\n        return (0, _util.startsWith)(normalizedCandidate.slice(fromIndex - formattedNumberGroups[i].length), nationalSignificantNumber);\n      }\n    }\n  }\n\n  // The check here makes sure that we haven't mistakenly already used the extension to\n  // match the last group of the subscriber number. Note the extension cannot have\n  // formatting in-between digits.\n  return normalizedCandidate.slice(fromIndex).contains(number.getExtension());\n}\n//# sourceMappingURL=Leniency.js.map","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\nexports.default = searchNumbers;\n\nvar _parsePhoneNumber = require('./parsePhoneNumber');\n\nvar _PhoneNumberMatcher = require('./PhoneNumberMatcher');\n\nvar _PhoneNumberMatcher2 = _interopRequireDefault(_PhoneNumberMatcher);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/**\r\n * @return ES6 `for ... of` iterator.\r\n */\nfunction searchNumbers() {\n\tvar _normalizeArguments = (0, _parsePhoneNumber.normalizeArguments)(arguments),\n\t    text = _normalizeArguments.text,\n\t    options = _normalizeArguments.options,\n\t    metadata = _normalizeArguments.metadata;\n\n\tvar matcher = new _PhoneNumberMatcher2.default(text, options, metadata);\n\n\treturn _defineProperty({}, Symbol.iterator, function () {\n\t\treturn {\n\t\t\tnext: function next() {\n\t\t\t\tif (matcher.hasNext()) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tdone: false,\n\t\t\t\t\t\tvalue: matcher.next()\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\treturn {\n\t\t\t\t\tdone: true\n\t\t\t\t};\n\t\t\t}\n\t\t};\n\t});\n}\n//# sourceMappingURL=searchNumbers.js.map","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = formatIncompletePhoneNumber;\n\nvar _AsYouType = require('./AsYouType');\n\nvar _AsYouType2 = _interopRequireDefault(_AsYouType);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\r\n * Formats a (possibly incomplete) phone number.\r\n * The phone number can be either in E.164 format\r\n * or in a form of national number digits.\r\n * @param {string} value - A possibly incomplete phone number. Either in E.164 format or in a form of national number digits.\r\n * @param {string?} country - Two-letter (\"ISO 3166-1 alpha-2\") country code.\r\n * @return {string} Formatted (possibly incomplete) phone number.\r\n */\nfunction formatIncompletePhoneNumber(value, country, metadata) {\n  if (!metadata) {\n    metadata = country;\n    country = undefined;\n  }\n  return new _AsYouType2.default(country, metadata).input(value);\n}\n//# sourceMappingURL=formatIncompletePhoneNumber.js.map","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = formatPhoneNumber;\n\nvar _custom = require('libphonenumber-js/custom');\n\n/**\r\n * Formats a (possibly incomplete) phone number.\r\n * The phone number can be either in E.164 format\r\n * or in a form of national number digits.\r\n * Is used for `input-format`'s `format()` function.\r\n * https://github.com/catamphetamine/input-format\r\n * @param {string} value - A possibly incomplete phone number. Either in E.164 format or in a form of national number digits.\r\n * @param {string?} country - Two-letter (\"ISO 3166-1 alpha-2\") country code.\r\n * @return {object} `{ text : string, template : string }`\r\n */\nfunction formatPhoneNumber(value, country, metadata) {\n  // \"As you type\" formatter.\n  var formatter = new _custom.AsYouType(country, metadata);\n\n  // Format the number.\n  var text = formatter.input(value);\n\n  return { text: text, template: formatter.template };\n}\n//# sourceMappingURL=formatPhoneNumber.js.map","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\nexports.default = undefined;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _class, _class2, _temp2;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _reactLifecyclesCompat = require('react-lifecycles-compat');\n\nvar _custom = require('libphonenumber-js/custom');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/**\r\n * `InputBasic`'s caret is not as \"smart\" as the default `inputComponent`'s\r\n * but still works good enough. When erasing or inserting digits in the middle\r\n * of a phone number the caret usually jumps to the end: this is the expected\r\n * behaviour and it's the workaround for the [Samsung Galaxy smart caret positioning bug](https://github.com/catamphetamine/react-phone-number-input/issues/75).\r\n */\nvar InputBasic = (0, _reactLifecyclesCompat.polyfill)(_class = (_temp2 = _class2 = function (_PureComponent) {\n\t_inherits(InputBasic, _PureComponent);\n\n\tfunction InputBasic() {\n\t\tvar _ref;\n\n\t\tvar _temp, _this, _ret;\n\n\t\t_classCallCheck(this, InputBasic);\n\n\t\tfor (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n\t\t\targs[_key] = arguments[_key];\n\t\t}\n\n\t\treturn _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = InputBasic.__proto__ || Object.getPrototypeOf(InputBasic)).call.apply(_ref, [this].concat(args))), _this), _this.state = {}, _this.onChange = function (event) {\n\t\t\tvar onChange = _this.props.onChange;\n\t\t\tvar value = _this.state.value;\n\n\n\t\t\tvar newValue = (0, _custom.parseIncompletePhoneNumber)(event.target.value);\n\n\t\t\t// By default, if a value is something like `\"(123)\"`\n\t\t\t// then Backspace would only erase the rightmost brace\n\t\t\t// becoming something like `\"(123\"`\n\t\t\t// which would give the same `\"123\"` value\n\t\t\t// which would then be formatted back to `\"(123)\"`\n\t\t\t// and so a user wouldn't be able to erase the phone number.\n\t\t\t// Working around this issue with this simple hack.\n\t\t\tif (newValue === value) {\n\t\t\t\tif (_this.format(newValue).indexOf(event.target.value) === 0) {\n\t\t\t\t\t// Trim the last digit (or plus sign).\n\t\t\t\t\tnewValue = newValue.slice(0, -1);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Prevents React from resetting the `<input/>` caret position.\n\t\t\t// https://github.com/reactjs/react-redux/issues/525#issuecomment-254852039\n\t\t\t// https://github.com/facebook/react/issues/955\n\t\t\t_this.setState({ value: newValue }, function () {\n\t\t\t\treturn onChange(newValue);\n\t\t\t});\n\t\t}, _this.onBlur = function (event) {\n\t\t\tvar onBlur = _this.props.onBlur;\n\t\t\tvar value = _this.state.value;\n\n\n\t\t\tif (onBlur) {\n\t\t\t\t// `event` is React's `SyntheticEvent`.\n\t\t\t\t// Its `.value` is read-only therefore cloning it.\n\t\t\t\tvar _event = _extends({}, event, {\n\t\t\t\t\ttarget: _extends({}, event.target, {\n\t\t\t\t\t\tvalue: value\n\t\t\t\t\t})\n\n\t\t\t\t\t// Workaround for `redux-form` event detection.\n\t\t\t\t\t// https://github.com/erikras/redux-form/blob/v5/src/events/isEvent.js\n\t\t\t\t});_event.stopPropagation = event.stopPropagation;\n\t\t\t\t_event.preventDefault = event.preventDefault;\n\n\t\t\t\treturn onBlur(_event);\n\t\t\t}\n\t\t}, _this.focus = function () {\n\t\t\treturn _this.input.focus();\n\t\t}, _this.storeInput = function (ref) {\n\t\t\treturn _this.input = ref;\n\t\t}, _temp), _possibleConstructorReturn(_this, _ret);\n\t}\n\n\t_createClass(InputBasic, [{\n\t\tkey: 'format',\n\t\tvalue: function format(value) {\n\t\t\tvar _props = this.props,\n\t\t\t    country = _props.country,\n\t\t\t    metadata = _props.metadata;\n\n\n\t\t\treturn (0, _custom.formatIncompletePhoneNumber)(value, country, metadata);\n\t\t}\n\t}, {\n\t\tkey: 'render',\n\t\tvalue: function render() {\n\t\t\tvar _props2 = this.props,\n\t\t\t    onChange = _props2.onChange,\n\t\t\t    country = _props2.country,\n\t\t\t    metadata = _props2.metadata,\n\t\t\t    rest = _objectWithoutProperties(_props2, ['onChange', 'country', 'metadata']);\n\n\t\t\t// Prevents React from resetting the `<input/>` caret position.\n\t\t\t// https://github.com/reactjs/react-redux/issues/525#issuecomment-254852039\n\t\t\t// https://github.com/facebook/react/issues/955\n\n\n\t\t\tvar value = this.state.value;\n\n\n\t\t\treturn _react2.default.createElement('input', _extends({\n\t\t\t\ttype: 'tel',\n\t\t\t\tautoComplete: 'tel'\n\t\t\t}, rest, {\n\t\t\t\tref: this.storeInput,\n\t\t\t\tvalue: this.format(value),\n\t\t\t\tonChange: this.onChange,\n\t\t\t\tonBlur: this.onBlur }));\n\t\t}\n\t}], [{\n\t\tkey: 'getDerivedStateFromProps',\n\n\n\t\t// Prevents React from resetting the `<input/>` caret position.\n\t\t// https://github.com/reactjs/react-redux/issues/525#issuecomment-254852039\n\t\t// https://github.com/facebook/react/issues/955\n\t\tvalue: function getDerivedStateFromProps(_ref2) {\n\t\t\tvar value = _ref2.value;\n\n\t\t\treturn { value: value };\n\t\t}\n\n\t\t// This `onBlur` interceptor is a workaround for `redux-form`'s bug\n\t\t// so that it gets the up-to-date `value` in its `onBlur` handler.\n\t\t// Without this fix it just gets the actual (raw) input field textual value.\n\t\t// E.g. `+7 800 555 35 35` instead of `+78005553535`.\n\t\t//\n\t\t// New `value` is taken from `event` in `redux-form`'s `handleBlur()`.\n\t\t// https://github.com/erikras/redux-form/blob/785edf8aac3adc84aba2ab6898a4aa8c48687750/src/ConnectedField.js#L168\n\t\t// `redux-form` shouldn't have taken the new `value` from `event`.\n\t\t//\n\t\t// A developer is not supposed to pass this `onBlur` property manually.\n\t\t// Instead, `redux-form` passes `onBlur` to this component automatically\n\t\t// and this component patches that `onBlur` handler (a hacky way but works).\n\t\t//\n\n\t}]);\n\n\treturn InputBasic;\n}(_react.PureComponent), _class2.propTypes = {\n\t// The parsed phone number.\n\t// E.g.: `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\n\tvalue: _propTypes2.default.string.isRequired,\n\n\t// Updates the `value`.\n\tonChange: _propTypes2.default.func.isRequired,\n\n\t// `onBlur` workaround for `redux-form`'s bug.\n\tonBlur: _propTypes2.default.func,\n\n\t// A two-letter country code for formatting `value`\n\t// as a national phone number (e.g. `(800) 555 35 35`).\n\t// E.g. \"US\", \"RU\", etc.\n\t// If no `country` is passed then `value`\n\t// is formatted as an international phone number.\n\t// (e.g. `+7 800 555 35 35`)\n\tcountry: _propTypes2.default.string,\n\n\t// `libphonenumber-js` metadata.\n\tmetadata: _propTypes2.default.object.isRequired }, _temp2)) || _class;\n\nexports.default = InputBasic;\n//# sourceMappingURL=InputBasic.js.map","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\nexports.default = InternationalIcon;\n\nvar _react = require(\"react\");\n\nvar _react2 = _interopRequireDefault(_react);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction InternationalIcon() {\n\treturn _react2.default.createElement(\n\t\t\"svg\",\n\t\t{ version: \"1.1\", xmlns: \"http://www.w3.org/2000/svg\", xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n\t\t\tviewBox: \"0 0 356.926 356.926\" },\n\t\t_react2.default.createElement(\n\t\t\t\"g\",\n\t\t\tnull,\n\t\t\t_react2.default.createElement(\n\t\t\t\t\"g\",\n\t\t\t\tnull,\n\t\t\t\t_react2.default.createElement(\"path\", { d: \"M211.89,213.669c0-10.475-8.521-18.997-18.996-18.997c-0.401,0-0.799,0.017-1.193,0.041v2.406\\r c0.396-0.028,0.79-0.061,1.193-0.061c9.158,0,16.608,7.452,16.608,16.611s-7.45,16.61-16.608,16.61\\r c-0.269,0-0.53-0.027-0.795-0.041v0.897v1.509v4.723H186.2v3.182h13.388v-3.182h-5.104v-4.774\\r C204.218,231.781,211.89,223.607,211.89,213.669z\" }),\n\t\t\t\t_react2.default.createElement(\n\t\t\t\t\t\"g\",\n\t\t\t\t\tnull,\n\t\t\t\t\t_react2.default.createElement(\"polygon\", { points: \"260.072,79.408 260.398,82.045 256.447,82.882 255.913,88.517 260.677,88.517 266.998,87.913 270.251,84.021\\r 266.788,82.678 264.883,80.488 262.024,75.858 260.677,69.329 255.286,70.409 253.799,72.721 253.799,75.312 256.378,77.084\\r \" }),\n\t\t\t\t\t_react2.default.createElement(\"polygon\", { points: \"255.495,81.569 255.773,78.037 252.637,76.683 248.233,77.706 244.945,82.94 244.945,86.344 248.768,86.344\\r \" }),\n\t\t\t\t\t_react2.default.createElement(\"path\", { d: \"M164.852,96.598l-0.976,2.498h-4.7v2.428h1.121c0,0,0.07,0.511,0.168,1.191l2.876-0.238l1.783-1.121l0.465-2.248\\r l2.335-0.204l0.912-1.888l-2.138-0.442L164.852,96.598z\" }),\n\t\t\t\t\t_react2.default.createElement(\"polygon\", { points: \"152.739,101.001 152.565,103.366 155.976,103.081 156.324,100.705 154.279,99.096 \\t\\t\\t\" }),\n\t\t\t\t\t_react2.default.createElement(\"path\", { d: \"M356.868,176.633c-0.047-5.223-0.313-10.398-0.802-15.505c-1.662-17.01-5.717-33.311-11.828-48.589\\r c-0.441-1.127-0.859-2.283-1.336-3.41c-8.121-19.183-19.531-36.646-33.474-51.721c-0.906-0.987-1.835-1.952-2.765-2.916\\r c-2.649-2.736-5.333-5.415-8.156-7.971C266.788,17.631,224.642,0,178.463,0C131.896,0,89.447,17.957,57.635,47.271\\r c-7.413,6.832-14.221,14.303-20.408,22.285C13.919,99.717,0,137.49,0,178.463c0,98.398,80.059,178.463,178.463,178.463\\r c69.225,0,129.316-39.643,158.897-97.399c6.32-12.327,11.247-25.491,14.569-39.294c0.837-3.486,1.58-7.018,2.208-10.585\\r c1.801-10.137,2.788-20.56,2.788-31.196C356.902,177.859,356.868,177.249,356.868,176.633z M323.278,105.306l1.022-1.162\\r c1.359,2.637,2.649,5.304,3.846,8.028l-1.708-0.07l-3.172,0.436v-7.233H323.278z M297.484,74.156l0.023-7.971\\r c2.812,2.975,5.508,6.036,8.087,9.214l-3.207,4.781l-11.247-0.111l-0.696-2.341L297.484,74.156z M82.214,54.364v-0.302h3.567\\r l0.325-1.226h5.838v2.55l-1.691,2.236h-8.052v-3.259H82.214z M87.925,62.323c0,0,3.578-0.61,3.892-0.61c0.296,0,0,3.573,0,3.573\\r l-8.081,0.511l-1.534-1.847L87.925,62.323z M334.642,133.156h-13.06l-7.971-5.92l-8.365,0.808v5.112h-2.648l-2.848-2.033\\r l-14.512-3.671v-9.4l-18.38,1.423l-5.705,3.062h-7.285l-3.59-0.36l-8.854,4.926v9.254l-18.097,13.065l1.5,5.583h3.677\\r l-0.964,5.315l-2.58,0.953l-0.133,13.884l15.633,17.823h6.819l0.407-1.081h12.246l3.531-3.265h6.948l3.812,3.811l10.328,1.069\\r l-1.359,13.757l11.503,20.28l-6.064,11.572l0.406,5.438l4.775,4.752v13.095l6.251,8.412v10.897h5.391\\r c-30.046,36.913-75.823,60.534-127.026,60.534c-90.312,0-163.783-73.454-163.783-163.777c0-22.732,4.665-44.401,13.077-64.089\\r v-5.106l5.855-7.11c2.033-3.846,4.212-7.582,6.542-11.235l0.25,2.974l-6.791,8.261c-2.108,3.985-4.084,8.052-5.855,12.217v9.312\\r l6.791,3.276v12.955l6.535,11.136l5.316,0.808l0.68-3.817l-6.245-9.661l-1.237-9.388h3.677l1.557,9.673l9.051,13.193l-2.33,4.27\\r l5.734,8.795l14.291,3.532v-2.306l5.711,0.808l-0.534,4.078l4.484,0.825l6.948,1.888l9.8,11.171l12.507,0.941l1.237,10.207\\r l-8.58,5.984l-0.39,9.115l-1.237,5.588l12.386,15.5l0.947,5.32c0,0,4.49,1.209,5.048,1.209c0.535,0,10.062,7.227,10.062,7.227\\r v28.024l3.393,0.964l-2.294,12.92l5.71,7.634l-1.068,12.827l7.563,13.269l9.696,8.47l9.731,0.197l0.952-3.148l-7.163-6.029\\r l0.418-2.986l1.272-3.684l0.273-3.741l-4.839-0.14l-2.44-3.066l4.021-3.881l0.546-2.916l-4.496-1.29l0.261-2.719l6.402-0.976\\r l9.73-4.672l3.265-6.006l10.196-13.06l-2.312-10.213l3.131-5.438l9.399,0.278l6.327-5.02l2.051-19.693l7.04-8.877l1.237-5.704\\r l-6.39-2.045l-4.224-6.942l-14.419-0.145l-11.444-4.351l-0.534-8.162l-3.811-6.675l-10.335-0.145l-5.995-9.382l-5.298-2.585\\r l-0.273,2.858l-9.672,0.569l-3.532-4.926l-10.079-2.045l-8.302,9.603l-13.065-2.23l-0.953-14.727l-9.527-1.632l3.805-7.221\\r l-1.092-4.148l-12.531,8.371l-7.877-0.964l-2.817-6.158l1.737-6.355l4.339-8.005l9.998-5.072h19.322l-0.064,5.891l6.948,3.235\\r l-0.558-10.062l5.007-5.037l10.103-6.64l0.703-4.659l10.068-10.486l10.707-5.937l-0.941-0.773l7.256-6.826l2.655,0.703\\r l1.214,1.522l2.76-3.062l0.68-0.296l-3.021-0.43l-3.084-0.987v-2.963l1.632-1.33h3.579l1.655,0.726l1.418,2.858l1.737-0.267\\r v-0.244l0.5,0.163l5.02-0.772l0.714-2.463l2.852,0.726v2.667l-2.666,1.818h0.018l0.377,2.928l9.115,2.794c0,0,0,0.035,0.023,0.11\\r l2.079-0.18l0.146-3.939l-7.209-3.282l-0.396-1.894l5.972-2.033l0.273-5.722l-6.245-3.805l-0.412-9.667l-8.581,4.218h-3.143\\r l0.837-7.355l-11.688-2.748l-4.816,3.654v11.119l-8.673,2.754l-3.486,7.244l-3.758,0.604v-9.277l-8.162-1.133l-4.096-2.667\\r l-1.639-6.007l14.611-8.54l7.14-2.179l0.72,4.804l3.991-0.215l0.308-2.411l4.166-0.599l0.07-0.842l-1.784-0.738l-0.407-2.544\\r l5.118-0.43l3.091-3.213l0.18-0.238l0.035,0.012l0.941-0.976l10.753-1.354l4.746,4.032l-12.467,6.64l15.871,3.747l2.045-5.31\\r h6.948l2.44-4.625l-4.903-1.226v-5.856l-15.359-6.803l-10.62,1.226l-6.001,3.125l0.407,7.628l-6.257-0.953l-0.964-4.212\\r l6.007-5.449l-10.898-0.535l-3.125,0.953l-1.359,3.677l4.084,0.686l-0.813,4.084l-6.936,0.406l-1.092,2.725L118.987,52.4\\r c0,0-0.273-5.711-0.703-5.711c-0.389,0,7.901-0.145,7.901-0.145l5.995-5.85l-3.271-1.632l-4.339,4.223l-7.222-0.406l-4.403-6.019\\r h-9.254L94.03,44.07h8.848l0.796,2.597l-2.307,2.172l9.807,0.279l1.487,3.532l-11.032-0.407l-0.546-2.725l-6.925-1.499\\r l-3.689-2.033l-8.255,0.069c27.043-19.699,60.284-31.358,96.226-31.358c41.403,0,79.263,15.476,108.124,40.915l-1.929,3.474\\r l-7.564,2.962l-3.194,3.462l0.743,4.02l3.893,0.546l2.358,5.867l6.704-2.713l1.127,7.86h-2.045l-5.519-0.819l-6.111,1.022\\r l-5.926,8.377l-8.458,1.319l-1.221,7.25l3.579,0.842l-1.046,4.665l-8.412-1.69l-7.703,1.69l-1.639,4.293l1.325,9.01l4.531,2.115\\r l7.61-0.046l5.123-0.465l1.58-4.078l8.018-10.422l5.264,1.081l5.193-4.7l0.976,3.678l12.78,8.621l-1.557,2.108l-5.763-0.308\\r l2.23,3.137l3.556,0.79l4.159-1.737l-0.093-5.002l1.859-0.923l-1.487-1.575l-8.528-4.758l-2.254-6.314h7.099l2.243,2.248\\r l6.134,5.257l0.244,6.367l6.332,6.733l2.348-9.231l4.392-2.394l0.802,7.552l4.287,4.7l8.54-0.139\\r c1.661,4.247,3.148,8.563,4.427,12.978L334.642,133.156z M97.324,81.092l4.27-2.044l3.881,0.929l-1.324,5.211l-4.183,1.319\\r L97.324,81.092z M120.073,93.35v3.37h-9.783l-3.689-1.028l0.918-2.341l4.7-1.94h6.437v1.94H120.073z M124.582,98.05v3.259\\r l-2.463,1.58l-3.044,0.575c0,0,0-4.903,0-5.415H124.582z M121.822,96.72v-3.893l3.363,3.067L121.822,96.72z M123.355,104.568\\r v3.178l-2.347,2.347h-5.211l0.813-3.573l2.463-0.215l0.5-1.226L123.355,104.568z M110.39,98.05h5.408l-6.948,9.696l-2.852-1.534\\r l0.616-4.084L110.39,98.05z M132.529,103.464v3.166h-5.211l-1.417-2.062v-2.951h0.406L132.529,103.464z M127.748,99.096\\r l1.475-1.557l2.498,1.557l-1.999,1.656L127.748,99.096z M337.291,141.428l0.511-0.61c0.232,0.93,0.441,1.859,0.662,2.789\\r L337.291,141.428z\" }),\n\t\t\t\t\t_react2.default.createElement(\"path\", { d: \"M27.734,109.268v5.106c1.771-4.177,3.747-8.231,5.855-12.223L27.734,109.268z\" })\n\t\t\t\t)\n\t\t\t)\n\t\t)\n\t);\n}\n//# sourceMappingURL=InternationalIcon.js.map","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// Default country flag icon.\n// `<img/>` is wrapped in a `<div/>` to prevent SVGs from exploding in size.\n// https://github.com/catamphetamine/react-phone-number-input/issues/111\nvar FlagComponent = function FlagComponent(_ref) {\n\tvar country = _ref.country,\n\t    flags = _ref.flags,\n\t    flagsPath = _ref.flagsPath,\n\t    className = _ref.className;\n\n\tif (flags && flags[country]) {\n\t\treturn _react2.default.cloneElement(flags[country](), {\n\t\t\tclassName: (0, _classnames2.default)('react-phone-number-input__icon', className)\n\t\t});\n\t}\n\n\treturn _react2.default.createElement(\n\t\t'div',\n\t\t{ className: (0, _classnames2.default)('react-phone-number-input__icon', className) },\n\t\t_react2.default.createElement('img', {\n\t\t\talt: country,\n\t\t\tclassName: 'react-phone-number-input__icon-image',\n\t\t\tsrc: '' + flagsPath + country.toLowerCase() + '.svg' })\n\t);\n};\n\nFlagComponent.propTypes = {\n\t// The country to be selected by default.\n\t// Two-letter country code (\"ISO 3166-1 alpha-2\").\n\tcountry: _propTypes2.default.string.isRequired,\n\n\t// Country flag icon components.\n\t// By default flag icons are inserted as `<img/>`s\n\t// with their `src` pointed to `flag-icon-css` github repo.\n\t// There might be cases (e.g. an offline application)\n\t// where having a large (3 megabyte) `<svg/>` flags\n\t// bundle is more appropriate.\n\t// `import flags from 'react-phone-number-input/flags'`.\n\tflags: _propTypes2.default.objectOf(_propTypes2.default.func),\n\n\t// A base URL path for national flag SVG icons.\n\t// By default it uses the ones from `flag-icon-css` github repo.\n\tflagsPath: _propTypes2.default.string.isRequired\n};\n\nexports.default = FlagComponent;\n//# sourceMappingURL=Flag.js.map","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\nexports.getPreSelectedCountry = getPreSelectedCountry;\nexports.getCountrySelectOptions = getCountrySelectOptions;\nexports.parsePhoneNumber = parsePhoneNumber;\nexports.generateNationalNumberDigits = generateNationalNumberDigits;\nexports.migrateParsedInputForNewCountry = migrateParsedInputForNewCountry;\nexports.e164 = e164;\nexports.getCountryForParsedInput = getCountryForParsedInput;\nexports.get_country_from_possibly_incomplete_international_phone_number = get_country_from_possibly_incomplete_international_phone_number;\nexports.compare_strings = compare_strings;\nexports.has_international_option = has_international_option;\nexports.strip_country_calling_code = strip_country_calling_code;\nexports.get_national_significant_number_part = get_national_significant_number_part;\nexports.could_number_belong_to_country = could_number_belong_to_country;\n\nvar _custom = require('libphonenumber-js/custom');\n\n/**\r\n * Decides which country should be pre-selected\r\n * when the phone number input component is first mounted.\r\n * @param  {object} parsedNumber - A parsed number object: `{ country, phone }`. Can be an empty object.\r\n * @param  {string?} country - Pre-defined country (two-letter code).\r\n * @param  {string[]?} countries - A list of countries available.\r\n * @param  {boolean} includeInternationalOption - Whether \"International\" country option is available.\r\n * @param  {object} metadata - `libphonenumber-js` metadata\r\n * @return {string?}\r\n */\nfunction getPreSelectedCountry(parsed_number, country, countries, includeInternationalOption, metadata) {\n\t// If can get country from E.164 phone number\n\t// then it overrides the `country` passed (or not passed).\n\tif (parsed_number.country) {\n\t\t// `country` will be left `undefined` in case of non-detection.\n\t\tcountry = parsed_number.country;\n\t}\n\n\t// Only pre-select a country if it's in the available `countries` list.\n\tif (countries && countries.indexOf(country) < 0) {\n\t\tcountry = undefined;\n\t}\n\n\t// If there will be no \"International\" option\n\t// then some `country` must be selected.\n\t// It will still be the wrong country though.\n\t// But still country `<select/>` can't be left in a broken state.\n\tif (!country && !has_international_option(countries, includeInternationalOption) && countries && countries.length > 0) {\n\t\tcountry = countries[0];\n\t}\n\n\treturn country;\n}\n\n/**\r\n * Generates a sorted list of country `<select/>` options.\r\n * @param  {string[]} countries - A list of two-letter (\"ISO 3166-1 alpha-2\") country codes.\r\n * @param  {object?} labels - Custom country labels. E.g. `{ RU: 'Россия', US: 'США', ... }`.\r\n * @param  {boolean} includeInternationalOption - Whether should include \"International\" option at the top of the list.\r\n * @return {object[]} A list of objects having shape `{ value : string, label : string }`.\r\n */\n// `default_country_names` argument will be removed in version 2.x\nfunction getCountrySelectOptions(countries, country_names, includeInternationalOption, default_country_names) {\n\t// Generates a `<Select/>` option for each country.\n\tvar country_select_options = countries.map(function (country) {\n\t\treturn {\n\t\t\tvalue: country,\n\t\t\t// `default_country_names` will be removed from here in version 2.x\n\t\t\tlabel: country_names && country_names[country] || default_country_names[country]\n\t\t};\n\t});\n\n\t// Sort the list of countries alphabetically.\n\tcountry_select_options.sort(function (a, b) {\n\t\treturn compare_strings(a.label, b.label);\n\t});\n\n\t// Add the \"International\" option to the country list (if suitable)\n\tif (has_international_option(countries, includeInternationalOption)) {\n\t\tcountry_select_options.unshift({\n\t\t\tlabel: country_names && country_names.ZZ || default_country_names.ZZ\n\t\t});\n\t}\n\n\treturn country_select_options;\n}\n\n/**\r\n * Parses a E.164 phone number to an object having shape `{ country : string, phone : string }`.\r\n * @param {string} value = E.164 phone number.\r\n * @param  {object} metadata - `libphonenumber-js` metadata\r\n * @example\r\n * parsePhoneNumber('+78005553535')\r\n * // returns `{ country: 'RU', phone: '8005553535' }`\r\n */\nfunction parsePhoneNumber(value, metadata) {\n\treturn (0, _custom.parseNumber)(value || '', metadata);\n}\n\n/**\r\n * Generates national number digits for a parsed phone.\r\n * May prepend national prefix.\r\n * @param  {object} parsedPhone - Object having shape `{ country : string, phone : string }`.\r\n * @param  {object} metadata - `libphonenumber-js` metadata\r\n * @return {string}\r\n * @example\r\n * getNationalNumberDigits({ country: 'RU', phone: '8005553535' })\r\n * // returns '88005553535'\r\n */\nfunction generateNationalNumberDigits(parsed_phone, metadata) {\n\treturn (0, _custom.formatNumber)(parsed_phone, 'National', metadata).replace(/\\D/g, '');\n}\n\n/**\r\n * Migrates `<input/>` parsed `value` for the newly selected `country`.\r\n * @param {string?} value - The `value` parsed from phone number `<input/>` (it's the `parsed_input` state property, not the `value` property).\r\n * @param {string?} previousCountry - Previously selected country.\r\n * @param {string?} newCountry - Newly selected country. Can't be same as previously selected country.\r\n * @param {object} metadata - `libphonenumber-js` metadata.\r\n * @return {string}\r\n */\nfunction migrateParsedInputForNewCountry(value, previous_country, new_country, metadata) {\n\t// If `parsed_input` is empty\n\t// then no need to migrate anything.\n\tif (!value) {\n\t\treturn value;\n\t}\n\n\t// If switching to some country.\n\t// (from \"International\" or another country)\n\t// If switching from \"International\" then `value` starts with a `+`.\n\t// Otherwise it may or may not start with a `+`.\n\tif (new_country) {\n\t\t// If the phone number was entered in international format\n\t\t// then migrate it to the newly selected country.\n\t\t// The phone number may be incomplete.\n\t\t// The phone number entered not necessarily starts with\n\t\t// the previously selected country phone prefix.\n\t\tif (value[0] === '+') {\n\t\t\t// If the international phone number already contains\n\t\t\t// any country calling code then trim the country calling code part.\n\t\t\t// (that could also be the newly selected country phone code prefix as well)\n\t\t\t// `value` doesn't neccessarily belong to `previous_country`.\n\t\t\t// (e.g. if a user enters an international number\n\t\t\t//  not belonging to any of the reduced `countries` list)\n\t\t\tvalue = strip_country_calling_code(value, previous_country, metadata);\n\n\t\t\t// Prepend country calling code prefix\n\t\t\t// for the newly selected country.\n\t\t\treturn '+' + (0, _custom.getCountryCallingCode)(new_country, metadata) + value;\n\t\t}\n\t}\n\t// If switching to \"International\" from a country.\n\telse {\n\t\t\t// If the phone number was entered in national format.\n\t\t\tif (value[0] !== '+') {\n\t\t\t\t// Format the national phone number as an international one.\n\t\t\t\t// The phone number entered not necessarily even starts with\n\t\t\t\t// the previously selected country phone prefix.\n\t\t\t\t// Even if the phone number belongs to whole another country\n\t\t\t\t// it will still be parsed into some national phone number.\n\t\t\t\tvar partial_national_significant_number = get_national_significant_number_part(value, previous_country, metadata);\n\t\t\t\treturn (0, _custom.formatNumber)(partial_national_significant_number, previous_country, 'E.164', metadata);\n\t\t\t}\n\t\t}\n\n\treturn value;\n}\n\n/**\r\n * Converts phone number digits to a (possibly incomplete) E.164 phone number.\r\n * @param  {string?} number - A possibly incomplete phone number digits string. Can be a possibly incomplete E.164 phone number.\r\n * @param  {string?} country\r\n * @param  {[object} metadata - `libphonenumber-js` metadata.\r\n * @return {string?}\r\n */\nfunction e164(number, country, metadata) {\n\tif (!number) {\n\t\treturn;\n\t}\n\n\t// If the phone number is being input in international format.\n\tif (number[0] === '+') {\n\t\t// If it's just the `+` sign then return nothing.\n\t\tif (number === '+') {\n\t\t\treturn;\n\t\t}\n\n\t\t// If there are any digits then the `value` is returned as is.\n\t\treturn number;\n\t}\n\n\t// For non-international phone numbers\n\t// an accompanying country code is required.\n\tif (!country) {\n\t\treturn;\n\t}\n\n\tvar partial_national_significant_number = get_national_significant_number_part(number, country, metadata);\n\n\tif (!partial_national_significant_number) {\n\t\treturn;\n\t}\n\n\treturn (0, _custom.formatNumber)(partial_national_significant_number, country, 'E.164', metadata);\n}\n\n// If the phone number being input is an international one\n// then tries to derive the country from the phone number.\n// (regardless of whether there's any country currently selected)\n/**\r\n * @param {string} parsedInput - A possibly incomplete E.164 phone number.\r\n * @param {string?} country - Currently selected country.\r\n * @param {string[]?} countries - A list of available countries. If not passed then \"all countries\" are assumed.\r\n * @param {boolean} includeInternationalOption - Whether \"International\" country option is available.\r\n * @param  {[object} metadata - `libphonenumber-js` metadata.\r\n * @return {string?}\r\n */\nfunction getCountryForParsedInput(parsed_input, country, countries, includeInternationalOption, metadata) {\n\tif (parsed_input === '+') {\n\t\t// Don't change the currently selected country yet.\n\t\treturn country;\n\t}\n\n\tvar derived_country = get_country_from_possibly_incomplete_international_phone_number(parsed_input, metadata);\n\n\t// If a phone number is being input in international form\n\t// and the country can already be derived from it,\n\t// then select that country.\n\tif (derived_country && (!countries || countries.indexOf(derived_country) >= 0)) {\n\t\treturn derived_country;\n\t}\n\t// If \"International\" country option has not been disabled\n\t// and the international phone number entered doesn't correspond\n\t// to the currently selected country then reset the currently selected country.\n\telse if (country && has_international_option(countries, includeInternationalOption) && !could_number_belong_to_country(parsed_input, country, metadata)) {\n\t\t\treturn undefined;\n\t\t}\n\n\t// Don't change the currently selected country.\n\treturn country;\n}\n\n/**\r\n * Determines the country for a given (possibly incomplete) E.164 phone number.\r\n * @param  {string} number - A possibly incomplete E.164 phone number.\r\n * @param  {object} metadata - `libphonenumber-js` metadata.\r\n * @return {string?}\r\n */\nfunction get_country_from_possibly_incomplete_international_phone_number(number, metadata) {\n\tvar formatter = new _custom.AsYouType(null, metadata);\n\tformatter.input(number);\n\t// `001` is a special \"non-geograpical entity\" code\n\t// in Google's `libphonenumber` library.\n\tif (formatter.country === '001') {\n\t\treturn;\n\t}\n\treturn formatter.country;\n}\n\n/**\r\n * Compares two strings.\r\n * A helper for `Array.sort()`.\r\n */\nfunction compare_strings(a, b) {\n\t// Use `String.localeCompare` if it's available.\n\t// https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare\n\t// Which means everyone except IE <= 10 and Safari <= 10.\n\t// `localeCompare()` is available in latest Node.js versions.\n\t/* istanbul ignore else */\n\tif (String.prototype.localeCompare) {\n\t\treturn a.localeCompare(b);\n\t}\n\t/* istanbul ignore next */\n\treturn a < b ? -1 : a > b ? 1 : 0;\n}\n\n/**\r\n * Whether should add the \"International\" option to country `<select/>`.\r\n */\nfunction has_international_option(countries, includeInternationalOption) {\n\t// `includeInternationalOption` won't be `undefined` in version 2.x\n\n\t// If this behaviour is explicitly set, then do as it says.\n\tif (includeInternationalOption !== undefined) {\n\t\treturn includeInternationalOption;\n\t}\n\n\t// If no `countries` were specified\n\t// then it means \"the default behaviour\"\n\t// which means \"include the International option\".\n\tif (!countries) {\n\t\treturn true;\n\t}\n\n\t// Will be removed in version 2.x\n\t//\n\t// If the list of `countries` has been overridden\n\t// then only show \"International\" option\n\t// if no countries have been left out.\n\t// The reasoning is that if some countries were left out\n\t// and a user selects \"International\" option\n\t// then he can input a phone number for a non-included country\n\t// and perhaps that's what a developer didn't encourage\n\t// when he was reducing the set of selectable countries.\n\t//\n\t// There are `242` countries total in the default country list in version `1.1.7`.\n\t//\n\treturn countries.length >= 242;\n}\n\n/**\r\n * Strips `+${countryCallingCode}` prefix from an E.164 phone number.\r\n * @param {string} number - (possibly incomplete) E.164 phone number.\r\n * @param {string?} country - A possible country for this phone number.\r\n * @param {object} metadata - `libphonenumber-js` metadata.\r\n * @return {string}\r\n */\nfunction strip_country_calling_code(number, country, metadata) {\n\t// Just an optimization, so that it\n\t// doesn't have to iterate through all country calling codes.\n\tif (country) {\n\t\tvar country_calling_prefix = '+' + (0, _custom.getCountryCallingCode)(country, metadata);\n\n\t\t// If `country` fits the actual `number`.\n\t\tif (number.length < country_calling_prefix.length) {\n\t\t\tif (country_calling_prefix.indexOf(number) === 0) {\n\t\t\t\treturn '';\n\t\t\t}\n\t\t} else {\n\t\t\tif (number.indexOf(country_calling_prefix) === 0) {\n\t\t\t\treturn number.slice(country_calling_prefix.length);\n\t\t\t}\n\t\t}\n\t}\n\n\t// If `country` doesn't fit the actual `number`.\n\t// Try all available country calling codes.\n\tfor (var _iterator = Object.keys(metadata.country_calling_codes), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n\t\tvar _ref;\n\n\t\tif (_isArray) {\n\t\t\tif (_i >= _iterator.length) break;\n\t\t\t_ref = _iterator[_i++];\n\t\t} else {\n\t\t\t_i = _iterator.next();\n\t\t\tif (_i.done) break;\n\t\t\t_ref = _i.value;\n\t\t}\n\n\t\tvar country_calling_code = _ref;\n\n\t\tif (number.indexOf(country_calling_code) === '+'.length) {\n\t\t\treturn number.slice('+'.length + country_calling_code.length);\n\t\t}\n\t}\n\n\treturn '';\n}\n\n/**\r\n * Parses a partially entered national phone number digits\r\n * (or a partially entered E.164 international phone number)\r\n * and returns the national significant number part.\r\n * National significant number returned doesn't come with a national prefix.\r\n * @param {string} number - National number digits. Or possibly incomplete E.164 phone number.\r\n * @param {string?} country\r\n * @param {object} metadata - `libphonenumber-js` metadata.\r\n */\nfunction get_national_significant_number_part(number, country, metadata) {\n\t// Create \"as you type\" formatter.\n\tvar formatter = new _custom.AsYouType(country, metadata);\n\n\t// Input partial national phone number.\n\tformatter.input(number);\n\n\t// Return the parsed partial national phone number.\n\treturn formatter.getNationalNumber();\n}\n\n/**\r\n * Checks if a partially entered E.164 phone number could belong to a country.\r\n * @param  {string} number\r\n * @param  {string} country\r\n * @return {boolean}\r\n */\nfunction could_number_belong_to_country(number, country, metadata) {\n\tvar country_calling_code = (0, _custom.getCountryCallingCode)(country, metadata);\n\n\tvar i = 0;\n\twhile (i + 1 < number.length && i < country_calling_code.length) {\n\t\tif (number[i + 1] !== country_calling_code[i]) {\n\t\t\treturn false;\n\t\t}\n\t\ti++;\n\t}\n\n\treturn true;\n}\n//# sourceMappingURL=input-control.js.map","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\nexports.getCountryCodes = getCountryCodes;\nfunction getCountryCodes(labels) {\n\t// Includes all country codes (excluding \"ZZ\" for \"International\").\n\t//\n\t// From ISO 3166-1:2006(E/F):\n\t//\n\t// 8.1.3   User-assigned code elements\n\t//\n\t// If users need code elements to represent country names not included\n\t// in this part of ISO 3166, the series of letters AA, QM to QZ, XA\n\t// to XZ, and ZZ, and the series AAA to AAZ, QMA to QZZ, XAA to XZZ,\n\t// and ZZA to ZZZ respectively, and the series of numbers 900 to 999\n\t// are available. These users should inform the ISO 3166/MA of such use.\n\t//\n\treturn Object.keys(labels).filter(function (key) {\n\t\treturn key.length === 2 && key.toUpperCase() === key && key !== 'ZZ';\n\t});\n}\n//# sourceMappingURL=countries.js.map","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\nexports.default = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _class, _temp2;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar CountrySelectNative = (_temp2 = _class = function (_Component) {\n\t_inherits(CountrySelectNative, _Component);\n\n\tfunction CountrySelectNative() {\n\t\tvar _ref;\n\n\t\tvar _temp, _this, _ret;\n\n\t\t_classCallCheck(this, CountrySelectNative);\n\n\t\tfor (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n\t\t\targs[_key] = arguments[_key];\n\t\t}\n\n\t\treturn _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = CountrySelectNative.__proto__ || Object.getPrototypeOf(CountrySelectNative)).call.apply(_ref, [this].concat(args))), _this), _this.onChange = function (event) {\n\t\t\tvar onChange = _this.props.onChange;\n\n\t\t\tonChange(event.target.value);\n\t\t}, _temp), _possibleConstructorReturn(_this, _ret);\n\t}\n\n\t// storeSelectRef = (ref) => this.select = ref\n\t// ref={ this.storeSelectRef }\n\n\t_createClass(CountrySelectNative, [{\n\t\tkey: 'render',\n\t\tvalue: function render() {\n\t\t\tvar _props = this.props,\n\t\t\t    name = _props.name,\n\t\t\t    value = _props.value,\n\t\t\t    options = _props.options,\n\t\t\t    disabled = _props.disabled,\n\t\t\t    tabIndex = _props.tabIndex,\n\t\t\t    className = _props.className,\n\t\t\t    SelectArrow = _props.selectArrowComponent;\n\n\n\t\t\tvar selectedOption = options.filter(function (option) {\n\t\t\t\treturn option.value === value;\n\t\t\t})[0] || options[0];\n\t\t\tvar SelectedCountryFlag = selectedOption.icon;\n\n\t\t\treturn _react2.default.createElement(\n\t\t\t\t'div',\n\t\t\t\t{ className: (0, _classnames2.default)(className, 'react-phone-number-input__country--native') },\n\t\t\t\t_react2.default.createElement(SelectedCountryFlag, null),\n\t\t\t\t_react2.default.createElement(\n\t\t\t\t\t'select',\n\t\t\t\t\t{\n\t\t\t\t\t\tname: name,\n\t\t\t\t\t\tvalue: value,\n\t\t\t\t\t\tonChange: this.onChange,\n\t\t\t\t\t\tdisabled: disabled,\n\t\t\t\t\t\ttabIndex: tabIndex,\n\t\t\t\t\t\tclassName: 'react-phone-number-input__country-select' },\n\t\t\t\t\toptions.map(function (_ref2) {\n\t\t\t\t\t\tvar value = _ref2.value,\n\t\t\t\t\t\t    label = _ref2.label;\n\t\t\t\t\t\treturn _react2.default.createElement(\n\t\t\t\t\t\t\t'option',\n\t\t\t\t\t\t\t{ key: value || '-', value: value },\n\t\t\t\t\t\t\tlabel\n\t\t\t\t\t\t);\n\t\t\t\t\t})\n\t\t\t\t),\n\t\t\t\t_react2.default.createElement(SelectArrow, null)\n\t\t\t);\n\t\t}\n\n\t\t// toggle()\n\t\t// {\n\t\t// \tthis.select.click()\n\t\t// }\n\n\t}]);\n\n\treturn CountrySelectNative;\n}(_react.Component), _class.propTypes = {\n\tselectArrowComponent: _propTypes2.default.func.isRequired\n}, _class.defaultProps = {\n\tselectArrowComponent: function selectArrowComponent() {\n\t\treturn _react2.default.createElement('div', { className: 'react-phone-number-input__country-select-arrow' });\n\t} }, _temp2);\nexports.default = CountrySelectNative;\n//# sourceMappingURL=CountrySelectNative.js.map"],"sourceRoot":""}